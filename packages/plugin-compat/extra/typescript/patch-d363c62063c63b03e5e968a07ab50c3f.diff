diff --git a/lib/tsc.js b/lib/tsc.js
index ad1f3dd01..98958849d 100644
semver exclusivity >=5.3.0
--- a/lib/tsc.js
+++ b/lib/tsc.js
@@ -5059,6 +5059,9 @@ var sys = (() => {
       return Buffer.from && Buffer.from !== Int8Array.from ? Buffer.from(input, encoding) : new Buffer(input, encoding);
     }
     function isFileSystemCaseSensitive() {
+      if (typeof process.versions.pnp !== `undefined`) {
+        return true;
+      }
       if (platform === "win32" || platform === "win64") {
         return false;
       }
@@ -5440,12 +5443,19 @@ function getAnyExtensionFromPath(path, extensions, ignoreCase) {
   }
   return "";
 }
+var pathComponentsCache = /* @__PURE__ */ new Map();
 function pathComponents(path, rootLength) {
+  const cached = pathComponentsCache.get(path);
+  if (cached) {
+    return cached.slice();
+  }
   const root = path.substring(0, rootLength);
   const rest = path.substring(rootLength).split(directorySeparator);
   if (rest.length && !lastOrUndefined(rest))
     rest.pop();
-  return [root, ...rest];
+  const res = [root, ...rest];
+  pathComponentsCache.set(path, res);
+  return res;
 }
 function getPathComponents(path, currentDirectory = "") {
   path = combinePaths(currentDirectory, path);
@@ -17513,12 +17523,6 @@ function getPropertyNameFromType(type) {
 function isExpandoPropertyDeclaration(declaration) {
   return !!declaration && (isPropertyAccessExpression(declaration) || isElementAccessExpression(declaration) || isBinaryExpression(declaration));
 }
-function hasResolutionModeOverride(node) {
-  if (node === void 0) {
-    return false;
-  }
-  return !!getResolutionModeOverride(node.attributes);
-}

 // src/compiler/factory/baseNodeFactory.ts
 function createBaseNodeFactory() {
@@ -36895,6 +36899,46 @@ function getDefaultValueForOption(option) {
   }
 }

+// src/compiler/pnp.ts
+function getPnpApi(path) {
+  if (typeof process.versions.pnp === "undefined") {
+    return;
+  }
+  const { findPnpApi } = require("module");
+  if (findPnpApi) {
+    return findPnpApi(`${path}/`);
+  }
+}
+function getPnpApiPath(path) {
+  var _a;
+  return (_a = getPnpApi(path)) == null ? void 0 : _a.resolveRequest(
+    "pnpapi",
+    /*issuer*/
+    null
+  );
+}
+function getPnpTypeRoots(currentDirectory) {
+  const pnpApi = getPnpApi(currentDirectory);
+  if (!pnpApi) {
+    return [];
+  }
+  currentDirectory = resolvePath(currentDirectory);
+  const currentPackage = pnpApi.findPackageLocator(`${currentDirectory}/`);
+  if (!currentPackage) {
+    return [];
+  }
+  const { packageDependencies } = pnpApi.getPackageInformation(currentPackage);
+  const typeRoots = [];
+  for (const [name, referencish] of Array.from(packageDependencies.entries())) {
+    if (name.startsWith(`@types/`) && referencish !== null) {
+      const dependencyLocator = pnpApi.getLocator(name, referencish);
+      const { packageLocation } = pnpApi.getPackageInformation(dependencyLocator);
+      typeRoots.push(getDirectoryPath(packageLocation));
+    }
+  }
+  return typeRoots;
+}
+
 // src/compiler/moduleNameResolver.ts
 function trace(host, message, ...args) {
   host.trace(formatMessage(message, ...args));
@@ -37122,7 +37166,7 @@ function getEffectiveTypeRoots(options, host) {
     return getDefaultTypeRoots(currentDirectory);
   }
 }
-function getDefaultTypeRoots(currentDirectory) {
+function getNodeModulesTypeRoots(currentDirectory) {
   let typeRoots;
   forEachAncestorDirectory(normalizePath(currentDirectory), (directory) => {
     const atTypes = combinePaths(directory, nodeModulesAtTypes);
@@ -37135,6 +37179,15 @@ function arePathsEqual(path1, path2, host) {
   const useCaseSensitiveFileNames2 = typeof host.useCaseSensitiveFileNames === "function" ? host.useCaseSensitiveFileNames() : host.useCaseSensitiveFileNames;
   return comparePaths(path1, path2, !useCaseSensitiveFileNames2) === 0 /* EqualTo */;
 }
+function getDefaultTypeRoots(currentDirectory) {
+  const nmTypes = getNodeModulesTypeRoots(currentDirectory);
+  const pnpTypes = getPnpTypeRoots(currentDirectory);
+  if (nmTypes == null ? void 0 : nmTypes.length) {
+    return [...nmTypes, ...pnpTypes];
+  } else if (pnpTypes.length) {
+    return pnpTypes;
+  }
+}
 function getOriginalAndResolvedFileName(fileName, host, traceEnabled) {
   const resolvedFileName = realPath(fileName, host, traceEnabled);
   const pathsAreEqual = arePathsEqual(fileName, resolvedFileName, host);
@@ -39025,7 +39078,15 @@ function loadModuleFromNearestNodeModulesDirectoryWorker(extensions, moduleName,
     return lookup(secondaryExtensions);
   }
   function lookup(extensions2) {
-    return forEachAncestorDirectory(normalizeSlashes(directory), (ancestorDirectory) => {
+    const issuer = normalizeSlashes(directory);
+    if (getPnpApi(issuer)) {
+      const resolutionFromCache = tryFindNonRelativeModuleNameInCache(cache, moduleName, mode, issuer, redirectedReference, state);
+      if (resolutionFromCache) {
+        return resolutionFromCache;
+      }
+      return toSearchResult(loadModuleFromImmediateNodeModulesDirectoryPnP(extensions2, moduleName, issuer, state, typesScopeOnly, cache, redirectedReference));
+    }
+    return forEachAncestorDirectory(issuer, (ancestorDirectory) => {
       if (getBaseFileName(ancestorDirectory) !== "node_modules") {
         const resolutionFromCache = tryFindNonRelativeModuleNameInCache(cache, moduleName, mode, ancestorDirectory, redirectedReference, state);
         if (resolutionFromCache) {
@@ -39060,11 +39121,40 @@ function loadModuleFromImmediateNodeModulesDirectory(extensions, moduleName, dir
     return loadModuleFromSpecificNodeModulesDirectory(4 /* Declaration */, mangleScopedPackageNameWithTrace(moduleName, state), nodeModulesAtTypes2, nodeModulesAtTypesExists, state, cache, redirectedReference);
   }
 }
+function loadModuleFromImmediateNodeModulesDirectoryPnP(extensions, moduleName, directory, state, typesScopeOnly, cache, redirectedReference) {
+  const issuer = normalizeSlashes(directory);
+  if (!typesScopeOnly) {
+    const packageResult = tryLoadModuleUsingPnpResolution(extensions, moduleName, issuer, state, cache, redirectedReference);
+    if (packageResult) {
+      return packageResult;
+    }
+  }
+  if (extensions & 4 /* Declaration */) {
+    return tryLoadModuleUsingPnpResolution(4 /* Declaration */, `@types/${mangleScopedPackageNameWithTrace(moduleName, state)}`, issuer, state, cache, redirectedReference);
+  }
+}
 function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference) {
-  var _a, _b;
   const candidate = normalizePath(combinePaths(nodeModulesDirectory, moduleName));
   const { packageName, rest } = parsePackageName(moduleName);
   const packageDirectory = combinePaths(nodeModulesDirectory, packageName);
+  return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory);
+}
+function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state, cache, redirectedReference) {
+  const candidate = normalizePath(combinePaths(packageDirectory, rest));
+  return loadModuleFromSpecificNodeModulesDirectoryImpl(
+    extensions,
+    /*nodeModulesDirectoryExists*/
+    true,
+    state,
+    cache,
+    redirectedReference,
+    candidate,
+    rest,
+    packageDirectory
+  );
+}
+function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory) {
+  var _a, _b;
   let rootPackageInfo;
   let packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
   if (rest !== "" && packageInfo && (!(state.features & 8 /* Exports */) || !hasProperty(((_a = rootPackageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state)) == null ? void 0 : _a.contents.packageJsonContent) ?? emptyArray, "exports"))) {
@@ -39364,6 +39454,26 @@ function traceIfEnabled(state, diagnostic, ...args) {
 function useCaseSensitiveFileNames(state) {
   return !state.host.useCaseSensitiveFileNames ? true : typeof state.host.useCaseSensitiveFileNames === "boolean" ? state.host.useCaseSensitiveFileNames : state.host.useCaseSensitiveFileNames();
 }
+var { isBuiltin } = require("module");
+var failedLookups = /* @__PURE__ */ new Set();
+function loadPnpPackageResolution(packageName, containingDirectory) {
+  if (failedLookups.has(packageName)) {
+    return;
+  }
+  try {
+    const resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, `${containingDirectory}/`, { considerBuiltins: false });
+    return normalizeSlashes(resolution).replace(/\/$/, "");
+  } catch {
+    if (isBuiltin(packageName) || packageName.startsWith("@types/") && isBuiltin(packageName.slice(7)) || (packageName.startsWith("@typescript/") || packageName.startsWith("@types/typescript__"))) {
+      failedLookups.add(packageName);
+    }
+  }
+}
+function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference) {
+  const { packageName, rest } = parsePackageName(moduleName);
+  const packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+  return packageResolution ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state, cache, redirectedReference) : void 0;
+}

 // src/compiler/binder.ts
 function getModuleInstanceState(node, visited) {
@@ -42668,7 +42778,15 @@ function getAllModulePathsWorker(importingFileName, importedFileName, host) {
     /*preferSymlinks*/
     true,
     (path, isRedirect) => {
-      const isInNodeModules = pathContainsNodeModules(path);
+      let isInNodeModules = pathContainsNodeModules(path);
+      const pnpapi = getPnpApi(path);
+      if (!isInNodeModules && pnpapi) {
+        const fromLocator = pnpapi.findPackageLocator(importingFileName);
+        const toLocator = pnpapi.findPackageLocator(path);
+        if (fromLocator && toLocator && fromLocator !== toLocator) {
+          isInNodeModules = true;
+        }
+      }
       allFileNames.set(path, { path: getCanonicalFileName(path), isRedirect, isInNodeModules });
       importedFileFromNodeModules = importedFileFromNodeModules || isInNodeModules;
     }
@@ -42859,7 +42977,41 @@ function tryGetModuleNameAsNodeModule({ path, isRedirect }, { getCanonicalFileNa
   if (!host.fileExists || !host.readFile) {
     return void 0;
   }
-  const parts = getNodeModulePathParts(path);
+  let parts = getNodeModulePathParts(path);
+  let pnpPackageName;
+  const pnpApi = getPnpApi(path);
+  if (pnpApi) {
+    const fromLocator = pnpApi.findPackageLocator(importingSourceFile.fileName);
+    const toLocator = pnpApi.findPackageLocator(path);
+    if (fromLocator === toLocator) {
+      return void 0;
+    }
+    if (fromLocator && toLocator) {
+      const fromInfo = pnpApi.getPackageInformation(fromLocator);
+      if (toLocator.reference === fromInfo.packageDependencies.get(toLocator.name)) {
+        pnpPackageName = toLocator.name;
+      } else {
+        for (const [name, reference] of fromInfo.packageDependencies) {
+          if (Array.isArray(reference)) {
+            if (reference[0] === toLocator.name && reference[1] === toLocator.reference) {
+              pnpPackageName = name;
+              break;
+            }
+          }
+        }
+      }
+      if (!parts) {
+        const toInfo = pnpApi.getPackageInformation(toLocator);
+        parts = {
+          topLevelNodeModulesIndex: void 0,
+          topLevelPackageNameIndex: void 0,
+          // The last character from packageLocation is the trailing "/", we want to point to it
+          packageRootIndex: toInfo.packageLocation.length - 1,
+          fileNameIndex: path.lastIndexOf(`/`)
+        };
+      }
+    }
+  }
   if (!parts) {
     return void 0;
   }
@@ -42897,14 +43049,16 @@ function tryGetModuleNameAsNodeModule({ path, isRedirect }, { getCanonicalFileNa
   if (isRedirect && !isPackageRootPath) {
     return void 0;
   }
-  const globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-  const pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-  if (!(startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-    return void 0;
+  if (typeof process.versions.pnp === "undefined") {
+    const globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+    const pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+    if (!(startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+      return void 0;
+    }
   }
-  const nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-  const packageName = getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
-  return getEmitModuleResolutionKind(options) === 1 /* Classic */ && packageName === nodeModulesDirectoryName ? void 0 : packageName;
+  const nodeModulesDirectoryName = typeof pnpPackageName !== "undefined" ? pnpPackageName + moduleSpecifier.substring(parts.packageRootIndex) : moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
+  const packageNameFromPath = getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+  return getEmitModuleResolutionKind(options) === 1 /* Classic */ && packageNameFromPath === nodeModulesDirectoryName ? void 0 : packageNameFromPath;
   function tryDirectoryWithPackageJson(packageRootIndex) {
     var _a, _b;
     const packageRootPath = path.substring(0, packageRootIndex);
@@ -42917,9 +43071,9 @@ function tryGetModuleNameAsNodeModule({ path, isRedirect }, { getCanonicalFileNa
       const importMode = overrideMode || importingSourceFile.impliedNodeFormat;
       if (getResolvePackageJsonExports(options)) {
         const nodeModulesDirectoryName2 = packageRootPath.substring(parts.topLevelPackageNameIndex + 1);
-        const packageName2 = getPackageNameFromTypesPackageName(nodeModulesDirectoryName2);
+        const packageName = getPackageNameFromTypesPackageName(pnpPackageName ? pnpPackageName : nodeModulesDirectoryName2);
         const conditions = getConditions(options, importMode === 99 /* ESNext */);
-        const fromExports = packageJsonContent.exports ? tryGetModuleNameFromExports(options, path, packageRootPath, packageName2, packageJsonContent.exports, conditions) : void 0;
+        const fromExports = packageJsonContent.exports ? tryGetModuleNameFromExports(options, path, packageRootPath, packageName, packageJsonContent.exports, conditions) : void 0;
         if (fromExports) {
           const withJsExtension = !hasTSFileExtension(fromExports.moduleFileToTry) ? fromExports : { moduleFileToTry: removeFileExtension(fromExports.moduleFileToTry) + tryGetJSExtensionForFile(fromExports.moduleFileToTry, options) };
           return { ...withJsExtension, verbatimFromExports: true };
@@ -45656,7 +45810,7 @@ function createTypeChecker(host) {
     }
   }
   function getTargetofModuleDefault(moduleSymbol, node, dontResolveAlias) {
-    var _a;
+    var _a, _b;
     let exportDefaultSymbol;
     if (isShorthandAmbientModuleSymbol(moduleSymbol)) {
       exportDefaultSymbol = moduleSymbol;
@@ -45665,7 +45819,7 @@ function createTypeChecker(host) {
     }
     const file = (_a = moduleSymbol.declarations) == null ? void 0 : _a.find(isSourceFile);
     const specifier = getModuleSpecifierForImportOrExport(node);
-    if (!specifier) {
+    if (!specifier || moduleSymbol.flags === 512 && ((_b = moduleSymbol.exports) == null ? void 0 : _b.has("default"))) {
       return exportDefaultSymbol;
     }
     const hasDefaultOnly = isOnlyImportedAsDefault(specifier);
@@ -46538,7 +46692,7 @@ function createTypeChecker(host) {
             moduleReference
           );
         }
-        if (moduleResolutionKind === 3 /* Node16 */ || moduleResolutionKind === 99 /* NodeNext */) {
+        if (false) {
           const isSyncImport = currentSourceFile.impliedNodeFormat === 1 /* CommonJS */ && !findAncestor(location, isImportCall) || !!findAncestor(location, isImportEqualsDeclaration);
           const overrideHost = findAncestor(location, (l) => isImportTypeNode(l) || isExportDeclaration(l) || isImportDeclaration(l));
           if (isSyncImport && sourceFile.impliedNodeFormat === 99 /* ESNext */ && !hasResolutionModeOverride(overrideHost)) {
@@ -46546,7 +46700,7 @@ function createTypeChecker(host) {
               error(errorNode, Diagnostics.Module_0_cannot_be_imported_using_this_construct_The_specifier_only_resolves_to_an_ES_module_which_cannot_be_imported_with_require_Use_an_ECMAScript_import_instead, moduleReference);
             } else {
               let diagnosticDetails;
-              const ext = tryGetExtensionFromPath2(currentSourceFile.fileName);
+              const ext = tryGetExtensionFromPath3(currentSourceFile.fileName);
               if (ext === ".ts" /* Ts */ || ext === ".js" /* Js */ || ext === ".tsx" /* Tsx */ || ext === ".jsx" /* Jsx */) {
                 const scope = currentSourceFile.packageJsonScope;
                 const targetExt = ext === ".ts" /* Ts */ ? ".mts" /* Mts */ : ext === ".js" /* Js */ ? ".mjs" /* Mjs */ : void 0;
@@ -46557,14 +46711,14 @@ function createTypeChecker(host) {
                       void 0,
                       Diagnostics.To_convert_this_file_to_an_ECMAScript_module_change_its_file_extension_to_0_or_add_the_field_type_Colon_module_to_1,
                       targetExt,
-                      combinePaths(scope.packageDirectory, "package.json")
+                      combinePaths2(scope.packageDirectory, "package.json")
                     );
                   } else {
                     diagnosticDetails = chainDiagnosticMessages(
                       /*details*/
                       void 0,
                       Diagnostics.To_convert_this_file_to_an_ECMAScript_module_add_the_field_type_Colon_module_to_0,
-                      combinePaths(scope.packageDirectory, "package.json")
+                      combinePaths2(scope.packageDirectory, "package.json")
                     );
                   }
                 } else {
@@ -109567,10 +109721,11 @@ function getOutputExtension(fileName, options) {
   return fileExtensionIs(fileName, ".json" /* Json */) ? ".json" /* Json */ : options.jsx === 1 /* Preserve */ && fileExtensionIsOneOf(fileName, [".jsx" /* Jsx */, ".tsx" /* Tsx */]) ? ".jsx" /* Jsx */ : fileExtensionIsOneOf(fileName, [".mts" /* Mts */, ".mjs" /* Mjs */]) ? ".mjs" /* Mjs */ : fileExtensionIsOneOf(fileName, [".cts" /* Cts */, ".cjs" /* Cjs */]) ? ".cjs" /* Cjs */ : ".js" /* Js */;
 }
 function getOutputPathWithoutChangingExt(inputFileName, configFile, ignoreCase, outputDir, getCommonSourceDirectory2) {
-  return outputDir ? resolvePath(
-    outputDir,
-    getRelativePathFromDirectory(getCommonSourceDirectory2 ? getCommonSourceDirectory2() : getCommonSourceDirectoryOfConfig(configFile, ignoreCase), inputFileName, ignoreCase)
-  ) : inputFileName;
+  if (outputDir) {
+    const commonDir = getCommonSourceDirectory2 ? getCommonSourceDirectory2() : getCommonSourceDirectoryOfConfig(configFile, ignoreCase);
+    return `${outputDir}${directorySeparator}${inputFileName.slice(commonDir.length)}`;
+  }
+  return inputFileName;
 }
 function getOutputDeclarationFileName(inputFileName, configFile, ignoreCase, getCommonSourceDirectory2) {
   return changeExtension(
@@ -122954,6 +123109,11 @@ function createWatchProgram(host) {
   if (configFileName) {
     configFileWatcher = watchFile2(configFileName, scheduleProgramReload, 2e3 /* High */, watchOptions, WatchType.ConfigFile);
   }
+  let pnpFileWatcher;
+  const pnpApiPath = getPnpApiPath(__filename);
+  if (pnpApiPath) {
+    pnpFileWatcher = watchFile2(pnpApiPath, scheduleResolutionReload, 2e3 /* High */, watchOptions, WatchType.ConfigFile);
+  }
   const compilerHost = createCompilerHostFromProgramHost(host, () => compilerOptions, directoryStructureHost);
   setGetSourceFileAsHashVersioned(compilerHost);
   const getNewSourceFile = compilerHost.getSourceFile;
@@ -123017,6 +123177,10 @@ function createWatchProgram(host) {
       configFileWatcher.close();
       configFileWatcher = void 0;
     }
+    if (pnpFileWatcher) {
+      pnpFileWatcher.close();
+      pnpFileWatcher = void 0;
+    }
     extendedConfigCache == null ? void 0 : extendedConfigCache.clear();
     extendedConfigCache = void 0;
     if (sharedExtendedConfigFileWatchers) {
@@ -123052,7 +123216,7 @@ function createWatchProgram(host) {
   function getCurrentProgram() {
     return builderProgram && builderProgram.getProgramOrUndefined();
   }
-  function synchronizeProgram() {
+  function synchronizeProgram(forceAllFilesAsInvalidated = false) {
     writeLog(`Synchronizing program`);
     Debug.assert(compilerOptions);
     Debug.assert(rootFileNames);
@@ -123064,7 +123228,7 @@ function createWatchProgram(host) {
         resolutionCache.onChangesAffectModuleResolution();
       }
     }
-    const { hasInvalidatedResolutions, hasInvalidatedLibResolutions } = resolutionCache.createHasInvalidatedResolutions(customHasInvalidatedResolutions, customHasInvalidLibResolutions);
+    const { hasInvalidatedResolutions, hasInvalidatedLibResolutions } = resolutionCache.createHasInvalidatedResolutions(forceAllFilesAsInvalidated ? returnTrue : customHasInvalidatedResolutions, customHasInvalidLibResolutions);
     const {
       originalReadFile,
       originalFileExists,
@@ -123272,13 +123436,19 @@ function createWatchProgram(host) {
     updateLevel = 2 /* Full */;
     scheduleProgramUpdate();
   }
+  function scheduleResolutionReload() {
+    writeLog("Clearing resolutions");
+    resolutionCache.clear();
+    updateLevel = 3 /* Resolutions */;
+    scheduleProgramUpdate();
+  }
   function updateProgramWithWatchStatus() {
     timerToUpdateProgram = void 0;
     reportFileChangeDetectedOnCreateProgram = true;
     updateProgram();
   }
   function updateProgram() {
-    var _a, _b, _c, _d;
+    var _a, _b, _c, _d, _e;
     switch (updateLevel) {
       case 1 /* RootNamesAndUpdate */:
         (_a = perfLogger) == null ? void 0 : _a.logStartUpdateProgram("PartialConfigReload");
@@ -123288,12 +123458,19 @@ function createWatchProgram(host) {
         (_b = perfLogger) == null ? void 0 : _b.logStartUpdateProgram("FullConfigReload");
         reloadConfigFile();
         break;
+      case 3 /* Resolutions */:
+        (_c = perfLogger) == null ? void 0 : _c.logStartUpdateProgram("SynchronizeProgramWithResolutions");
+        synchronizeProgram(
+          /*forceAllFilesAsInvalidated*/
+          true
+        );
+        break;
       default:
-        (_c = perfLogger) == null ? void 0 : _c.logStartUpdateProgram("SynchronizeProgram");
+        (_d = perfLogger) == null ? void 0 : _d.logStartUpdateProgram("SynchronizeProgram");
         synchronizeProgram();
         break;
     }
-    (_d = perfLogger) == null ? void 0 : _d.logStopUpdateProgram("Done");
+    (_e = perfLogger) == null ? void 0 : _e.logStopUpdateProgram("Done");
     return getCurrentBuilderProgram();
   }
   function reloadFileNamesFromConfigFile() {
diff --git a/lib/tsserver.js b/lib/tsserver.js
index ee2ef8255..9c3cc348d 100644
semver exclusivity >=5.3.0
--- a/lib/tsserver.js
+++ b/lib/tsserver.js
@@ -6367,6 +6367,9 @@ var init_sys = __esm({
           return Buffer2.from && Buffer2.from !== Int8Array.from ? Buffer2.from(input, encoding) : new Buffer2(input, encoding);
         }
         function isFileSystemCaseSensitive() {
+          if (typeof process.versions.pnp !== `undefined`) {
+            return true;
+          }
           if (platform === "win32" || platform === "win64") {
             return false;
           }
@@ -6750,11 +6753,17 @@ function getAnyExtensionFromPath(path, extensions, ignoreCase) {
   return "";
 }
 function pathComponents(path, rootLength) {
+  const cached = pathComponentsCache.get(path);
+  if (cached) {
+    return cached.slice();
+  }
   const root = path.substring(0, rootLength);
   const rest = path.substring(rootLength).split(directorySeparator);
   if (rest.length && !lastOrUndefined(rest))
     rest.pop();
-  return [root, ...rest];
+  const res = [root, ...rest];
+  pathComponentsCache.set(path, res);
+  return res;
 }
 function getPathComponents(path, currentDirectory = "") {
   path = combinePaths(currentDirectory, path);
@@ -7007,7 +7016,7 @@ function forEachAncestorDirectory(directory, callback) {
 function isNodeModulesDirectory(dirPath) {
   return endsWith(dirPath, "/node_modules");
 }
-var directorySeparator, altDirectorySeparator, urlSchemeSeparator, backslashRegExp, relativePathSegmentRegExp;
+var directorySeparator, altDirectorySeparator, urlSchemeSeparator, backslashRegExp, pathComponentsCache, relativePathSegmentRegExp;
 var init_path = __esm({
   "src/compiler/path.ts"() {
     "use strict";
@@ -7016,6 +7025,7 @@ var init_path = __esm({
     altDirectorySeparator = "\\";
     urlSchemeSeparator = "://";
     backslashRegExp = /\\/g;
+    pathComponentsCache = /* @__PURE__ */ new Map();
     relativePathSegmentRegExp = /(?:\/\/)|(?:^|\/)\.\.?(?:$|\/)/;
   }
 });
@@ -39253,6 +39263,73 @@ var init_commandLineParser = __esm({
   }
 });

+// src/compiler/pnp.ts
+function getPnpApi(path) {
+  if (typeof process.versions.pnp === "undefined") {
+    return;
+  }
+  const { findPnpApi } = require("module");
+  if (findPnpApi) {
+    return findPnpApi(`${path}/`);
+  }
+}
+function getPnpApiPath(path) {
+  var _a;
+  return (_a = getPnpApi(path)) == null ? void 0 : _a.resolveRequest(
+    "pnpapi",
+    /*issuer*/
+    null
+  );
+}
+function getPnpTypeRoots(currentDirectory) {
+  const pnpApi = getPnpApi(currentDirectory);
+  if (!pnpApi) {
+    return [];
+  }
+  currentDirectory = resolvePath(currentDirectory);
+  const currentPackage = pnpApi.findPackageLocator(`${currentDirectory}/`);
+  if (!currentPackage) {
+    return [];
+  }
+  const { packageDependencies } = pnpApi.getPackageInformation(currentPackage);
+  const typeRoots = [];
+  for (const [name, referencish] of Array.from(packageDependencies.entries())) {
+    if (name.startsWith(`@types/`) && referencish !== null) {
+      const dependencyLocator = pnpApi.getLocator(name, referencish);
+      const { packageLocation } = pnpApi.getPackageInformation(dependencyLocator);
+      typeRoots.push(getDirectoryPath(packageLocation));
+    }
+  }
+  return typeRoots;
+}
+function isImportablePathPnp(fromPath, toPath3) {
+  const pnpApi = getPnpApi(fromPath);
+  const fromLocator = pnpApi.findPackageLocator(fromPath);
+  const toLocator = pnpApi.findPackageLocator(toPath3);
+  if (toLocator === null) {
+    return false;
+  }
+  const fromInfo = pnpApi.getPackageInformation(fromLocator);
+  const toReference = fromInfo.packageDependencies.get(toLocator.name);
+  if (toReference) {
+    return toReference === toLocator.reference;
+  }
+  for (const reference of fromInfo.packageDependencies.values()) {
+    if (Array.isArray(reference)) {
+      if (reference[0] === toLocator.name && reference[1] === toLocator.reference) {
+        return true;
+      }
+    }
+  }
+  return false;
+}
+var init_pnp = __esm({
+  "src/compiler/pnp.ts"() {
+    "use strict";
+    init_path();
+  }
+});
+
 // src/compiler/moduleNameResolver.ts
 function trace(host, message, ...args) {
   host.trace(formatMessage(message, ...args));
@@ -39491,7 +39568,7 @@ function getEffectiveTypeRoots(options, host) {
     return getDefaultTypeRoots(currentDirectory);
   }
 }
-function getDefaultTypeRoots(currentDirectory) {
+function getNodeModulesTypeRoots(currentDirectory) {
   let typeRoots;
   forEachAncestorDirectory(normalizePath(currentDirectory), (directory) => {
     const atTypes = combinePaths(directory, nodeModulesAtTypes);
@@ -39503,6 +39580,15 @@ function arePathsEqual(path1, path2, host) {
   const useCaseSensitiveFileNames2 = typeof host.useCaseSensitiveFileNames === "function" ? host.useCaseSensitiveFileNames() : host.useCaseSensitiveFileNames;
   return comparePaths(path1, path2, !useCaseSensitiveFileNames2) === 0 /* EqualTo */;
 }
+function getDefaultTypeRoots(currentDirectory) {
+  const nmTypes = getNodeModulesTypeRoots(currentDirectory);
+  const pnpTypes = getPnpTypeRoots(currentDirectory);
+  if (nmTypes == null ? void 0 : nmTypes.length) {
+    return [...nmTypes, ...pnpTypes];
+  } else if (pnpTypes.length) {
+    return pnpTypes;
+  }
+}
 function getOriginalAndResolvedFileName(fileName, host, traceEnabled) {
   const resolvedFileName = realPath(fileName, host, traceEnabled);
   const pathsAreEqual = arePathsEqual(fileName, resolvedFileName, host);
@@ -39755,6 +39841,21 @@ function getConditions(options, esmMode) {
 }
 function resolvePackageNameToPackageJson(packageName, containingDirectory, options, host, cache) {
   const moduleResolutionState = getTemporaryModuleResolutionState(cache == null ? void 0 : cache.getPackageJsonInfoCache(), host, options);
+  const pnpapi = getPnpApi(containingDirectory);
+  if (pnpapi) {
+    try {
+      const resolution = pnpapi.resolveToUnqualified(packageName, `${containingDirectory}/`, { considerBuiltins: false });
+      const candidate = normalizeSlashes(resolution).replace(/\/$/, "");
+      return getPackageJsonInfo(
+        candidate,
+        /*onlyRecordFailures*/
+        false,
+        moduleResolutionState
+      );
+    } catch {
+      return;
+    }
+  }
   return forEachAncestorDirectory(containingDirectory, (ancestorDirectory) => {
     if (getBaseFileName(ancestorDirectory) !== "node_modules") {
       const nodeModulesFolder = combinePaths(ancestorDirectory, "node_modules");
@@ -41539,7 +41640,15 @@ function loadModuleFromNearestNodeModulesDirectoryWorker(extensions, moduleName,
     return lookup(secondaryExtensions);
   }
   function lookup(extensions2) {
-    return forEachAncestorDirectory(normalizeSlashes(directory), (ancestorDirectory) => {
+    const issuer = normalizeSlashes(directory);
+    if (getPnpApi(issuer)) {
+      const resolutionFromCache = tryFindNonRelativeModuleNameInCache(cache, moduleName, mode, issuer, redirectedReference, state);
+      if (resolutionFromCache) {
+        return resolutionFromCache;
+      }
+      return toSearchResult(loadModuleFromImmediateNodeModulesDirectoryPnP(extensions2, moduleName, issuer, state, typesScopeOnly, cache, redirectedReference));
+    }
+    return forEachAncestorDirectory(issuer, (ancestorDirectory) => {
       if (getBaseFileName(ancestorDirectory) !== "node_modules") {
         const resolutionFromCache = tryFindNonRelativeModuleNameInCache(cache, moduleName, mode, ancestorDirectory, redirectedReference, state);
         if (resolutionFromCache) {
@@ -41574,11 +41683,40 @@ function loadModuleFromImmediateNodeModulesDirectory(extensions, moduleName, dir
     return loadModuleFromSpecificNodeModulesDirectory(4 /* Declaration */, mangleScopedPackageNameWithTrace(moduleName, state), nodeModulesAtTypes2, nodeModulesAtTypesExists, state, cache, redirectedReference);
   }
 }
+function loadModuleFromImmediateNodeModulesDirectoryPnP(extensions, moduleName, directory, state, typesScopeOnly, cache, redirectedReference) {
+  const issuer = normalizeSlashes(directory);
+  if (!typesScopeOnly) {
+    const packageResult = tryLoadModuleUsingPnpResolution(extensions, moduleName, issuer, state, cache, redirectedReference);
+    if (packageResult) {
+      return packageResult;
+    }
+  }
+  if (extensions & 4 /* Declaration */) {
+    return tryLoadModuleUsingPnpResolution(4 /* Declaration */, `@types/${mangleScopedPackageNameWithTrace(moduleName, state)}`, issuer, state, cache, redirectedReference);
+  }
+}
 function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference) {
-  var _a, _b;
   const candidate = normalizePath(combinePaths(nodeModulesDirectory, moduleName));
   const { packageName, rest } = parsePackageName(moduleName);
   const packageDirectory = combinePaths(nodeModulesDirectory, packageName);
+  return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory);
+}
+function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state, cache, redirectedReference) {
+  const candidate = normalizePath(combinePaths(packageDirectory, rest));
+  return loadModuleFromSpecificNodeModulesDirectoryImpl(
+    extensions,
+    /*nodeModulesDirectoryExists*/
+    true,
+    state,
+    cache,
+    redirectedReference,
+    candidate,
+    rest,
+    packageDirectory
+  );
+}
+function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory) {
+  var _a, _b;
   let rootPackageInfo;
   let packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
   if (rest !== "" && packageInfo && (!(state.features & 8 /* Exports */) || !hasProperty(((_a = rootPackageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state)) == null ? void 0 : _a.contents.packageJsonContent) ?? emptyArray, "exports"))) {
@@ -41877,11 +42015,30 @@ function traceIfEnabled(state, diagnostic, ...args) {
 function useCaseSensitiveFileNames(state) {
   return !state.host.useCaseSensitiveFileNames ? true : typeof state.host.useCaseSensitiveFileNames === "boolean" ? state.host.useCaseSensitiveFileNames : state.host.useCaseSensitiveFileNames();
 }
-var typeScriptVersion, nodeModulesAtTypes, NodeResolutionFeatures, nodeModulesPathPart, mangledScopedPackageSeparator;
+function loadPnpPackageResolution(packageName, containingDirectory) {
+  if (failedLookups.has(packageName)) {
+    return;
+  }
+  try {
+    const resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, `${containingDirectory}/`, { considerBuiltins: false });
+    return normalizeSlashes(resolution).replace(/\/$/, "");
+  } catch {
+    if (isBuiltin(packageName) || packageName.startsWith("@types/") && isBuiltin(packageName.slice(7)) || (packageName.startsWith("@typescript/") || packageName.startsWith("@types/typescript__"))) {
+      failedLookups.add(packageName);
+    }
+  }
+}
+function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference) {
+  const { packageName, rest } = parsePackageName(moduleName);
+  const packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+  return packageResolution ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state, cache, redirectedReference) : void 0;
+}
+var typeScriptVersion, nodeModulesAtTypes, NodeResolutionFeatures, nodeModulesPathPart, mangledScopedPackageSeparator, isBuiltin, failedLookups;
 var init_moduleNameResolver = __esm({
   "src/compiler/moduleNameResolver.ts"() {
     "use strict";
     init_ts2();
+    init_pnp();
     nodeModulesAtTypes = combinePaths("node_modules", "@types");
     NodeResolutionFeatures = /* @__PURE__ */ ((NodeResolutionFeatures2) => {
       NodeResolutionFeatures2[NodeResolutionFeatures2["None"] = 0] = "None";
@@ -41898,6 +42055,8 @@ var init_moduleNameResolver = __esm({
     })(NodeResolutionFeatures || {});
     nodeModulesPathPart = "/node_modules/";
     mangledScopedPackageSeparator = "__";
+    ({ isBuiltin } = require("module"));
+    failedLookups = /* @__PURE__ */ new Set();
   }
 });

@@ -45266,7 +45425,15 @@ function getAllModulePathsWorker(importingFileName, importedFileName, host) {
     /*preferSymlinks*/
     true,
     (path, isRedirect) => {
-      const isInNodeModules = pathContainsNodeModules(path);
+      let isInNodeModules = pathContainsNodeModules(path);
+      const pnpapi = getPnpApi(path);
+      if (!isInNodeModules && pnpapi) {
+        const fromLocator = pnpapi.findPackageLocator(importingFileName);
+        const toLocator = pnpapi.findPackageLocator(path);
+        if (fromLocator && toLocator && fromLocator !== toLocator) {
+          isInNodeModules = true;
+        }
+      }
       allFileNames.set(path, { path: getCanonicalFileName(path), isRedirect, isInNodeModules });
       importedFileFromNodeModules = importedFileFromNodeModules || isInNodeModules;
     }
@@ -45457,7 +45624,41 @@ function tryGetModuleNameAsNodeModule({ path, isRedirect }, { getCanonicalFileNa
   if (!host.fileExists || !host.readFile) {
     return void 0;
   }
-  const parts = getNodeModulePathParts(path);
+  let parts = getNodeModulePathParts(path);
+  let pnpPackageName;
+  const pnpApi = getPnpApi(path);
+  if (pnpApi) {
+    const fromLocator = pnpApi.findPackageLocator(importingSourceFile.fileName);
+    const toLocator = pnpApi.findPackageLocator(path);
+    if (fromLocator === toLocator) {
+      return void 0;
+    }
+    if (fromLocator && toLocator) {
+      const fromInfo = pnpApi.getPackageInformation(fromLocator);
+      if (toLocator.reference === fromInfo.packageDependencies.get(toLocator.name)) {
+        pnpPackageName = toLocator.name;
+      } else {
+        for (const [name, reference] of fromInfo.packageDependencies) {
+          if (Array.isArray(reference)) {
+            if (reference[0] === toLocator.name && reference[1] === toLocator.reference) {
+              pnpPackageName = name;
+              break;
+            }
+          }
+        }
+      }
+      if (!parts) {
+        const toInfo = pnpApi.getPackageInformation(toLocator);
+        parts = {
+          topLevelNodeModulesIndex: void 0,
+          topLevelPackageNameIndex: void 0,
+          // The last character from packageLocation is the trailing "/", we want to point to it
+          packageRootIndex: toInfo.packageLocation.length - 1,
+          fileNameIndex: path.lastIndexOf(`/`)
+        };
+      }
+    }
+  }
   if (!parts) {
     return void 0;
   }
@@ -45495,14 +45696,16 @@ function tryGetModuleNameAsNodeModule({ path, isRedirect }, { getCanonicalFileNa
   if (isRedirect && !isPackageRootPath) {
     return void 0;
   }
-  const globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-  const pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-  if (!(startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-    return void 0;
+  if (typeof process.versions.pnp === "undefined") {
+    const globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+    const pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+    if (!(startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+      return void 0;
+    }
   }
-  const nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-  const packageName = getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
-  return getEmitModuleResolutionKind(options) === 1 /* Classic */ && packageName === nodeModulesDirectoryName ? void 0 : packageName;
+  const nodeModulesDirectoryName = typeof pnpPackageName !== "undefined" ? pnpPackageName + moduleSpecifier.substring(parts.packageRootIndex) : moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
+  const packageNameFromPath = getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+  return getEmitModuleResolutionKind(options) === 1 /* Classic */ && packageNameFromPath === nodeModulesDirectoryName ? void 0 : packageNameFromPath;
   function tryDirectoryWithPackageJson(packageRootIndex) {
     var _a, _b;
     const packageRootPath = path.substring(0, packageRootIndex);
@@ -45515,9 +45718,9 @@ function tryGetModuleNameAsNodeModule({ path, isRedirect }, { getCanonicalFileNa
       const importMode = overrideMode || importingSourceFile.impliedNodeFormat;
       if (getResolvePackageJsonExports(options)) {
         const nodeModulesDirectoryName2 = packageRootPath.substring(parts.topLevelPackageNameIndex + 1);
-        const packageName2 = getPackageNameFromTypesPackageName(nodeModulesDirectoryName2);
+        const packageName = getPackageNameFromTypesPackageName(pnpPackageName ? pnpPackageName : nodeModulesDirectoryName2);
         const conditions = getConditions(options, importMode === 99 /* ESNext */);
-        const fromExports = packageJsonContent.exports ? tryGetModuleNameFromExports(options, path, packageRootPath, packageName2, packageJsonContent.exports, conditions) : void 0;
+        const fromExports = packageJsonContent.exports ? tryGetModuleNameFromExports(options, path, packageRootPath, packageName, packageJsonContent.exports, conditions) : void 0;
         if (fromExports) {
           const withJsExtension = !hasTSFileExtension(fromExports.moduleFileToTry) ? fromExports : { moduleFileToTry: removeFileExtension(fromExports.moduleFileToTry) + tryGetJSExtensionForFile(fromExports.moduleFileToTry, options) };
           return { ...withJsExtension, verbatimFromExports: true };
@@ -45669,6 +45872,7 @@ var init_moduleSpecifiers = __esm({
   "src/compiler/moduleSpecifiers.ts"() {
     "use strict";
     init_ts2();
+    init_pnp();
   }
 });

@@ -48156,7 +48360,7 @@ function createTypeChecker(host) {
     }
   }
   function getTargetofModuleDefault(moduleSymbol, node, dontResolveAlias) {
-    var _a;
+    var _a, _b;
     let exportDefaultSymbol;
     if (isShorthandAmbientModuleSymbol(moduleSymbol)) {
       exportDefaultSymbol = moduleSymbol;
@@ -48165,7 +48369,7 @@ function createTypeChecker(host) {
     }
     const file = (_a = moduleSymbol.declarations) == null ? void 0 : _a.find(isSourceFile);
     const specifier = getModuleSpecifierForImportOrExport(node);
-    if (!specifier) {
+    if (!specifier || moduleSymbol.flags === 512 && ((_b = moduleSymbol.exports) == null ? void 0 : _b.has("default"))) {
       return exportDefaultSymbol;
     }
     const hasDefaultOnly = isOnlyImportedAsDefault(specifier);
@@ -49038,15 +49242,15 @@ function createTypeChecker(host) {
             moduleReference
           );
         }
-        if (moduleResolutionKind === 3 /* Node16 */ || moduleResolutionKind === 99 /* NodeNext */) {
+        if (false) {
           const isSyncImport = currentSourceFile.impliedNodeFormat === 1 /* CommonJS */ && !findAncestor(location, isImportCall) || !!findAncestor(location, isImportEqualsDeclaration);
           const overrideHost = findAncestor(location, (l) => isImportTypeNode(l) || isExportDeclaration(l) || isImportDeclaration(l));
-          if (isSyncImport && sourceFile.impliedNodeFormat === 99 /* ESNext */ && !hasResolutionModeOverride(overrideHost)) {
+          if (isSyncImport && sourceFile.impliedNodeFormat === 99 /* ESNext */ && !hasResolutionModeOverride2(overrideHost)) {
             if (findAncestor(location, isImportEqualsDeclaration)) {
               error2(errorNode, Diagnostics.Module_0_cannot_be_imported_using_this_construct_The_specifier_only_resolves_to_an_ES_module_which_cannot_be_imported_with_require_Use_an_ECMAScript_import_instead, moduleReference);
             } else {
               let diagnosticDetails;
-              const ext = tryGetExtensionFromPath2(currentSourceFile.fileName);
+              const ext = tryGetExtensionFromPath3(currentSourceFile.fileName);
               if (ext === ".ts" /* Ts */ || ext === ".js" /* Js */ || ext === ".tsx" /* Tsx */ || ext === ".jsx" /* Jsx */) {
                 const scope = currentSourceFile.packageJsonScope;
                 const targetExt = ext === ".ts" /* Ts */ ? ".mts" /* Mts */ : ext === ".js" /* Js */ ? ".mjs" /* Mjs */ : void 0;
@@ -49057,14 +49261,14 @@ function createTypeChecker(host) {
                       void 0,
                       Diagnostics.To_convert_this_file_to_an_ECMAScript_module_change_its_file_extension_to_0_or_add_the_field_type_Colon_module_to_1,
                       targetExt,
-                      combinePaths(scope.packageDirectory, "package.json")
+                      combinePaths2(scope.packageDirectory, "package.json")
                     );
                   } else {
                     diagnosticDetails = chainDiagnosticMessages(
                       /*details*/
                       void 0,
                       Diagnostics.To_convert_this_file_to_an_ECMAScript_module_add_the_field_type_Colon_module_to_0,
-                      combinePaths(scope.packageDirectory, "package.json")
+                      combinePaths2(scope.packageDirectory, "package.json")
                     );
                   }
                 } else {
@@ -112563,10 +112767,11 @@ function getOutputExtension(fileName, options) {
   return fileExtensionIs(fileName, ".json" /* Json */) ? ".json" /* Json */ : options.jsx === 1 /* Preserve */ && fileExtensionIsOneOf(fileName, [".jsx" /* Jsx */, ".tsx" /* Tsx */]) ? ".jsx" /* Jsx */ : fileExtensionIsOneOf(fileName, [".mts" /* Mts */, ".mjs" /* Mjs */]) ? ".mjs" /* Mjs */ : fileExtensionIsOneOf(fileName, [".cts" /* Cts */, ".cjs" /* Cjs */]) ? ".cjs" /* Cjs */ : ".js" /* Js */;
 }
 function getOutputPathWithoutChangingExt(inputFileName, configFile, ignoreCase, outputDir, getCommonSourceDirectory2) {
-  return outputDir ? resolvePath(
-    outputDir,
-    getRelativePathFromDirectory(getCommonSourceDirectory2 ? getCommonSourceDirectory2() : getCommonSourceDirectoryOfConfig(configFile, ignoreCase), inputFileName, ignoreCase)
-  ) : inputFileName;
+  if (outputDir) {
+    const commonDir = getCommonSourceDirectory2 ? getCommonSourceDirectory2() : getCommonSourceDirectoryOfConfig(configFile, ignoreCase);
+    return `${outputDir}${directorySeparator}${inputFileName.slice(commonDir.length)}`;
+  }
+  return inputFileName;
 }
 function getOutputDeclarationFileName(inputFileName, configFile, ignoreCase, getCommonSourceDirectory2) {
   return changeExtension(
@@ -118483,6 +118688,7 @@ var init_watchUtilities = __esm({
       ProgramUpdateLevel2[ProgramUpdateLevel2["Update"] = 0] = "Update";
       ProgramUpdateLevel2[ProgramUpdateLevel2["RootNamesAndUpdate"] = 1] = "RootNamesAndUpdate";
       ProgramUpdateLevel2[ProgramUpdateLevel2["Full"] = 2] = "Full";
+      ProgramUpdateLevel2[ProgramUpdateLevel2["Resolutions"] = 3] = "Resolutions";
       return ProgramUpdateLevel2;
     })(ProgramUpdateLevel || {});
     WatchLogLevel = /* @__PURE__ */ ((WatchLogLevel2) => {
@@ -126139,6 +126345,11 @@ function createWatchProgram(host) {
   if (configFileName) {
     configFileWatcher = watchFile2(configFileName, scheduleProgramReload, 2e3 /* High */, watchOptions, WatchType.ConfigFile);
   }
+  let pnpFileWatcher;
+  const pnpApiPath = getPnpApiPath(__filename);
+  if (pnpApiPath) {
+    pnpFileWatcher = watchFile2(pnpApiPath, scheduleResolutionReload, 2e3 /* High */, watchOptions, WatchType.ConfigFile);
+  }
   const compilerHost = createCompilerHostFromProgramHost(host, () => compilerOptions, directoryStructureHost);
   setGetSourceFileAsHashVersioned(compilerHost);
   const getNewSourceFile = compilerHost.getSourceFile;
@@ -126202,6 +126413,10 @@ function createWatchProgram(host) {
       configFileWatcher.close();
       configFileWatcher = void 0;
     }
+    if (pnpFileWatcher) {
+      pnpFileWatcher.close();
+      pnpFileWatcher = void 0;
+    }
     extendedConfigCache == null ? void 0 : extendedConfigCache.clear();
     extendedConfigCache = void 0;
     if (sharedExtendedConfigFileWatchers) {
@@ -126237,7 +126452,7 @@ function createWatchProgram(host) {
   function getCurrentProgram() {
     return builderProgram && builderProgram.getProgramOrUndefined();
   }
-  function synchronizeProgram() {
+  function synchronizeProgram(forceAllFilesAsInvalidated = false) {
     writeLog(`Synchronizing program`);
     Debug.assert(compilerOptions);
     Debug.assert(rootFileNames);
@@ -126249,7 +126464,7 @@ function createWatchProgram(host) {
         resolutionCache.onChangesAffectModuleResolution();
       }
     }
-    const { hasInvalidatedResolutions, hasInvalidatedLibResolutions } = resolutionCache.createHasInvalidatedResolutions(customHasInvalidatedResolutions, customHasInvalidLibResolutions);
+    const { hasInvalidatedResolutions, hasInvalidatedLibResolutions } = resolutionCache.createHasInvalidatedResolutions(forceAllFilesAsInvalidated ? returnTrue : customHasInvalidatedResolutions, customHasInvalidLibResolutions);
     const {
       originalReadFile,
       originalFileExists,
@@ -126457,13 +126672,19 @@ function createWatchProgram(host) {
     updateLevel = 2 /* Full */;
     scheduleProgramUpdate();
   }
+  function scheduleResolutionReload() {
+    writeLog("Clearing resolutions");
+    resolutionCache.clear();
+    updateLevel = 3 /* Resolutions */;
+    scheduleProgramUpdate();
+  }
   function updateProgramWithWatchStatus() {
     timerToUpdateProgram = void 0;
     reportFileChangeDetectedOnCreateProgram = true;
     updateProgram();
   }
   function updateProgram() {
-    var _a, _b, _c, _d;
+    var _a, _b, _c, _d, _e;
     switch (updateLevel) {
       case 1 /* RootNamesAndUpdate */:
         (_a = perfLogger) == null ? void 0 : _a.logStartUpdateProgram("PartialConfigReload");
@@ -126473,12 +126694,19 @@ function createWatchProgram(host) {
         (_b = perfLogger) == null ? void 0 : _b.logStartUpdateProgram("FullConfigReload");
         reloadConfigFile();
         break;
+      case 3 /* Resolutions */:
+        (_c = perfLogger) == null ? void 0 : _c.logStartUpdateProgram("SynchronizeProgramWithResolutions");
+        synchronizeProgram(
+          /*forceAllFilesAsInvalidated*/
+          true
+        );
+        break;
       default:
-        (_c = perfLogger) == null ? void 0 : _c.logStartUpdateProgram("SynchronizeProgram");
+        (_d = perfLogger) == null ? void 0 : _d.logStartUpdateProgram("SynchronizeProgram");
         synchronizeProgram();
         break;
     }
-    (_d = perfLogger) == null ? void 0 : _d.logStopUpdateProgram("Done");
+    (_e = perfLogger) == null ? void 0 : _e.logStopUpdateProgram("Done");
     return getCurrentBuilderProgram();
   }
   function reloadFileNamesFromConfigFile() {
@@ -126766,6 +126994,7 @@ var init_watchPublic = __esm({
   "src/compiler/watchPublic.ts"() {
     "use strict";
     init_ts2();
+    init_pnp();
   }
 });

@@ -132076,7 +132305,14 @@ function createPackageJsonImportFilter(fromFile, preferences, host) {
     return false;
   }
   function getNodeModulesPackageNameFromFileName(importedFileName, moduleSpecifierResolutionHost) {
-    if (!importedFileName.includes("node_modules")) {
+    const pnpapi = getPnpApi(importedFileName);
+    if (pnpapi) {
+      const fromLocator = pnpapi.findPackageLocator(fromFile.fileName);
+      const toLocator = pnpapi.findPackageLocator(importedFileName);
+      if (!(fromLocator && toLocator)) {
+        return void 0;
+      }
+    } else if (!importedFileName.includes("node_modules")) {
       return void 0;
     }
     const specifier = ts_moduleSpecifiers_exports.getNodeModulesPackageName(
@@ -132372,6 +132608,7 @@ var scanner, SemanticMeaning, tripleSlashDirectivePrefixRegex, typeKeywords, Quo
 var init_utilities4 = __esm({
   "src/services/utilities.ts"() {
     "use strict";
+    init_pnp();
     init_ts4();
     scanner = createScanner(
       99 /* Latest */,
@@ -132650,6 +132887,9 @@ function isImportableFile(program, from, to, preferences, packageJsonFilter, mod
   return hasImportablePath;
 }
 function isImportablePath(fromPath, toPath3, getCanonicalFileName, globalCachePath) {
+  if (getPnpApi(fromPath)) {
+    return isImportablePathPnp(fromPath, toPath3);
+  }
   const toNodeModules = forEachAncestorDirectory(toPath3, (ancestor) => getBaseFileName(ancestor) === "node_modules" ? ancestor : void 0);
   const toNodeModulesParent = toNodeModules && getDirectoryPath(getCanonicalFileName(toNodeModules));
   return toNodeModulesParent === void 0 || startsWith(getCanonicalFileName(fromPath), toNodeModulesParent) || !!globalCachePath && startsWith(getCanonicalFileName(globalCachePath), toNodeModulesParent);
@@ -132833,6 +133073,7 @@ var ImportKind, ExportKind;
 var init_exportInfoMap = __esm({
   "src/services/exportInfoMap.ts"() {
     "use strict";
+    init_pnp();
     init_ts4();
     ImportKind = /* @__PURE__ */ ((ImportKind2) => {
       ImportKind2[ImportKind2["Named"] = 0] = "Named";
@@ -160665,7 +160906,31 @@ function getCompletionEntriesForNonRelativeModules(fragment, scriptPath, mode, c
           );
         }
       };
-      if (fragmentDirectory && getResolvePackageJsonExports(compilerOptions)) {
+      const checkExports = (packageFile, packageDirectory, fragmentSubpath) => {
+        const packageJson = readJson(packageFile, host);
+        const exports = packageJson.exports;
+        if (exports) {
+          if (typeof exports !== "object" || exports === null) {
+            return true;
+          }
+          const keys = getOwnKeys(exports);
+          const conditions = getConditions(compilerOptions, mode === 99 /* ESNext */);
+          addCompletionEntriesFromPathsOrExports(
+            result,
+            fragmentSubpath,
+            packageDirectory,
+            extensionOptions,
+            host,
+            keys,
+            (key) => singleElementArray(getPatternFromFirstMatchingCondition(exports[key], conditions)),
+            comparePatternKeys
+          );
+          return true;
+        }
+        return false;
+      };
+      const shouldCheckExports = fragmentDirectory && getResolvePackageJsonExports(compilerOptions);
+      if (shouldCheckExports) {
         const nodeModulesDirectoryLookup = ancestorLookup;
         ancestorLookup = (ancestor) => {
           const components = getPathComponents(fragment);
@@ -160684,32 +160949,52 @@ function getCompletionEntriesForNonRelativeModules(fragment, scriptPath, mode, c
           const packageDirectory = combinePaths(ancestor, "node_modules", packagePath);
           const packageFile = combinePaths(packageDirectory, "package.json");
           if (tryFileExists(host, packageFile)) {
-            const packageJson = readJson(packageFile, host);
-            const exports = packageJson.exports;
-            if (exports) {
-              if (typeof exports !== "object" || exports === null) {
-                return;
+            const fragmentSubpath = components.join("/") + (components.length && hasTrailingDirectorySeparator(fragment) ? "/" : "");
+            if (checkExports(packageFile, packageDirectory, fragmentSubpath)) {
+              return;
+            }
+          }
+          return nodeModulesDirectoryLookup(ancestor);
+        };
+      }
+      const pnpApi = getPnpApi(scriptPath);
+      if (pnpApi) {
+        const pathRegExp = /^(?![a-zA-Z]:[\\/]|\\\\|\.{0,2}(?:\/|$))((?:@[^/]+\/)?[^/]+)\/*(.*|)$/;
+        const dependencyNameMatch = fragment.match(pathRegExp);
+        if (dependencyNameMatch) {
+          const [, dependencyName, subPath] = dependencyNameMatch;
+          let unqualified;
+          try {
+            unqualified = pnpApi.resolveToUnqualified(dependencyName, scriptPath, { considerBuiltins: false });
+          } catch {
+          }
+          if (unqualified) {
+            const packageDirectory = normalizePath(unqualified);
+            let shouldGetCompletions = true;
+            if (shouldCheckExports) {
+              const packageFile = combinePaths(packageDirectory, "package.json");
+              if (tryFileExists(host, packageFile) && checkExports(packageFile, packageDirectory, subPath)) {
+                shouldGetCompletions = false;
               }
-              const keys = getOwnKeys(exports);
-              const fragmentSubpath = components.join("/") + (components.length && hasTrailingDirectorySeparator(fragment) ? "/" : "");
-              const conditions = getConditions(compilerOptions, mode === 99 /* ESNext */);
-              addCompletionEntriesFromPathsOrExports(
-                result,
-                fragmentSubpath,
+            }
+            if (shouldGetCompletions) {
+              getCompletionEntriesForDirectoryFragment(
+                subPath,
                 packageDirectory,
                 extensionOptions,
                 host,
-                keys,
-                (key) => singleElementArray(getPatternFromFirstMatchingCondition(exports[key], conditions)),
-                comparePatternKeys
+                /*moduleSpecifierIsRelative*/
+                false,
+                /*exclude*/
+                void 0,
+                result
               );
-              return;
             }
           }
-          return nodeModulesDirectoryLookup(ancestor);
-        };
+        }
+      } else {
+        forEachAncestorDirectory(scriptPath, ancestorLookup);
       }
-      forEachAncestorDirectory(scriptPath, ancestorLookup);
     }
   }
   return arrayFrom(result.values());
@@ -160840,9 +161125,15 @@ function getCompletionEntriesFromTypings(host, options, scriptPath, fragmentDire
   for (const root of typeRoots) {
     getCompletionEntriesFromDirectories(root);
   }
-  for (const packageJson of findPackageJsons(scriptPath, host)) {
-    const typesDir = combinePaths(getDirectoryPath(packageJson), "node_modules/@types");
-    getCompletionEntriesFromDirectories(typesDir);
+  if (getPnpApi(scriptPath)) {
+    for (const root of getPnpTypeRoots(scriptPath)) {
+      getCompletionEntriesFromDirectories(root);
+    }
+  } else {
+    for (const packageJson of findPackageJsons(scriptPath, host)) {
+      const typesDir = combinePaths(getDirectoryPath(packageJson), "node_modules/@types");
+      getCompletionEntriesFromDirectories(typesDir);
+    }
   }
   return result;
   function getCompletionEntriesFromDirectories(directory) {
@@ -160925,6 +161216,7 @@ var kindPrecedence, tripleSlashDirectiveFragmentRegex, nodeModulesDependencyKeys
 var init_stringCompletions = __esm({
   "src/services/stringCompletions.ts"() {
     "use strict";
+    init_pnp();
     init_ts4();
     init_ts_Completions();
     kindPrecedence = {
@@ -182393,6 +182685,7 @@ var TypingsCache = class {
 };

 // src/server/project.ts
+init_pnp();
 var ProjectKind = /* @__PURE__ */ ((ProjectKind2) => {
   ProjectKind2[ProjectKind2["Inferred"] = 0] = "Inferred";
   ProjectKind2[ProjectKind2["Configured"] = 1] = "Configured";
@@ -184541,6 +184834,29 @@ var ConfiguredProject2 = class extends Project3 {
     return this.projectReferences;
   }
   updateReferences(refs) {
+    if (typeof process.versions.pnp !== `undefined`) {
+      const basePath = this.getCurrentDirectory();
+      const getPnpPath = (path) => {
+        try {
+          const pnpApi = getPnpApi(`${path}/`);
+          if (!pnpApi) {
+            return path;
+          }
+          const targetLocator = pnpApi.findPackageLocator(`${path}/`);
+          const { packageLocation } = pnpApi.getPackageInformation(targetLocator);
+          const request = combinePaths(targetLocator.name, getRelativePathFromDirectory(
+            packageLocation,
+            path,
+            /*ignoreCase*/
+            false
+          ));
+          return pnpApi.resolveToUnqualified(request, `${basePath}/`);
+        } catch {
+          return path;
+        }
+      };
+      refs = refs == null ? void 0 : refs.map((r) => ({ ...r, path: getPnpPath(r.path) }));
+    }
     this.projectReferences = refs;
     this.potentialProjectReferences = void 0;
   }
@@ -184717,6 +185033,7 @@ function isBackgroundProject(project) {
 }

 // src/server/editorServices.ts
+init_pnp();
 var maxProgramSizeForNonTsFiles = 20 * 1024 * 1024;
 var maxFileSize = 4 * 1024 * 1024;
 var ProjectsUpdatedInBackgroundEvent = "projectsUpdatedInBackground";
@@ -185211,6 +185528,7 @@ var _ProjectService = class _ProjectService {
       log,
       getDetailWatchInfo
     );
+    this.pnpWatcher = this.watchPnpFile();
     (_a = opts.incrementalVerifier) == null ? void 0 : _a.call(opts, this);
   }
   toPath(fileName) {
@@ -187023,7 +187341,7 @@ Dynamic files must always be opened with service's current directory or service
     this.performanceEventHandler = performanceEventHandler;
   }
   setHostConfiguration(args) {
-    var _a;
+    var _a, _b;
     if (args.file) {
       const info = this.getScriptInfoForNormalizedPath(toNormalizedPath(args.file));
       if (info) {
@@ -187066,7 +187384,8 @@ Dynamic files must always be opened with service's current directory or service
       }
       if (args.watchOptions) {
         this.hostConfiguration.watchOptions = (_a = convertWatchOptions(args.watchOptions)) == null ? void 0 : _a.watchOptions;
-        this.logger.info(`Host watch options changed to ${JSON.stringify(this.hostConfiguration.watchOptions)}, it will be take effect for next watches.`);
+        (_b = this.pnpWatcher) == null ? void 0 : _b.close();
+        this.watchPnpFile();
       }
     }
   }
@@ -188013,6 +188332,29 @@ Dynamic files must always be opened with service's current directory or service
     });
   }
   /** @internal */
+  watchPnpFile() {
+    const pnpApiPath = getPnpApiPath(__filename);
+    if (!pnpApiPath) {
+      return;
+    }
+    return this.watchFactory.watchFile(
+      pnpApiPath,
+      () => {
+        this.forEachProject((project) => {
+          for (const info of project.getScriptInfos()) {
+            project.resolutionCache.invalidateResolutionOfFile(info.path);
+          }
+          project.markAsDirty();
+          updateProjectIfDirty(project);
+        });
+        this.delayEnsureProjectForOpenFiles();
+      },
+      250 /* Low */,
+      this.hostConfiguration.watchOptions,
+      WatchType.ConfigFile
+    );
+  }
+  /** @internal */
   watchPackageJsonFile(path) {
     const watchers = this.packageJsonFilesMap || (this.packageJsonFilesMap = /* @__PURE__ */ new Map());
     if (!watchers.has(path)) {
@@ -192413,6 +192755,7 @@ __export(ts_server_exports4, {
 init_ts_server();

 // src/tsserver/nodeServer.ts
+init_pnp();
 function parseLoggingEnvironmentString(logEnvStr) {
   if (!logEnvStr) {
     return {};
@@ -192606,6 +192949,10 @@ function initializeNodeSystem() {
         }
         try {
           const args = [combinePaths(libDirectory, "watchGuard.js"), path];
+          const pnpApiPath = getPnpApiPath(__filename);
+          if (pnpApiPath) {
+            args.unshift("-r", pnpApiPath);
+          }
           if (logger.hasLevel(3 /* verbose */)) {
             logger.info(`Starting ${process.execPath} with args:${stringifyIndented(args)}`);
           }
@@ -192811,6 +193158,10 @@ function startNodeSession(options, logger, cancellationToken) {
           break;
         }
       }
+      const pnpApiPath = getPnpApiPath(__filename);
+      if (pnpApiPath) {
+        execArgv.unshift("-r", pnpApiPath);
+      }
       const typingsInstaller = combinePaths(getDirectoryPath(sys.getExecutingFilePath()), "typingsInstaller.js");
       this.installer = childProcess.fork(typingsInstaller, args, { execArgv });
       this.installer.on("message", (m) => this.handleMessage(m));
diff --git a/lib/typescript.d.ts b/lib/typescript.d.ts
index 5ee1d5258..0fbd109c0 100644
semver exclusivity >=5.3.0
--- a/lib/typescript.d.ts
+++ b/lib/typescript.d.ts
@@ -9853,6 +9853,8 @@ declare namespace ts {
          *  - Updating the program
          */
         Full = 2,
+        /** Reload the resolutions */
+        Resolutions = 3,
     }
     function findConfigFile(searchPath: string, fileExists: (fileName: string) => boolean, configName?: string): string | undefined;
     function resolveTripleslashReference(moduleName: string, containingFile: string): string;
diff --git a/lib/typescript.js b/lib/typescript.js
index 51e7e9620..891dabf86 100644
semver exclusivity >=5.3.0
--- a/lib/typescript.js
+++ b/lib/typescript.js
@@ -6367,6 +6367,9 @@ ${lanes.join("\n")}
             return Buffer2.from && Buffer2.from !== Int8Array.from ? Buffer2.from(input, encoding) : new Buffer2(input, encoding);
           }
           function isFileSystemCaseSensitive() {
+            if (typeof process.versions.pnp !== `undefined`) {
+              return true;
+            }
             if (platform === "win32" || platform === "win64") {
               return false;
             }
@@ -6750,11 +6753,17 @@ ${lanes.join("\n")}
     return "";
   }
   function pathComponents(path, rootLength) {
+    const cached = pathComponentsCache.get(path);
+    if (cached) {
+      return cached.slice();
+    }
     const root = path.substring(0, rootLength);
     const rest = path.substring(rootLength).split(directorySeparator);
     if (rest.length && !lastOrUndefined(rest))
       rest.pop();
-    return [root, ...rest];
+    const res = [root, ...rest];
+    pathComponentsCache.set(path, res);
+    return res;
   }
   function getPathComponents(path, currentDirectory = "") {
     path = combinePaths(currentDirectory, path);
@@ -7007,7 +7016,7 @@ ${lanes.join("\n")}
   function isNodeModulesDirectory(dirPath) {
     return endsWith(dirPath, "/node_modules");
   }
-  var directorySeparator, altDirectorySeparator, urlSchemeSeparator, backslashRegExp, relativePathSegmentRegExp;
+  var directorySeparator, altDirectorySeparator, urlSchemeSeparator, backslashRegExp, pathComponentsCache, relativePathSegmentRegExp;
   var init_path = __esm({
     "src/compiler/path.ts"() {
       "use strict";
@@ -7016,6 +7025,7 @@ ${lanes.join("\n")}
       altDirectorySeparator = "\\";
       urlSchemeSeparator = "://";
       backslashRegExp = /\\/g;
+      pathComponentsCache = /* @__PURE__ */ new Map();
       relativePathSegmentRegExp = /(?:\/\/)|(?:^|\/)\.\.?(?:$|\/)/;
     }
   });
@@ -39253,6 +39263,73 @@ ${lanes.join("\n")}
     }
   });

+  // src/compiler/pnp.ts
+  function getPnpApi(path) {
+    if (typeof process.versions.pnp === "undefined") {
+      return;
+    }
+    const { findPnpApi } =   require("module");
+    if (findPnpApi) {
+      return findPnpApi(`${path}/`);
+    }
+  }
+  function getPnpApiPath(path) {
+    var _a;
+    return (_a = getPnpApi(path)) == null ? void 0 : _a.resolveRequest(
+      "pnpapi",
+      /*issuer*/
+      null
+    );
+  }
+  function getPnpTypeRoots(currentDirectory) {
+    const pnpApi = getPnpApi(currentDirectory);
+    if (!pnpApi) {
+      return [];
+    }
+    currentDirectory = resolvePath(currentDirectory);
+    const currentPackage = pnpApi.findPackageLocator(`${currentDirectory}/`);
+    if (!currentPackage) {
+      return [];
+    }
+    const { packageDependencies } = pnpApi.getPackageInformation(currentPackage);
+    const typeRoots = [];
+    for (const [name, referencish] of Array.from(packageDependencies.entries())) {
+      if (name.startsWith(`@types/`) && referencish !== null) {
+        const dependencyLocator = pnpApi.getLocator(name, referencish);
+        const { packageLocation } = pnpApi.getPackageInformation(dependencyLocator);
+        typeRoots.push(getDirectoryPath(packageLocation));
+      }
+    }
+    return typeRoots;
+  }
+  function isImportablePathPnp(fromPath, toPath3) {
+    const pnpApi = getPnpApi(fromPath);
+    const fromLocator = pnpApi.findPackageLocator(fromPath);
+    const toLocator = pnpApi.findPackageLocator(toPath3);
+    if (toLocator === null) {
+      return false;
+    }
+    const fromInfo = pnpApi.getPackageInformation(fromLocator);
+    const toReference = fromInfo.packageDependencies.get(toLocator.name);
+    if (toReference) {
+      return toReference === toLocator.reference;
+    }
+    for (const reference of fromInfo.packageDependencies.values()) {
+      if (Array.isArray(reference)) {
+        if (reference[0] === toLocator.name && reference[1] === toLocator.reference) {
+          return true;
+        }
+      }
+    }
+    return false;
+  }
+  var init_pnp = __esm({
+    "src/compiler/pnp.ts"() {
+      "use strict";
+      init_path();
+    }
+  });
+
   // src/compiler/moduleNameResolver.ts
   function trace(host, message, ...args) {
     host.trace(formatMessage(message, ...args));
@@ -39491,7 +39568,7 @@ ${lanes.join("\n")}
       return getDefaultTypeRoots(currentDirectory);
     }
   }
-  function getDefaultTypeRoots(currentDirectory) {
+  function getNodeModulesTypeRoots(currentDirectory) {
     let typeRoots;
     forEachAncestorDirectory(normalizePath(currentDirectory), (directory) => {
       const atTypes = combinePaths(directory, nodeModulesAtTypes);
@@ -39503,6 +39580,15 @@ ${lanes.join("\n")}
     const useCaseSensitiveFileNames2 = typeof host.useCaseSensitiveFileNames === "function" ? host.useCaseSensitiveFileNames() : host.useCaseSensitiveFileNames;
     return comparePaths(path1, path2, !useCaseSensitiveFileNames2) === 0 /* EqualTo */;
   }
+  function getDefaultTypeRoots(currentDirectory) {
+    const nmTypes = getNodeModulesTypeRoots(currentDirectory);
+    const pnpTypes = getPnpTypeRoots(currentDirectory);
+    if (nmTypes == null ? void 0 : nmTypes.length) {
+      return [...nmTypes, ...pnpTypes];
+    } else if (pnpTypes.length) {
+      return pnpTypes;
+    }
+  }
   function getOriginalAndResolvedFileName(fileName, host, traceEnabled) {
     const resolvedFileName = realPath(fileName, host, traceEnabled);
     const pathsAreEqual = arePathsEqual(fileName, resolvedFileName, host);
@@ -39755,6 +39841,21 @@ ${lanes.join("\n")}
   }
   function resolvePackageNameToPackageJson(packageName, containingDirectory, options, host, cache) {
     const moduleResolutionState = getTemporaryModuleResolutionState(cache == null ? void 0 : cache.getPackageJsonInfoCache(), host, options);
+    const pnpapi = getPnpApi(containingDirectory);
+    if (pnpapi) {
+      try {
+        const resolution = pnpapi.resolveToUnqualified(packageName, `${containingDirectory}/`, { considerBuiltins: false });
+        const candidate = normalizeSlashes(resolution).replace(/\/$/, "");
+        return getPackageJsonInfo(
+          candidate,
+          /*onlyRecordFailures*/
+          false,
+          moduleResolutionState
+        );
+      } catch {
+        return;
+      }
+    }
     return forEachAncestorDirectory(containingDirectory, (ancestorDirectory) => {
       if (getBaseFileName(ancestorDirectory) !== "node_modules") {
         const nodeModulesFolder = combinePaths(ancestorDirectory, "node_modules");
@@ -41539,7 +41640,15 @@ ${lanes.join("\n")}
       return lookup(secondaryExtensions);
     }
     function lookup(extensions2) {
-      return forEachAncestorDirectory(normalizeSlashes(directory), (ancestorDirectory) => {
+      const issuer = normalizeSlashes(directory);
+      if (getPnpApi(issuer)) {
+        const resolutionFromCache = tryFindNonRelativeModuleNameInCache(cache, moduleName, mode, issuer, redirectedReference, state);
+        if (resolutionFromCache) {
+          return resolutionFromCache;
+        }
+        return toSearchResult(loadModuleFromImmediateNodeModulesDirectoryPnP(extensions2, moduleName, issuer, state, typesScopeOnly, cache, redirectedReference));
+      }
+      return forEachAncestorDirectory(issuer, (ancestorDirectory) => {
         if (getBaseFileName(ancestorDirectory) !== "node_modules") {
           const resolutionFromCache = tryFindNonRelativeModuleNameInCache(cache, moduleName, mode, ancestorDirectory, redirectedReference, state);
           if (resolutionFromCache) {
@@ -41574,11 +41683,40 @@ ${lanes.join("\n")}
       return loadModuleFromSpecificNodeModulesDirectory(4 /* Declaration */, mangleScopedPackageNameWithTrace(moduleName, state), nodeModulesAtTypes2, nodeModulesAtTypesExists, state, cache, redirectedReference);
     }
   }
+  function loadModuleFromImmediateNodeModulesDirectoryPnP(extensions, moduleName, directory, state, typesScopeOnly, cache, redirectedReference) {
+    const issuer = normalizeSlashes(directory);
+    if (!typesScopeOnly) {
+      const packageResult = tryLoadModuleUsingPnpResolution(extensions, moduleName, issuer, state, cache, redirectedReference);
+      if (packageResult) {
+        return packageResult;
+      }
+    }
+    if (extensions & 4 /* Declaration */) {
+      return tryLoadModuleUsingPnpResolution(4 /* Declaration */, `@types/${mangleScopedPackageNameWithTrace(moduleName, state)}`, issuer, state, cache, redirectedReference);
+    }
+  }
   function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference) {
-    var _a, _b;
     const candidate = normalizePath(combinePaths(nodeModulesDirectory, moduleName));
     const { packageName, rest } = parsePackageName(moduleName);
     const packageDirectory = combinePaths(nodeModulesDirectory, packageName);
+    return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory);
+  }
+  function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state, cache, redirectedReference) {
+    const candidate = normalizePath(combinePaths(packageDirectory, rest));
+    return loadModuleFromSpecificNodeModulesDirectoryImpl(
+      extensions,
+      /*nodeModulesDirectoryExists*/
+      true,
+      state,
+      cache,
+      redirectedReference,
+      candidate,
+      rest,
+      packageDirectory
+    );
+  }
+  function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory) {
+    var _a, _b;
     let rootPackageInfo;
     let packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
     if (rest !== "" && packageInfo && (!(state.features & 8 /* Exports */) || !hasProperty(((_a = rootPackageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state)) == null ? void 0 : _a.contents.packageJsonContent) ?? emptyArray, "exports"))) {
@@ -41877,11 +42015,30 @@ ${lanes.join("\n")}
   function useCaseSensitiveFileNames(state) {
     return !state.host.useCaseSensitiveFileNames ? true : typeof state.host.useCaseSensitiveFileNames === "boolean" ? state.host.useCaseSensitiveFileNames : state.host.useCaseSensitiveFileNames();
   }
-  var typeScriptVersion, nodeModulesAtTypes, NodeResolutionFeatures, nodeModulesPathPart, mangledScopedPackageSeparator;
+  function loadPnpPackageResolution(packageName, containingDirectory) {
+    if (failedLookups.has(packageName)) {
+      return;
+    }
+    try {
+      const resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, `${containingDirectory}/`, { considerBuiltins: false });
+      return normalizeSlashes(resolution).replace(/\/$/, "");
+    } catch {
+      if (isBuiltin(packageName) || packageName.startsWith("@types/") && isBuiltin(packageName.slice(7)) || (packageName.startsWith("@typescript/") || packageName.startsWith("@types/typescript__"))) {
+        failedLookups.add(packageName);
+      }
+    }
+  }
+  function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference) {
+    const { packageName, rest } = parsePackageName(moduleName);
+    const packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+    return packageResolution ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state, cache, redirectedReference) : void 0;
+  }
+  var typeScriptVersion, nodeModulesAtTypes, NodeResolutionFeatures, nodeModulesPathPart, mangledScopedPackageSeparator, isBuiltin, failedLookups;
   var init_moduleNameResolver = __esm({
     "src/compiler/moduleNameResolver.ts"() {
       "use strict";
       init_ts2();
+      init_pnp();
       nodeModulesAtTypes = combinePaths("node_modules", "@types");
       NodeResolutionFeatures = /* @__PURE__ */ ((NodeResolutionFeatures2) => {
         NodeResolutionFeatures2[NodeResolutionFeatures2["None"] = 0] = "None";
@@ -41898,6 +42055,8 @@ ${lanes.join("\n")}
       })(NodeResolutionFeatures || {});
       nodeModulesPathPart = "/node_modules/";
       mangledScopedPackageSeparator = "__";
+      ({ isBuiltin } =   require("module"));
+      failedLookups = /* @__PURE__ */ new Set();
     }
   });

@@ -45266,7 +45425,15 @@ ${lanes.join("\n")}
       /*preferSymlinks*/
       true,
       (path, isRedirect) => {
-        const isInNodeModules = pathContainsNodeModules(path);
+        let isInNodeModules = pathContainsNodeModules(path);
+        const pnpapi = getPnpApi(path);
+        if (!isInNodeModules && pnpapi) {
+          const fromLocator = pnpapi.findPackageLocator(importingFileName);
+          const toLocator = pnpapi.findPackageLocator(path);
+          if (fromLocator && toLocator && fromLocator !== toLocator) {
+            isInNodeModules = true;
+          }
+        }
         allFileNames.set(path, { path: getCanonicalFileName(path), isRedirect, isInNodeModules });
         importedFileFromNodeModules = importedFileFromNodeModules || isInNodeModules;
       }
@@ -45457,7 +45624,41 @@ ${lanes.join("\n")}
     if (!host.fileExists || !host.readFile) {
       return void 0;
     }
-    const parts = getNodeModulePathParts(path);
+    let parts = getNodeModulePathParts(path);
+    let pnpPackageName;
+    const pnpApi = getPnpApi(path);
+    if (pnpApi) {
+      const fromLocator = pnpApi.findPackageLocator(importingSourceFile.fileName);
+      const toLocator = pnpApi.findPackageLocator(path);
+      if (fromLocator === toLocator) {
+        return void 0;
+      }
+      if (fromLocator && toLocator) {
+        const fromInfo = pnpApi.getPackageInformation(fromLocator);
+        if (toLocator.reference === fromInfo.packageDependencies.get(toLocator.name)) {
+          pnpPackageName = toLocator.name;
+        } else {
+          for (const [name, reference] of fromInfo.packageDependencies) {
+            if (Array.isArray(reference)) {
+              if (reference[0] === toLocator.name && reference[1] === toLocator.reference) {
+                pnpPackageName = name;
+                break;
+              }
+            }
+          }
+        }
+        if (!parts) {
+          const toInfo = pnpApi.getPackageInformation(toLocator);
+          parts = {
+            topLevelNodeModulesIndex: void 0,
+            topLevelPackageNameIndex: void 0,
+            // The last character from packageLocation is the trailing "/", we want to point to it
+            packageRootIndex: toInfo.packageLocation.length - 1,
+            fileNameIndex: path.lastIndexOf(`/`)
+          };
+        }
+      }
+    }
     if (!parts) {
       return void 0;
     }
@@ -45495,14 +45696,16 @@ ${lanes.join("\n")}
     if (isRedirect && !isPackageRootPath) {
       return void 0;
     }
-    const globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-    const pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-    if (!(startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-      return void 0;
+    if (typeof process.versions.pnp === "undefined") {
+      const globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+      const pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+      if (!(startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+        return void 0;
+      }
     }
-    const nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-    const packageName = getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
-    return getEmitModuleResolutionKind(options) === 1 /* Classic */ && packageName === nodeModulesDirectoryName ? void 0 : packageName;
+    const nodeModulesDirectoryName = typeof pnpPackageName !== "undefined" ? pnpPackageName + moduleSpecifier.substring(parts.packageRootIndex) : moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
+    const packageNameFromPath = getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+    return getEmitModuleResolutionKind(options) === 1 /* Classic */ && packageNameFromPath === nodeModulesDirectoryName ? void 0 : packageNameFromPath;
     function tryDirectoryWithPackageJson(packageRootIndex) {
       var _a, _b;
       const packageRootPath = path.substring(0, packageRootIndex);
@@ -45515,9 +45718,9 @@ ${lanes.join("\n")}
         const importMode = overrideMode || importingSourceFile.impliedNodeFormat;
         if (getResolvePackageJsonExports(options)) {
           const nodeModulesDirectoryName2 = packageRootPath.substring(parts.topLevelPackageNameIndex + 1);
-          const packageName2 = getPackageNameFromTypesPackageName(nodeModulesDirectoryName2);
+          const packageName = getPackageNameFromTypesPackageName(pnpPackageName ? pnpPackageName : nodeModulesDirectoryName2);
           const conditions = getConditions(options, importMode === 99 /* ESNext */);
-          const fromExports = packageJsonContent.exports ? tryGetModuleNameFromExports(options, path, packageRootPath, packageName2, packageJsonContent.exports, conditions) : void 0;
+          const fromExports = packageJsonContent.exports ? tryGetModuleNameFromExports(options, path, packageRootPath, packageName, packageJsonContent.exports, conditions) : void 0;
           if (fromExports) {
             const withJsExtension = !hasTSFileExtension(fromExports.moduleFileToTry) ? fromExports : { moduleFileToTry: removeFileExtension(fromExports.moduleFileToTry) + tryGetJSExtensionForFile(fromExports.moduleFileToTry, options) };
             return { ...withJsExtension, verbatimFromExports: true };
@@ -45669,6 +45872,7 @@ ${lanes.join("\n")}
     "src/compiler/moduleSpecifiers.ts"() {
       "use strict";
       init_ts2();
+      init_pnp();
     }
   });

@@ -48156,7 +48360,7 @@ ${lanes.join("\n")}
       }
     }
     function getTargetofModuleDefault(moduleSymbol, node, dontResolveAlias) {
-      var _a;
+      var _a, _b;
       let exportDefaultSymbol;
       if (isShorthandAmbientModuleSymbol(moduleSymbol)) {
         exportDefaultSymbol = moduleSymbol;
@@ -48165,7 +48369,7 @@ ${lanes.join("\n")}
       }
       const file = (_a = moduleSymbol.declarations) == null ? void 0 : _a.find(isSourceFile);
       const specifier = getModuleSpecifierForImportOrExport(node);
-      if (!specifier) {
+      if (!specifier || moduleSymbol.flags === 512 && ((_b = moduleSymbol.exports) == null ? void 0 : _b.has("default"))) {
         return exportDefaultSymbol;
       }
       const hasDefaultOnly = isOnlyImportedAsDefault(specifier);
@@ -49038,15 +49242,15 @@ ${lanes.join("\n")}
               moduleReference
             );
           }
-          if (moduleResolutionKind === 3 /* Node16 */ || moduleResolutionKind === 99 /* NodeNext */) {
+          if (false) {
             const isSyncImport = currentSourceFile.impliedNodeFormat === 1 /* CommonJS */ && !findAncestor(location, isImportCall) || !!findAncestor(location, isImportEqualsDeclaration);
             const overrideHost = findAncestor(location, (l) => isImportTypeNode(l) || isExportDeclaration(l) || isImportDeclaration(l));
-            if (isSyncImport && sourceFile.impliedNodeFormat === 99 /* ESNext */ && !hasResolutionModeOverride(overrideHost)) {
+            if (isSyncImport && sourceFile.impliedNodeFormat === 99 /* ESNext */ && !hasResolutionModeOverride2(overrideHost)) {
               if (findAncestor(location, isImportEqualsDeclaration)) {
                 error2(errorNode, Diagnostics.Module_0_cannot_be_imported_using_this_construct_The_specifier_only_resolves_to_an_ES_module_which_cannot_be_imported_with_require_Use_an_ECMAScript_import_instead, moduleReference);
               } else {
                 let diagnosticDetails;
-                const ext = tryGetExtensionFromPath2(currentSourceFile.fileName);
+                const ext = tryGetExtensionFromPath3(currentSourceFile.fileName);
                 if (ext === ".ts" /* Ts */ || ext === ".js" /* Js */ || ext === ".tsx" /* Tsx */ || ext === ".jsx" /* Jsx */) {
                   const scope = currentSourceFile.packageJsonScope;
                   const targetExt = ext === ".ts" /* Ts */ ? ".mts" /* Mts */ : ext === ".js" /* Js */ ? ".mjs" /* Mjs */ : void 0;
@@ -49057,14 +49261,14 @@ ${lanes.join("\n")}
                         void 0,
                         Diagnostics.To_convert_this_file_to_an_ECMAScript_module_change_its_file_extension_to_0_or_add_the_field_type_Colon_module_to_1,
                         targetExt,
-                        combinePaths(scope.packageDirectory, "package.json")
+                        combinePaths2(scope.packageDirectory, "package.json")
                       );
                     } else {
                       diagnosticDetails = chainDiagnosticMessages(
                         /*details*/
                         void 0,
                         Diagnostics.To_convert_this_file_to_an_ECMAScript_module_add_the_field_type_Colon_module_to_0,
-                        combinePaths(scope.packageDirectory, "package.json")
+                        combinePaths2(scope.packageDirectory, "package.json")
                       );
                     }
                   } else {
@@ -112563,10 +112767,11 @@ ${lanes.join("\n")}
     return fileExtensionIs(fileName, ".json" /* Json */) ? ".json" /* Json */ : options.jsx === 1 /* Preserve */ && fileExtensionIsOneOf(fileName, [".jsx" /* Jsx */, ".tsx" /* Tsx */]) ? ".jsx" /* Jsx */ : fileExtensionIsOneOf(fileName, [".mts" /* Mts */, ".mjs" /* Mjs */]) ? ".mjs" /* Mjs */ : fileExtensionIsOneOf(fileName, [".cts" /* Cts */, ".cjs" /* Cjs */]) ? ".cjs" /* Cjs */ : ".js" /* Js */;
   }
   function getOutputPathWithoutChangingExt(inputFileName, configFile, ignoreCase, outputDir, getCommonSourceDirectory2) {
-    return outputDir ? resolvePath(
-      outputDir,
-      getRelativePathFromDirectory(getCommonSourceDirectory2 ? getCommonSourceDirectory2() : getCommonSourceDirectoryOfConfig(configFile, ignoreCase), inputFileName, ignoreCase)
-    ) : inputFileName;
+    if (outputDir) {
+      const commonDir = getCommonSourceDirectory2 ? getCommonSourceDirectory2() : getCommonSourceDirectoryOfConfig(configFile, ignoreCase);
+      return `${outputDir}${directorySeparator}${inputFileName.slice(commonDir.length)}`;
+    }
+    return inputFileName;
   }
   function getOutputDeclarationFileName(inputFileName, configFile, ignoreCase, getCommonSourceDirectory2) {
     return changeExtension(
@@ -118483,6 +118688,7 @@ ${lanes.join("\n")}
         ProgramUpdateLevel2[ProgramUpdateLevel2["Update"] = 0] = "Update";
         ProgramUpdateLevel2[ProgramUpdateLevel2["RootNamesAndUpdate"] = 1] = "RootNamesAndUpdate";
         ProgramUpdateLevel2[ProgramUpdateLevel2["Full"] = 2] = "Full";
+        ProgramUpdateLevel2[ProgramUpdateLevel2["Resolutions"] = 3] = "Resolutions";
         return ProgramUpdateLevel2;
       })(ProgramUpdateLevel || {});
       WatchLogLevel = /* @__PURE__ */ ((WatchLogLevel2) => {
@@ -126139,6 +126345,11 @@ ${lanes.join("\n")}
     if (configFileName) {
       configFileWatcher = watchFile2(configFileName, scheduleProgramReload, 2e3 /* High */, watchOptions, WatchType.ConfigFile);
     }
+    let pnpFileWatcher;
+    const pnpApiPath = getPnpApiPath(__filename);
+    if (pnpApiPath) {
+      pnpFileWatcher = watchFile2(pnpApiPath, scheduleResolutionReload, 2e3 /* High */, watchOptions, WatchType.ConfigFile);
+    }
     const compilerHost = createCompilerHostFromProgramHost(host, () => compilerOptions, directoryStructureHost);
     setGetSourceFileAsHashVersioned(compilerHost);
     const getNewSourceFile = compilerHost.getSourceFile;
@@ -126202,6 +126413,10 @@ ${lanes.join("\n")}
         configFileWatcher.close();
         configFileWatcher = void 0;
       }
+      if (pnpFileWatcher) {
+        pnpFileWatcher.close();
+        pnpFileWatcher = void 0;
+      }
       extendedConfigCache == null ? void 0 : extendedConfigCache.clear();
       extendedConfigCache = void 0;
       if (sharedExtendedConfigFileWatchers) {
@@ -126237,7 +126452,7 @@ ${lanes.join("\n")}
     function getCurrentProgram() {
       return builderProgram && builderProgram.getProgramOrUndefined();
     }
-    function synchronizeProgram() {
+    function synchronizeProgram(forceAllFilesAsInvalidated = false) {
       writeLog(`Synchronizing program`);
       Debug.assert(compilerOptions);
       Debug.assert(rootFileNames);
@@ -126249,7 +126464,7 @@ ${lanes.join("\n")}
           resolutionCache.onChangesAffectModuleResolution();
         }
       }
-      const { hasInvalidatedResolutions, hasInvalidatedLibResolutions } = resolutionCache.createHasInvalidatedResolutions(customHasInvalidatedResolutions, customHasInvalidLibResolutions);
+      const { hasInvalidatedResolutions, hasInvalidatedLibResolutions } = resolutionCache.createHasInvalidatedResolutions(forceAllFilesAsInvalidated ? returnTrue : customHasInvalidatedResolutions, customHasInvalidLibResolutions);
       const {
         originalReadFile,
         originalFileExists,
@@ -126457,13 +126672,19 @@ ${lanes.join("\n")}
       updateLevel = 2 /* Full */;
       scheduleProgramUpdate();
     }
+    function scheduleResolutionReload() {
+      writeLog("Clearing resolutions");
+      resolutionCache.clear();
+      updateLevel = 3 /* Resolutions */;
+      scheduleProgramUpdate();
+    }
     function updateProgramWithWatchStatus() {
       timerToUpdateProgram = void 0;
       reportFileChangeDetectedOnCreateProgram = true;
       updateProgram();
     }
     function updateProgram() {
-      var _a, _b, _c, _d;
+      var _a, _b, _c, _d, _e;
       switch (updateLevel) {
         case 1 /* RootNamesAndUpdate */:
           (_a = perfLogger) == null ? void 0 : _a.logStartUpdateProgram("PartialConfigReload");
@@ -126473,12 +126694,19 @@ ${lanes.join("\n")}
           (_b = perfLogger) == null ? void 0 : _b.logStartUpdateProgram("FullConfigReload");
           reloadConfigFile();
           break;
+        case 3 /* Resolutions */:
+          (_c = perfLogger) == null ? void 0 : _c.logStartUpdateProgram("SynchronizeProgramWithResolutions");
+          synchronizeProgram(
+            /*forceAllFilesAsInvalidated*/
+            true
+          );
+          break;
         default:
-          (_c = perfLogger) == null ? void 0 : _c.logStartUpdateProgram("SynchronizeProgram");
+          (_d = perfLogger) == null ? void 0 : _d.logStartUpdateProgram("SynchronizeProgram");
           synchronizeProgram();
           break;
       }
-      (_d = perfLogger) == null ? void 0 : _d.logStopUpdateProgram("Done");
+      (_e = perfLogger) == null ? void 0 : _e.logStopUpdateProgram("Done");
       return getCurrentBuilderProgram();
     }
     function reloadFileNamesFromConfigFile() {
@@ -126766,6 +126994,7 @@ ${lanes.join("\n")}
     "src/compiler/watchPublic.ts"() {
       "use strict";
       init_ts2();
+      init_pnp();
     }
   });

@@ -132076,7 +132305,14 @@ ${lanes.join("\n")}
       return false;
     }
     function getNodeModulesPackageNameFromFileName(importedFileName, moduleSpecifierResolutionHost) {
-      if (!importedFileName.includes("node_modules")) {
+      const pnpapi = getPnpApi(importedFileName);
+      if (pnpapi) {
+        const fromLocator = pnpapi.findPackageLocator(fromFile.fileName);
+        const toLocator = pnpapi.findPackageLocator(importedFileName);
+        if (!(fromLocator && toLocator)) {
+          return void 0;
+        }
+      } else if (!importedFileName.includes("node_modules")) {
         return void 0;
       }
       const specifier = ts_moduleSpecifiers_exports.getNodeModulesPackageName(
@@ -132372,6 +132608,7 @@ ${lanes.join("\n")}
   var init_utilities4 = __esm({
     "src/services/utilities.ts"() {
       "use strict";
+      init_pnp();
       init_ts4();
       scanner = createScanner(
         99 /* Latest */,
@@ -132650,6 +132887,9 @@ ${lanes.join("\n")}
     return hasImportablePath;
   }
   function isImportablePath(fromPath, toPath3, getCanonicalFileName, globalCachePath) {
+    if (getPnpApi(fromPath)) {
+      return isImportablePathPnp(fromPath, toPath3);
+    }
     const toNodeModules = forEachAncestorDirectory(toPath3, (ancestor) => getBaseFileName(ancestor) === "node_modules" ? ancestor : void 0);
     const toNodeModulesParent = toNodeModules && getDirectoryPath(getCanonicalFileName(toNodeModules));
     return toNodeModulesParent === void 0 || startsWith(getCanonicalFileName(fromPath), toNodeModulesParent) || !!globalCachePath && startsWith(getCanonicalFileName(globalCachePath), toNodeModulesParent);
@@ -132833,6 +133073,7 @@ ${lanes.join("\n")}
   var init_exportInfoMap = __esm({
     "src/services/exportInfoMap.ts"() {
       "use strict";
+      init_pnp();
       init_ts4();
       ImportKind = /* @__PURE__ */ ((ImportKind2) => {
         ImportKind2[ImportKind2["Named"] = 0] = "Named";
@@ -160665,7 +160906,31 @@ ${newComment.split("\n").map((c) => ` * ${c}`).join("\n")}
             );
           }
         };
-        if (fragmentDirectory && getResolvePackageJsonExports(compilerOptions)) {
+        const checkExports = (packageFile, packageDirectory, fragmentSubpath) => {
+          const packageJson = readJson(packageFile, host);
+          const exports = packageJson.exports;
+          if (exports) {
+            if (typeof exports !== "object" || exports === null) {
+              return true;
+            }
+            const keys = getOwnKeys(exports);
+            const conditions = getConditions(compilerOptions, mode === 99 /* ESNext */);
+            addCompletionEntriesFromPathsOrExports(
+              result,
+              fragmentSubpath,
+              packageDirectory,
+              extensionOptions,
+              host,
+              keys,
+              (key) => singleElementArray(getPatternFromFirstMatchingCondition(exports[key], conditions)),
+              comparePatternKeys
+            );
+            return true;
+          }
+          return false;
+        };
+        const shouldCheckExports = fragmentDirectory && getResolvePackageJsonExports(compilerOptions);
+        if (shouldCheckExports) {
           const nodeModulesDirectoryLookup = ancestorLookup;
           ancestorLookup = (ancestor) => {
             const components = getPathComponents(fragment);
@@ -160684,32 +160949,52 @@ ${newComment.split("\n").map((c) => ` * ${c}`).join("\n")}
             const packageDirectory = combinePaths(ancestor, "node_modules", packagePath);
             const packageFile = combinePaths(packageDirectory, "package.json");
             if (tryFileExists(host, packageFile)) {
-              const packageJson = readJson(packageFile, host);
-              const exports = packageJson.exports;
-              if (exports) {
-                if (typeof exports !== "object" || exports === null) {
-                  return;
+              const fragmentSubpath = components.join("/") + (components.length && hasTrailingDirectorySeparator(fragment) ? "/" : "");
+              if (checkExports(packageFile, packageDirectory, fragmentSubpath)) {
+                return;
+              }
+            }
+            return nodeModulesDirectoryLookup(ancestor);
+          };
+        }
+        const pnpApi = getPnpApi(scriptPath);
+        if (pnpApi) {
+          const pathRegExp = /^(?![a-zA-Z]:[\\/]|\\\\|\.{0,2}(?:\/|$))((?:@[^/]+\/)?[^/]+)\/*(.*|)$/;
+          const dependencyNameMatch = fragment.match(pathRegExp);
+          if (dependencyNameMatch) {
+            const [, dependencyName, subPath] = dependencyNameMatch;
+            let unqualified;
+            try {
+              unqualified = pnpApi.resolveToUnqualified(dependencyName, scriptPath, { considerBuiltins: false });
+            } catch {
+            }
+            if (unqualified) {
+              const packageDirectory = normalizePath(unqualified);
+              let shouldGetCompletions = true;
+              if (shouldCheckExports) {
+                const packageFile = combinePaths(packageDirectory, "package.json");
+                if (tryFileExists(host, packageFile) && checkExports(packageFile, packageDirectory, subPath)) {
+                  shouldGetCompletions = false;
                 }
-                const keys = getOwnKeys(exports);
-                const fragmentSubpath = components.join("/") + (components.length && hasTrailingDirectorySeparator(fragment) ? "/" : "");
-                const conditions = getConditions(compilerOptions, mode === 99 /* ESNext */);
-                addCompletionEntriesFromPathsOrExports(
-                  result,
-                  fragmentSubpath,
+              }
+              if (shouldGetCompletions) {
+                getCompletionEntriesForDirectoryFragment(
+                  subPath,
                   packageDirectory,
                   extensionOptions,
                   host,
-                  keys,
-                  (key) => singleElementArray(getPatternFromFirstMatchingCondition(exports[key], conditions)),
-                  comparePatternKeys
+                  /*moduleSpecifierIsRelative*/
+                  false,
+                  /*exclude*/
+                  void 0,
+                  result
                 );
-                return;
               }
             }
-            return nodeModulesDirectoryLookup(ancestor);
-          };
+          }
+        } else {
+          forEachAncestorDirectory(scriptPath, ancestorLookup);
         }
-        forEachAncestorDirectory(scriptPath, ancestorLookup);
       }
     }
     return arrayFrom(result.values());
@@ -160840,9 +161125,15 @@ ${newComment.split("\n").map((c) => ` * ${c}`).join("\n")}
     for (const root of typeRoots) {
       getCompletionEntriesFromDirectories(root);
     }
-    for (const packageJson of findPackageJsons(scriptPath, host)) {
-      const typesDir = combinePaths(getDirectoryPath(packageJson), "node_modules/@types");
-      getCompletionEntriesFromDirectories(typesDir);
+    if (getPnpApi(scriptPath)) {
+      for (const root of getPnpTypeRoots(scriptPath)) {
+        getCompletionEntriesFromDirectories(root);
+      }
+    } else {
+      for (const packageJson of findPackageJsons(scriptPath, host)) {
+        const typesDir = combinePaths(getDirectoryPath(packageJson), "node_modules/@types");
+        getCompletionEntriesFromDirectories(typesDir);
+      }
     }
     return result;
     function getCompletionEntriesFromDirectories(directory) {
@@ -160925,6 +161216,7 @@ ${newComment.split("\n").map((c) => ` * ${c}`).join("\n")}
   var init_stringCompletions = __esm({
     "src/services/stringCompletions.ts"() {
       "use strict";
+      init_pnp();
       init_ts4();
       init_ts_Completions();
       kindPrecedence = {
@@ -175589,6 +175881,7 @@ ${options.prefix}` : "\n" : options.prefix
   var init_project = __esm({
     "src/server/project.ts"() {
       "use strict";
+      init_pnp();
       init_ts7();
       init_ts7();
       init_ts_server3();
@@ -177650,6 +177943,29 @@ ${options.prefix}` : "\n" : options.prefix
           return this.projectReferences;
         }
         updateReferences(refs) {
+          if (typeof process.versions.pnp !== `undefined`) {
+            const basePath = this.getCurrentDirectory();
+            const getPnpPath = (path) => {
+              try {
+                const pnpApi = getPnpApi(`${path}/`);
+                if (!pnpApi) {
+                  return path;
+                }
+                const targetLocator = pnpApi.findPackageLocator(`${path}/`);
+                const { packageLocation } = pnpApi.getPackageInformation(targetLocator);
+                const request = combinePaths(targetLocator.name, getRelativePathFromDirectory(
+                  packageLocation,
+                  path,
+                  /*ignoreCase*/
+                  false
+                ));
+                return pnpApi.resolveToUnqualified(request, `${basePath}/`);
+              } catch {
+                return path;
+              }
+            };
+            refs = refs == null ? void 0 : refs.map((r) => ({ ...r, path: getPnpPath(r.path) }));
+          }
           this.projectReferences = refs;
           this.potentialProjectReferences = void 0;
         }
@@ -178115,6 +178431,7 @@ ${options.prefix}` : "\n" : options.prefix
   var init_editorServices = __esm({
     "src/server/editorServices.ts"() {
       "use strict";
+      init_pnp();
       init_ts7();
       init_ts_server3();
       init_protocol();
@@ -178344,6 +178661,7 @@ ${options.prefix}` : "\n" : options.prefix
             log,
             getDetailWatchInfo
           );
+          this.pnpWatcher = this.watchPnpFile();
           (_a = opts.incrementalVerifier) == null ? void 0 : _a.call(opts, this);
         }
         toPath(fileName) {
@@ -180156,7 +180474,7 @@ Dynamic files must always be opened with service's current directory or service
           this.performanceEventHandler = performanceEventHandler;
         }
         setHostConfiguration(args) {
-          var _a;
+          var _a, _b;
           if (args.file) {
             const info = this.getScriptInfoForNormalizedPath(toNormalizedPath(args.file));
             if (info) {
@@ -180199,7 +180517,8 @@ Dynamic files must always be opened with service's current directory or service
             }
             if (args.watchOptions) {
               this.hostConfiguration.watchOptions = (_a = convertWatchOptions(args.watchOptions)) == null ? void 0 : _a.watchOptions;
-              this.logger.info(`Host watch options changed to ${JSON.stringify(this.hostConfiguration.watchOptions)}, it will be take effect for next watches.`);
+              (_b = this.pnpWatcher) == null ? void 0 : _b.close();
+              this.watchPnpFile();
             }
           }
         }
@@ -181146,6 +181465,29 @@ Dynamic files must always be opened with service's current directory or service
           });
         }
         /** @internal */
+        watchPnpFile() {
+          const pnpApiPath = getPnpApiPath(__filename);
+          if (!pnpApiPath) {
+            return;
+          }
+          return this.watchFactory.watchFile(
+            pnpApiPath,
+            () => {
+              this.forEachProject((project) => {
+                for (const info of project.getScriptInfos()) {
+                  project.resolutionCache.invalidateResolutionOfFile(info.path);
+                }
+                project.markAsDirty();
+                updateProjectIfDirty(project);
+              });
+              this.delayEnsureProjectForOpenFiles();
+            },
+            250 /* Low */,
+            this.hostConfiguration.watchOptions,
+            WatchType.ConfigFile
+          );
+        }
+        /** @internal */
         watchPackageJsonFile(path) {
           const watchers = this.packageJsonFilesMap || (this.packageJsonFilesMap = /* @__PURE__ */ new Map());
           if (!watchers.has(path)) {
diff --git a/lib/typingsInstaller.js b/lib/typingsInstaller.js
index 7a7a60855..04bf7464a 100644
semver exclusivity >=5.3.0
--- a/lib/typingsInstaller.js
+++ b/lib/typingsInstaller.js
@@ -4472,6 +4472,9 @@ var sys = (() => {
       return Buffer2.from && Buffer2.from !== Int8Array.from ? Buffer2.from(input, encoding) : new Buffer2(input, encoding);
     }
     function isFileSystemCaseSensitive() {
+      if (typeof process.versions.pnp !== `undefined`) {
+        return true;
+      }
       if (platform === "win32" || platform === "win64") {
         return false;
       }
@@ -4846,12 +4849,19 @@ function getAnyExtensionFromPath(path2, extensions, ignoreCase) {
   }
   return "";
 }
+var pathComponentsCache = /* @__PURE__ */ new Map();
 function pathComponents(path2, rootLength) {
+  const cached = pathComponentsCache.get(path2);
+  if (cached) {
+    return cached.slice();
+  }
   const root = path2.substring(0, rootLength);
   const rest = path2.substring(rootLength).split(directorySeparator);
   if (rest.length && !lastOrUndefined(rest))
     rest.pop();
-  return [root, ...rest];
+  const res = [root, ...rest];
+  pathComponentsCache.set(path2, res);
+  return res;
 }
 function getPathComponents(path2, currentDirectory = "") {
   path2 = combinePaths(currentDirectory, path2);
@@ -27364,6 +27374,17 @@ function specToDiagnostic(spec, disallowTrailingRecursion) {
   }
 }

+// src/compiler/pnp.ts
+function getPnpApi(path2) {
+  if (typeof process.versions.pnp === "undefined") {
+    return;
+  }
+  const { findPnpApi } = require("module");
+  if (findPnpApi) {
+    return findPnpApi(`${path2}/`);
+  }
+}
+
 // src/compiler/moduleNameResolver.ts
 function trace(host, message, ...args) {
   host.trace(formatMessage(message, ...args));
@@ -28874,7 +28895,15 @@ function loadModuleFromNearestNodeModulesDirectoryWorker(extensions, moduleName,
     return lookup(secondaryExtensions);
   }
   function lookup(extensions2) {
-    return forEachAncestorDirectory(normalizeSlashes(directory), (ancestorDirectory) => {
+    const issuer = normalizeSlashes(directory);
+    if (getPnpApi(issuer)) {
+      const resolutionFromCache = tryFindNonRelativeModuleNameInCache(cache, moduleName, mode, issuer, redirectedReference, state);
+      if (resolutionFromCache) {
+        return resolutionFromCache;
+      }
+      return toSearchResult(loadModuleFromImmediateNodeModulesDirectoryPnP(extensions2, moduleName, issuer, state, typesScopeOnly, cache, redirectedReference));
+    }
+    return forEachAncestorDirectory(issuer, (ancestorDirectory) => {
       if (getBaseFileName(ancestorDirectory) !== "node_modules") {
         const resolutionFromCache = tryFindNonRelativeModuleNameInCache(cache, moduleName, mode, ancestorDirectory, redirectedReference, state);
         if (resolutionFromCache) {
@@ -28909,11 +28938,40 @@ function loadModuleFromImmediateNodeModulesDirectory(extensions, moduleName, dir
     return loadModuleFromSpecificNodeModulesDirectory(4 /* Declaration */, mangleScopedPackageNameWithTrace(moduleName, state), nodeModulesAtTypes2, nodeModulesAtTypesExists, state, cache, redirectedReference);
   }
 }
+function loadModuleFromImmediateNodeModulesDirectoryPnP(extensions, moduleName, directory, state, typesScopeOnly, cache, redirectedReference) {
+  const issuer = normalizeSlashes(directory);
+  if (!typesScopeOnly) {
+    const packageResult = tryLoadModuleUsingPnpResolution(extensions, moduleName, issuer, state, cache, redirectedReference);
+    if (packageResult) {
+      return packageResult;
+    }
+  }
+  if (extensions & 4 /* Declaration */) {
+    return tryLoadModuleUsingPnpResolution(4 /* Declaration */, `@types/${mangleScopedPackageNameWithTrace(moduleName, state)}`, issuer, state, cache, redirectedReference);
+  }
+}
 function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, cache, redirectedReference) {
-  var _a, _b;
   const candidate = normalizePath(combinePaths(nodeModulesDirectory, moduleName));
   const { packageName, rest } = parsePackageName(moduleName);
   const packageDirectory = combinePaths(nodeModulesDirectory, packageName);
+  return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory);
+}
+function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state, cache, redirectedReference) {
+  const candidate = normalizePath(combinePaths(packageDirectory, rest));
+  return loadModuleFromSpecificNodeModulesDirectoryImpl(
+    extensions,
+    /*nodeModulesDirectoryExists*/
+    true,
+    state,
+    cache,
+    redirectedReference,
+    candidate,
+    rest,
+    packageDirectory
+  );
+}
+function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, nodeModulesDirectoryExists, state, cache, redirectedReference, candidate, rest, packageDirectory) {
+  var _a, _b;
   let rootPackageInfo;
   let packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
   if (rest !== "" && packageInfo && (!(state.features & 8 /* Exports */) || !hasProperty(((_a = rootPackageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state)) == null ? void 0 : _a.contents.packageJsonContent) ?? emptyArray, "exports"))) {
@@ -29151,6 +29209,26 @@ function traceIfEnabled(state, diagnostic, ...args) {
 function useCaseSensitiveFileNames(state) {
   return !state.host.useCaseSensitiveFileNames ? true : typeof state.host.useCaseSensitiveFileNames === "boolean" ? state.host.useCaseSensitiveFileNames : state.host.useCaseSensitiveFileNames();
 }
+var { isBuiltin } = require("module");
+var failedLookups = /* @__PURE__ */ new Set();
+function loadPnpPackageResolution(packageName, containingDirectory) {
+  if (failedLookups.has(packageName)) {
+    return;
+  }
+  try {
+    const resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, `${containingDirectory}/`, { considerBuiltins: false });
+    return normalizeSlashes(resolution).replace(/\/$/, "");
+  } catch {
+    if (isBuiltin(packageName) || packageName.startsWith("@types/") && isBuiltin(packageName.slice(7)) || (packageName.startsWith("@typescript/") || packageName.startsWith("@types/typescript__"))) {
+      failedLookups.add(packageName);
+    }
+  }
+}
+function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state, cache, redirectedReference) {
+  const { packageName, rest } = parsePackageName(moduleName);
+  const packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+  return packageResolution ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state, cache, redirectedReference) : void 0;
+}

 // src/compiler/checker.ts
 var nextNodeId = 1;
