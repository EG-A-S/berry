diff --git a/lib/tsc.js b/lib/tsc.js
index 1b1811b4d..42c785d3d 100644
semver exclusivity >=4.4
--- a/lib/tsc.js
+++ b/lib/tsc.js
@@ -4758,6 +4758,9 @@ var ts;
                     : new Buffer(input, encoding);
             }
             function isFileSystemCaseSensitive() {
+                if (process.versions.pnp) {
+                    return true;
+                }
                 if (platform === "win32" || platform === "win64") {
                     return false;
                 }
@@ -33386,21 +33389,52 @@ var ts;
         }
     }
     ts.getEffectiveTypeRoots = getEffectiveTypeRoots;
-    function getDefaultTypeRoots(currentDirectory, host) {
+    function getNodeModulesTypeRoots(currentDirectory, host) {
         if (!host.directoryExists) {
             return [ts.combinePaths(currentDirectory, nodeModulesAtTypes)];
         }
-        var typeRoots;
+        var typeRoots = [];
         ts.forEachAncestorDirectory(ts.normalizePath(currentDirectory), function (directory) {
             var atTypes = ts.combinePaths(directory, nodeModulesAtTypes);
             if (host.directoryExists(atTypes)) {
-                (typeRoots || (typeRoots = [])).push(atTypes);
+                typeRoots.push(atTypes);
             }
             return undefined;
         });
         return typeRoots;
     }
     var nodeModulesAtTypes = ts.combinePaths("node_modules", "@types");
+    function getPnpTypeRoots(currentDirectory) {
+        var pnpapi = getPnpApi(currentDirectory);
+        if (!pnpapi) {
+            return [];
+        }
+        currentDirectory = ts.sys.resolvePath(currentDirectory);
+        var currentPackage = pnpapi.findPackageLocator(currentDirectory + "/");
+        if (!currentPackage) {
+            return [];
+        }
+        var packageDependencies = pnpapi.getPackageInformation(currentPackage).packageDependencies;
+        var typeRoots = [];
+        for (var _i = 0, _a = Array.from(packageDependencies.entries()); _i < _a.length; _i++) {
+            var _b = _a[_i], name = _b[0], referencish = _b[1];
+            if (name.startsWith(typesPackagePrefix) && referencish !== null) {
+                var dependencyLocator = pnpapi.getLocator(name, referencish);
+                var packageLocation = pnpapi.getPackageInformation(dependencyLocator).packageLocation;
+                typeRoots.push(ts.getDirectoryPath(packageLocation));
+            }
+        }
+        return typeRoots;
+    }
+    ts.getPnpTypeRoots = getPnpTypeRoots;
+    var typesPackagePrefix = "@types/";
+    function getDefaultTypeRoots(currentDirectory, host) {
+        var nmTypes = getNodeModulesTypeRoots(currentDirectory, host);
+        var pnpTypes = getPnpTypeRoots(currentDirectory);
+        if (nmTypes.length > 0 || pnpTypes.length > 0) {
+            return __spreadArray(__spreadArray([], nmTypes, true), pnpTypes, true);
+        }
+    }
     function resolveTypeReferenceDirective(typeReferenceDirectiveName, containingFile, options, host, redirectedReference, cache) {
         var traceEnabled = isTraceEnabled(options, host);
         if (redirectedReference) {
@@ -33507,7 +33541,9 @@ var ts;
                 }
                 var result_4;
                 if (!ts.isExternalModuleNameRelative(typeReferenceDirectiveName)) {
-                    var searchResult = loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, undefined, undefined);
+                    var searchResult = getPnpApi(initialLocationForSecondaryLookup)
+                        ? tryLoadModuleUsingPnpResolution(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState)
+                        : loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, undefined, undefined);
                     result_4 = searchResult && searchResult.value;
                 }
                 else {
@@ -33950,9 +33986,12 @@ var ts;
                 if (traceEnabled) {
                     trace(host, ts.Diagnostics.Loading_module_0_from_node_modules_folder_target_file_type_1, moduleName, Extensions[extensions]);
                 }
-                var resolved_1 = loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
-                if (!resolved_1)
+                var resolved_1 = getPnpApi(containingDirectory)
+                    ? tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state)
+                    : loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
+                if (!resolved_1) {
                     return undefined;
+                }
                 var resolvedValue = resolved_1.value;
                 if (!compilerOptions.preserveSymlinks && resolvedValue && !resolvedValue.originalPath) {
                     var path = realPath(resolvedValue.path, host, traceEnabled);
@@ -34263,6 +34302,14 @@ var ts;
     }
     function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state) {
         var candidate = ts.normalizePath(ts.combinePaths(nodeModulesDirectory, moduleName));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, candidate, undefined, undefined);
+    }
+    function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state) {
+        var candidate = ts.normalizePath(ts.combinePaths(packageDirectory, rest));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, undefined, undefined, true, state, candidate, rest, packageDirectory);
+    }
+    function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, candidate, rest, packageDirectory) {
+        var _a;
         var packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
         if (packageInfo) {
             var fromFile = loadModuleFromFile(extensions, candidate, !nodeModulesDirectoryExists, state);
@@ -34277,9 +34324,12 @@ var ts;
                 loadNodeModuleFromDirectoryWorker(extensions, candidate, onlyRecordFailures, state, packageInfo && packageInfo.packageJsonContent, packageInfo && packageInfo.versionPaths);
             return withPackageId(packageInfo, pathAndExtension);
         };
-        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageName;
+        if (rest === undefined)
+            (_a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest);
         if (rest !== "") {
-            var packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
+            if (packageDirectory === undefined)
+                packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
             packageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state);
             if (packageInfo && packageInfo.versionPaths) {
                 if (state.traceEnabled) {
@@ -34417,6 +34467,47 @@ var ts;
     function toSearchResult(value) {
         return value !== undefined ? { value: value } : undefined;
     }
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi(path + "/");
+    }
+    function loadPnpPackageResolution(packageName, containingDirectory) {
+        try {
+            var resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, containingDirectory + "/", { considerBuiltins: false });
+            return ts.normalizeSlashes(resolution).replace(/\/$/, '');
+        }
+        catch (_a) {
+        }
+    }
+    function loadPnpTypePackageResolution(packageName, containingDirectory) {
+        return loadPnpPackageResolution(getTypesPackageName(packageName), containingDirectory);
+    }
+    function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state) {
+        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+        var packageFullResolution = packageResolution
+            ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state)
+            : undefined;
+        var resolved;
+        if (packageFullResolution) {
+            resolved = packageFullResolution;
+        }
+        else if (extensions === Extensions.TypeScript || extensions === Extensions.DtsOnly) {
+            var typePackageResolution = loadPnpTypePackageResolution(packageName, containingDirectory);
+            var typePackageFullResolution = typePackageResolution
+                ? loadModuleFromPnpResolution(Extensions.DtsOnly, typePackageResolution, rest, state)
+                : undefined;
+            if (typePackageFullResolution) {
+                resolved = typePackageFullResolution;
+            }
+        }
+        if (resolved) {
+            return toSearchResult(resolved);
+        }
+    }
 })(ts || (ts = {}));
 var ts;
 (function (ts) {
@@ -91001,6 +91092,7 @@ var ts;
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["None"] = 0] = "None";
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Partial"] = 1] = "Partial";
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Full"] = 2] = "Full";
+        ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Resolutions"] = 3] = "Resolutions";
     })(ConfigFileProgramReloadLevel = ts.ConfigFileProgramReloadLevel || (ts.ConfigFileProgramReloadLevel = {}));
     function updateSharedExtendedConfigFileWatcher(projectPath, options, extendedConfigFilesMap, createExtendedConfigFileWatch, toPath) {
         var _a;
@@ -96667,6 +96759,25 @@ var ts;
                 return undefined;
             }
             var parts = getNodeModulePathParts(path);
+            var packageName;
+            if (!parts && typeof process.versions.pnp !== "undefined") {
+                var pnpApi = require("pnpapi");
+                var locator = pnpApi.findPackageLocator(path);
+                if (locator !== null) {
+                    var sourceLocator = pnpApi.findPackageLocator(sourceDirectory + "/");
+                    if (locator === sourceLocator) {
+                        return undefined;
+                    }
+                    var information = pnpApi.getPackageInformation(locator);
+                    packageName = locator.name;
+                    parts = {
+                        topLevelNodeModulesIndex: undefined,
+                        topLevelPackageNameIndex: undefined,
+                        packageRootIndex: information.packageLocation.length - 1,
+                        fileNameIndex: path.lastIndexOf("/"),
+                    };
+                }
+            }
             if (!parts) {
                 return undefined;
             }
@@ -96694,14 +96805,18 @@ var ts;
             if (isRedirect && !isPackageRootPath) {
                 return undefined;
             }
-            var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-            var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-            if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-                return undefined;
+            if (typeof process.versions.pnp === "undefined") {
+                var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+                var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+                if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+                    return undefined;
+                }
             }
-            var nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-            var packageName = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
-            return ts.getEmitModuleResolutionKind(options) !== ts.ModuleResolutionKind.NodeJs && packageName === nodeModulesDirectoryName ? undefined : packageName;
+            var nodeModulesDirectoryName = typeof packageName !== "undefined"
+                ? packageName + moduleSpecifier.substring(parts.packageRootIndex)
+                : moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
+            var packageNameFromPath = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+            return ts.getEmitModuleResolutionKind(options) !== ts.ModuleResolutionKind.NodeJs && packageNameFromPath === nodeModulesDirectoryName ? undefined : packageNameFromPath;
             function tryDirectoryWithPackageJson(packageRootIndex) {
                 var packageRootPath = path.substring(0, packageRootIndex);
                 var packageJsonPath = ts.combinePaths(packageRootPath, "package.json");
@@ -97429,6 +97544,10 @@ var ts;
         if (configFileName) {
             configFileWatcher = watchFile(configFileName, scheduleProgramReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
         }
+        var pnpFileWatcher;
+        if (typeof process.versions.pnp !== "undefined") {
+            pnpFileWatcher = watchFile(require.resolve("pnpapi"), scheduleResolutionReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
+        }
         var compilerHost = ts.createCompilerHostFromProgramHost(host, function () { return compilerOptions; }, directoryStructureHost);
         ts.setGetSourceFileAsHashVersioned(compilerHost, host);
         var getNewSourceFile = compilerHost.getSourceFile;
@@ -97500,6 +97619,10 @@ var ts;
                 configFileWatcher.close();
                 configFileWatcher = undefined;
             }
+            if (pnpFileWatcher) {
+                pnpFileWatcher.close();
+                pnpFileWatcher = undefined;
+            }
             extendedConfigCache === null || extendedConfigCache === void 0 ? void 0 : extendedConfigCache.clear();
             extendedConfigCache = undefined;
             if (sharedExtendedConfigFileWatchers) {
@@ -97532,7 +97655,8 @@ var ts;
         function getCurrentProgram() {
             return builderProgram && builderProgram.getProgramOrUndefined();
         }
-        function synchronizeProgram() {
+        function synchronizeProgram(forceAllFilesAsInvalidated) {
+            if (forceAllFilesAsInvalidated === void 0) { forceAllFilesAsInvalidated = false; }
             writeLog("Synchronizing program");
             clearInvalidateResolutionsOfFailedLookupLocations();
             var program = getCurrentBuilderProgram();
@@ -97542,7 +97666,7 @@ var ts;
                     resolutionCache.clear();
                 }
             }
-            var hasInvalidatedResolution = resolutionCache.createHasInvalidatedResolution(userProvidedResolution || changesAffectResolution);
+            var hasInvalidatedResolution = resolutionCache.createHasInvalidatedResolution(userProvidedResolution || changesAffectResolution || forceAllFilesAsInvalidated);
             if (ts.isProgramUptoDate(getCurrentProgram(), rootFileNames, compilerOptions, getSourceVersion, fileExists, hasInvalidatedResolution, hasChangedAutomaticTypeDirectiveNames, getParsedCommandLine, projectReferences)) {
                 if (hasChangedConfigFileParsingErrors) {
                     builderProgram = createProgram(undefined, undefined, compilerHost, builderProgram, configFileParsingDiagnostics, projectReferences);
@@ -97726,6 +97850,12 @@ var ts;
             reloadLevel = ts.ConfigFileProgramReloadLevel.Full;
             scheduleProgramUpdate();
         }
+        function scheduleResolutionReload() {
+            writeLog("Clearing resolutions");
+            resolutionCache.clear();
+            reloadLevel = ts.ConfigFileProgramReloadLevel.Resolutions;
+            scheduleProgramUpdate();
+        }
         function updateProgramWithWatchStatus() {
             timerToUpdateProgram = undefined;
             reportWatchDiagnostic(ts.Diagnostics.File_change_detected_Starting_incremental_compilation);
@@ -97741,6 +97871,10 @@ var ts;
                     ts.perfLogger.logStartUpdateProgram("FullConfigReload");
                     reloadConfigFile();
                     break;
+                case ts.ConfigFileProgramReloadLevel.Resolutions:
+                    ts.perfLogger.logStartUpdateProgram("SynchronizeProgramWithResolutions");
+                    synchronizeProgram(true);
+                    break;
                 default:
                     ts.perfLogger.logStartUpdateProgram("SynchronizeProgram");
                     synchronizeProgram();
diff --git a/lib/tsserver.js b/lib/tsserver.js
index ac49ace7b..a88e5e2b7 100644
semver exclusivity >=4.4
--- a/lib/tsserver.js
+++ b/lib/tsserver.js
@@ -7458,6 +7458,11 @@ var ts;
                     : new Buffer(input, encoding);
             }
             function isFileSystemCaseSensitive() {
+                // The PnP runtime is always case-sensitive
+                // @ts-ignore
+                if (process.versions.pnp) {
+                    return true;
+                }
                 // win32\win64 are case insensitive platforms
                 if (platform === "win32" || platform === "win64") {
                     return false;
@@ -40962,24 +40967,56 @@ var ts;
     ts.getEffectiveTypeRoots = getEffectiveTypeRoots;
     /**
      * Returns the path to every node_modules/@types directory from some ancestor directory.
-     * Returns undefined if there are none.
      */
-    function getDefaultTypeRoots(currentDirectory, host) {
+    function getNodeModulesTypeRoots(currentDirectory, host) {
         if (!host.directoryExists) {
             return [ts.combinePaths(currentDirectory, nodeModulesAtTypes)];
             // And if it doesn't exist, tough.
         }
-        var typeRoots;
+        var typeRoots = [];
         ts.forEachAncestorDirectory(ts.normalizePath(currentDirectory), function (directory) {
             var atTypes = ts.combinePaths(directory, nodeModulesAtTypes);
             if (host.directoryExists(atTypes)) {
-                (typeRoots || (typeRoots = [])).push(atTypes);
+                typeRoots.push(atTypes);
             }
             return undefined;
         });
         return typeRoots;
     }
     var nodeModulesAtTypes = ts.combinePaths("node_modules", "@types");
+    function getPnpTypeRoots(currentDirectory) {
+        var pnpapi = getPnpApi(currentDirectory);
+        if (!pnpapi) {
+            return [];
+        }
+        // Some TS consumers pass relative paths that aren't normalized
+        currentDirectory = ts.sys.resolvePath(currentDirectory);
+        var currentPackage = pnpapi.findPackageLocator(currentDirectory + "/");
+        if (!currentPackage) {
+            return [];
+        }
+        var packageDependencies = pnpapi.getPackageInformation(currentPackage).packageDependencies;
+        var typeRoots = [];
+        for (var _i = 0, _a = Array.from(packageDependencies.entries()); _i < _a.length; _i++) {
+            var _b = _a[_i], name = _b[0], referencish = _b[1];
+            // eslint-disable-next-line no-null/no-null
+            if (name.startsWith(typesPackagePrefix) && referencish !== null) {
+                var dependencyLocator = pnpapi.getLocator(name, referencish);
+                var packageLocation = pnpapi.getPackageInformation(dependencyLocator).packageLocation;
+                typeRoots.push(ts.getDirectoryPath(packageLocation));
+            }
+        }
+        return typeRoots;
+    }
+    ts.getPnpTypeRoots = getPnpTypeRoots;
+    var typesPackagePrefix = "@types/";
+    function getDefaultTypeRoots(currentDirectory, host) {
+        var nmTypes = getNodeModulesTypeRoots(currentDirectory, host);
+        var pnpTypes = getPnpTypeRoots(currentDirectory);
+        if (nmTypes.length > 0 || pnpTypes.length > 0) {
+            return __spreadArray(__spreadArray([], nmTypes, true), pnpTypes, true);
+        }
+    }
     /**
      * @param {string | undefined} containingFile - file that contains type reference directive, can be undefined if containing file is unknown.
      * This is possible in case if resolution is performed for directives specified via 'types' parameter. In this case initial path for secondary lookups
@@ -41093,7 +41130,9 @@ var ts;
                 }
                 var result_4;
                 if (!ts.isExternalModuleNameRelative(typeReferenceDirectiveName)) {
-                    var searchResult = loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
+                    var searchResult = getPnpApi(initialLocationForSecondaryLookup)
+                        ? tryLoadModuleUsingPnpResolution(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState)
+                        : loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
                     result_4 = searchResult && searchResult.value;
                 }
                 else {
@@ -41648,9 +41687,12 @@ var ts;
                 if (traceEnabled) {
                     trace(host, ts.Diagnostics.Loading_module_0_from_node_modules_folder_target_file_type_1, moduleName, Extensions[extensions]);
                 }
-                var resolved_1 = loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
-                if (!resolved_1)
+                var resolved_1 = getPnpApi(containingDirectory)
+                    ? tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state)
+                    : loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
+                if (!resolved_1) {
                     return undefined;
+                }
                 var resolvedValue = resolved_1.value;
                 if (!compilerOptions.preserveSymlinks && resolvedValue && !resolvedValue.originalPath) {
                     var path = realPath(resolvedValue.path, host, traceEnabled);
@@ -41995,6 +42037,14 @@ var ts;
     }
     function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state) {
         var candidate = ts.normalizePath(ts.combinePaths(nodeModulesDirectory, moduleName));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, candidate, undefined, undefined);
+    }
+    function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state) {
+        var candidate = ts.normalizePath(ts.combinePaths(packageDirectory, rest));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, undefined, undefined, true, state, candidate, rest, packageDirectory);
+    }
+    function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, candidate, rest, packageDirectory) {
+        var _a;
         // First look for a nested package.json, as in `node_modules/foo/bar/package.json`.
         var packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
         if (packageInfo) {
@@ -42010,9 +42060,12 @@ var ts;
                 loadNodeModuleFromDirectoryWorker(extensions, candidate, onlyRecordFailures, state, packageInfo && packageInfo.packageJsonContent, packageInfo && packageInfo.versionPaths);
             return withPackageId(packageInfo, pathAndExtension);
         };
-        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageName;
+        if (rest === undefined)
+            (_a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest);
         if (rest !== "") { // If "rest" is empty, we just did this search above.
-            var packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
+            if (packageDirectory === undefined)
+                packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
             // Don't use a "types" or "main" from here because we're not loading the root, but a subdirectory -- just here for the packageId and path mappings.
             packageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state);
             if (packageInfo && packageInfo.versionPaths) {
@@ -42171,6 +42224,58 @@ var ts;
     function toSearchResult(value) {
         return value !== undefined ? { value: value } : undefined;
     }
+    /**
+     * We only allow PnP to be used as a resolution strategy if TypeScript
+     * itself is executed under a PnP runtime (and we only allow it to access
+     * the current PnP runtime, not any on the disk). This ensures that we
+     * don't execute potentially malicious code that didn't already have a
+     * chance to be executed (if we're running within the runtime, it means
+     * that the runtime has already been executed).
+     * @internal
+     */
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi(path + "/");
+    }
+    function loadPnpPackageResolution(packageName, containingDirectory) {
+        try {
+            var resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, containingDirectory + "/", { considerBuiltins: false });
+            return ts.normalizeSlashes(resolution).replace(/\/$/, '');
+        }
+        catch (_a) {
+            // Nothing to do
+        }
+    }
+    function loadPnpTypePackageResolution(packageName, containingDirectory) {
+        return loadPnpPackageResolution(getTypesPackageName(packageName), containingDirectory);
+    }
+    /* @internal */
+    function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state) {
+        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+        var packageFullResolution = packageResolution
+            ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state)
+            : undefined;
+        var resolved;
+        if (packageFullResolution) {
+            resolved = packageFullResolution;
+        }
+        else if (extensions === Extensions.TypeScript || extensions === Extensions.DtsOnly) {
+            var typePackageResolution = loadPnpTypePackageResolution(packageName, containingDirectory);
+            var typePackageFullResolution = typePackageResolution
+                ? loadModuleFromPnpResolution(Extensions.DtsOnly, typePackageResolution, rest, state)
+                : undefined;
+            if (typePackageFullResolution) {
+                resolved = typePackageFullResolution;
+            }
+        }
+        if (resolved) {
+            return toSearchResult(resolved);
+        }
+    }
 })(ts || (ts = {}));
 /* @internal */
 var ts;
@@ -110517,6 +110622,8 @@ var ts;
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Partial"] = 1] = "Partial";
         /** Reload completely by re-reading contents of config file from disk and updating program */
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Full"] = 2] = "Full";
+        /** Reload the resolutions */
+        ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Resolutions"] = 3] = "Resolutions";
     })(ConfigFileProgramReloadLevel = ts.ConfigFileProgramReloadLevel || (ts.ConfigFileProgramReloadLevel = {}));
     /**
      * Updates the map of shared extended config file watches with a new set of extended config files from a base config file of the project
@@ -117087,6 +117194,29 @@ var ts;
                 return undefined;
             }
             var parts = getNodeModulePathParts(path);
+            var packageName;
+            if (!parts && typeof process.versions.pnp !== "undefined") {
+                var pnpApi = require("pnpapi");
+                var locator = pnpApi.findPackageLocator(path);
+                // eslint-disable-next-line no-null/no-null
+                if (locator !== null) {
+                    var sourceLocator = pnpApi.findPackageLocator(sourceDirectory + "/");
+                    // Don't use the package name when the imported file is inside
+                    // the source directory (prefer a relative path instead)
+                    if (locator === sourceLocator) {
+                        return undefined;
+                    }
+                    var information = pnpApi.getPackageInformation(locator);
+                    packageName = locator.name;
+                    parts = {
+                        topLevelNodeModulesIndex: undefined,
+                        topLevelPackageNameIndex: undefined,
+                        // The last character from packageLocation is the trailing "/", we want to point to it
+                        packageRootIndex: information.packageLocation.length - 1,
+                        fileNameIndex: path.lastIndexOf("/"),
+                    };
+                }
+            }
             if (!parts) {
                 return undefined;
             }
@@ -117117,18 +117247,24 @@ var ts;
             if (isRedirect && !isPackageRootPath) {
                 return undefined;
             }
-            var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-            // Get a path that's relative to node_modules or the importing file's path
-            // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
-            var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-            if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-                return undefined;
+            // If PnP is enabled the node_modules entries we'll get will always be relevant even if they
+            // are located in a weird path apparently outside of the source directory
+            if (typeof process.versions.pnp === "undefined") {
+                var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+                // Get a path that's relative to node_modules or the importing file's path
+                // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
+                var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+                if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+                    return undefined;
+                }
             }
             // If the module was found in @types, get the actual Node package name
-            var nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-            var packageName = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+            var nodeModulesDirectoryName = typeof packageName !== "undefined"
+                ? packageName + moduleSpecifier.substring(parts.packageRootIndex)
+                : moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
+            var packageNameFromPath = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
             // For classic resolution, only allow importing from node_modules/@types, not other node_modules
-            return ts.getEmitModuleResolutionKind(options) !== ts.ModuleResolutionKind.NodeJs && packageName === nodeModulesDirectoryName ? undefined : packageName;
+            return ts.getEmitModuleResolutionKind(options) !== ts.ModuleResolutionKind.NodeJs && packageNameFromPath === nodeModulesDirectoryName ? undefined : packageNameFromPath;
             function tryDirectoryWithPackageJson(packageRootIndex) {
                 var packageRootPath = path.substring(0, packageRootIndex);
                 var packageJsonPath = ts.combinePaths(packageRootPath, "package.json");
@@ -117922,6 +118058,10 @@ var ts;
         if (configFileName) {
             configFileWatcher = watchFile(configFileName, scheduleProgramReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
         }
+        var pnpFileWatcher;
+        if (typeof process.versions.pnp !== "undefined") {
+            pnpFileWatcher = watchFile(require.resolve("pnpapi"), scheduleResolutionReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
+        }
         var compilerHost = ts.createCompilerHostFromProgramHost(host, function () { return compilerOptions; }, directoryStructureHost);
         ts.setGetSourceFileAsHashVersioned(compilerHost, host);
         // Members for CompilerHost
@@ -118000,6 +118140,10 @@ var ts;
                 configFileWatcher.close();
                 configFileWatcher = undefined;
             }
+            if (pnpFileWatcher) {
+                pnpFileWatcher.close();
+                pnpFileWatcher = undefined;
+            }
             extendedConfigCache === null || extendedConfigCache === void 0 ? void 0 : extendedConfigCache.clear();
             extendedConfigCache = undefined;
             if (sharedExtendedConfigFileWatchers) {
@@ -118032,7 +118176,8 @@ var ts;
         function getCurrentProgram() {
             return builderProgram && builderProgram.getProgramOrUndefined();
         }
-        function synchronizeProgram() {
+        function synchronizeProgram(forceAllFilesAsInvalidated) {
+            if (forceAllFilesAsInvalidated === void 0) { forceAllFilesAsInvalidated = false; }
             writeLog("Synchronizing program");
             clearInvalidateResolutionsOfFailedLookupLocations();
             var program = getCurrentBuilderProgram();
@@ -118043,7 +118188,7 @@ var ts;
                 }
             }
             // All resolutions are invalid if user provided resolutions
-            var hasInvalidatedResolution = resolutionCache.createHasInvalidatedResolution(userProvidedResolution || changesAffectResolution);
+            var hasInvalidatedResolution = resolutionCache.createHasInvalidatedResolution(userProvidedResolution || changesAffectResolution || forceAllFilesAsInvalidated);
             if (ts.isProgramUptoDate(getCurrentProgram(), rootFileNames, compilerOptions, getSourceVersion, fileExists, hasInvalidatedResolution, hasChangedAutomaticTypeDirectiveNames, getParsedCommandLine, projectReferences)) {
                 if (hasChangedConfigFileParsingErrors) {
                     builderProgram = createProgram(/*rootNames*/ undefined, /*options*/ undefined, compilerHost, builderProgram, configFileParsingDiagnostics, projectReferences);
@@ -118250,6 +118395,12 @@ var ts;
             reloadLevel = ts.ConfigFileProgramReloadLevel.Full;
             scheduleProgramUpdate();
         }
+        function scheduleResolutionReload() {
+            writeLog("Clearing resolutions");
+            resolutionCache.clear();
+            reloadLevel = ts.ConfigFileProgramReloadLevel.Resolutions;
+            scheduleProgramUpdate();
+        }
         function updateProgramWithWatchStatus() {
             timerToUpdateProgram = undefined;
             reportWatchDiagnostic(ts.Diagnostics.File_change_detected_Starting_incremental_compilation);
@@ -118265,6 +118416,10 @@ var ts;
                     ts.perfLogger.logStartUpdateProgram("FullConfigReload");
                     reloadConfigFile();
                     break;
+                case ts.ConfigFileProgramReloadLevel.Resolutions:
+                    ts.perfLogger.logStartUpdateProgram("SynchronizeProgramWithResolutions");
+                    synchronizeProgram(/*forceAllFilesAsInvalidated*/ true);
+                    break;
                 default:
                     ts.perfLogger.logStartUpdateProgram("SynchronizeProgram");
                     synchronizeProgram();
@@ -123686,7 +123841,7 @@ var ts;
      * Don't include something from a `node_modules` that isn't actually reachable by a global import.
      * A relative import to node_modules is usually a bad idea.
      */
-    function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+    function isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath) {
         // If it's in a `node_modules` but is not reachable from here via a global import, don't bother.
         var toNodeModules = ts.forEachAncestorDirectory(toPath, function (ancestor) { return ts.getBaseFileName(ancestor) === "node_modules" ? ancestor : undefined; });
         var toNodeModulesParent = toNodeModules && ts.getDirectoryPath(getCanonicalFileName(toNodeModules));
@@ -123694,6 +123849,33 @@ var ts;
             || ts.startsWith(getCanonicalFileName(fromPath), toNodeModulesParent)
             || (!!globalCachePath && ts.startsWith(getCanonicalFileName(globalCachePath), toNodeModulesParent));
     }
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi(path + "/");
+    }
+    function isImportablePathPnp(fromPath, toPath) {
+        var pnpApi = getPnpApi(fromPath);
+        var fromLocator = pnpApi.findPackageLocator(fromPath);
+        var toLocator = pnpApi.findPackageLocator(toPath);
+        // eslint-disable-next-line no-null/no-null
+        if (toLocator === null) {
+            return false;
+        }
+        var fromInfo = pnpApi.getPackageInformation(fromLocator);
+        var toReference = fromInfo.packageDependencies.get(toLocator.name);
+        return toReference === toLocator.reference;
+    }
+    function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+        if (getPnpApi(fromPath)) {
+            return isImportablePathPnp(fromPath, toPath);
+        }
+        else {
+            return isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath);
+        }
+    }
     function forEachExternalModuleToImportFrom(program, host, useAutoImportProvider, cb) {
         var _a, _b;
         forEachExternalModule(program.getTypeChecker(), program.getSourceFiles(), function (module, file) { return cb(module, file, program, /*isFromPackageJson*/ false); });
@@ -125507,6 +125689,7 @@ var ts;
              *          This includes all files that are found in node_modules/moduleName/ with acceptable file extensions
              */
             function getCompletionEntriesForNonRelativeModules(fragment, scriptPath, compilerOptions, host, typeChecker) {
+                var _a, _b;
                 var baseUrl = compilerOptions.baseUrl, paths = compilerOptions.paths;
                 var result = [];
                 var extensionOptions = getExtensionOptions(compilerOptions);
@@ -125519,8 +125702,8 @@ var ts;
                     }
                 }
                 var fragmentDirectory = getFragmentDirectory(fragment);
-                for (var _i = 0, _a = getAmbientModuleCompletions(fragment, fragmentDirectory, typeChecker); _i < _a.length; _i++) {
-                    var ambientName = _a[_i];
+                for (var _i = 0, _c = getAmbientModuleCompletions(fragment, fragmentDirectory, typeChecker); _i < _c.length; _i++) {
+                    var ambientName = _c[_i];
                     result.push(nameAndKind(ambientName, "external module name" /* externalModuleName */, /*extension*/ undefined));
                 }
                 getCompletionEntriesFromTypings(host, compilerOptions, scriptPath, fragmentDirectory, extensionOptions, result);
@@ -125535,18 +125718,36 @@ var ts;
                                 result.push(nameAndKind(moduleName, "external module name" /* externalModuleName */, /*extension*/ undefined));
                             }
                         };
-                        for (var _b = 0, _c = enumerateNodeModulesVisibleToScript(host, scriptPath); _b < _c.length; _b++) {
-                            var moduleName = _c[_b];
+                        for (var _d = 0, _e = enumerateNodeModulesVisibleToScript(host, scriptPath); _d < _e.length; _d++) {
+                            var moduleName = _e[_d];
                             _loop_3(moduleName);
                         }
                     }
                     if (!foundGlobal) {
-                        ts.forEachAncestorDirectory(scriptPath, function (ancestor) {
-                            var nodeModules = ts.combinePaths(ancestor, "node_modules");
-                            if (ts.tryDirectoryExists(host, nodeModules)) {
-                                getCompletionEntriesForDirectoryFragment(fragment, nodeModules, extensionOptions, host, /*exclude*/ undefined, result);
+                        var pnpapi = (_b = (_a = require("module")).findPnpApi) === null || _b === void 0 ? void 0 : _b.call(_a, scriptPath);
+                        if (pnpapi) {
+                            try {
+                                // Splits a require request into its components, or return null if the request is a file path
+                                var pathRegExp = /^(?![a-zA-Z]:[\\/]|\\\\|\.{0,2}(?:\/|$))((?:@[^/]+\/)?[^/]+)\/*(.*|)$/;
+                                var dependencyNameMatch = fragment.match(pathRegExp);
+                                if (dependencyNameMatch) {
+                                    var dependencyName = dependencyNameMatch[1], subPath = dependencyNameMatch[2];
+                                    var unqualified = pnpapi.resolveToUnqualified(dependencyName, scriptPath, { considerBuiltins: false });
+                                    if (unqualified) {
+                                        getCompletionEntriesForDirectoryFragment(subPath, ts.normalizePath(unqualified), extensionOptions, host, /*exclude*/ undefined, result);
+                                    }
+                                }
                             }
-                        });
+                            catch (_f) { }
+                        }
+                        else {
+                            ts.forEachAncestorDirectory(scriptPath, function (ancestor) {
+                                var nodeModules = ts.combinePaths(ancestor, "node_modules");
+                                if (ts.tryDirectoryExists(host, nodeModules)) {
+                                    getCompletionEntriesForDirectoryFragment(fragment, nodeModules, extensionOptions, host, /*exclude*/ undefined, result);
+                                }
+                            });
+                        }
                     }
                 }
                 return result;
@@ -125647,6 +125848,7 @@ var ts;
                 return addReplacementSpans(toComplete, range.pos + prefix.length, names);
             }
             function getCompletionEntriesFromTypings(host, options, scriptPath, fragmentDirectory, extensionOptions, result) {
+                var _a, _b;
                 if (result === void 0) { result = []; }
                 // Check for typings specified in compiler options
                 var seen = new ts.Map();
@@ -125655,11 +125857,19 @@ var ts;
                     var root = typeRoots_1[_i];
                     getCompletionEntriesFromDirectories(root);
                 }
-                // Also get all @types typings installed in visible node_modules directories
-                for (var _a = 0, _b = ts.findPackageJsons(scriptPath, host); _a < _b.length; _a++) {
-                    var packageJson = _b[_a];
-                    var typesDir = ts.combinePaths(ts.getDirectoryPath(packageJson), "node_modules/@types");
-                    getCompletionEntriesFromDirectories(typesDir);
+                if ((_b = (_a = require("module")).findPnpApi) === null || _b === void 0 ? void 0 : _b.call(_a, scriptPath)) {
+                    for (var _c = 0, _d = ts.getPnpTypeRoots(scriptPath); _c < _d.length; _c++) {
+                        var root = _d[_c];
+                        getCompletionEntriesFromDirectories(root);
+                    }
+                }
+                else {
+                    // Also get all @types typings installed in visible node_modules directories
+                    for (var _e = 0, _f = ts.findPackageJsons(scriptPath, host); _e < _f.length; _e++) {
+                        var packageJson = _f[_e];
+                        var typesDir = ts.combinePaths(ts.getDirectoryPath(packageJson), "node_modules/@types");
+                        getCompletionEntriesFromDirectories(typesDir);
+                    }
                 }
                 return result;
                 function getCompletionEntriesFromDirectories(directory) {
@@ -153846,9 +154056,9 @@ var ts;
                 if (isTopLevelDeclarationStatement(statement) &&
                     !isExported(sourceFile, statement, useEs6Exports) &&
                     forEachTopLevelDeclaration(statement, function (d) { return needExport.has(ts.Debug.checkDefined(d.symbol)); })) {
-                    var exports = addExport(statement, useEs6Exports);
-                    if (exports)
-                        return exports;
+                    var exports_1 = addExport(statement, useEs6Exports);
+                    if (exports_1)
+                        return exports_1;
                 }
                 return statement;
             });
@@ -162653,6 +162863,37 @@ var ts;
                 return this.projectReferences;
             };
             ConfiguredProject.prototype.updateReferences = function (refs) {
+                // @ts-ignore
+                if (process.versions.pnp) {
+                    // With Plug'n'Play, dependencies that list peer dependencies
+                    // are "virtualized": they are resolved to a unique (virtual)
+                    // path that the underlying filesystem layer then resolve back
+                    // to the original location.
+                    //
+                    // When a workspace depends on another workspace with peer
+                    // dependencies, this other workspace will thus be resolved to
+                    // a unique path that won't match what the initial project has
+                    // listed in its `references` field, and TS thus won't leverage
+                    // the reference at all.
+                    //
+                    // To avoid that, we compute here the virtualized paths for the
+                    // user-provided references in our references by directly querying
+                    // the PnP API. This way users don't have to know the virtual paths,
+                    // but we still support them just fine even through references.
+                    var pnpApi_1 = require("pnpapi");
+                    var basePath_1 = this.getCurrentDirectory();
+                    var getPnpPath_1 = function (path) {
+                        try {
+                            var targetLocator = pnpApi_1.findPackageLocator(path + "/");
+                            return pnpApi_1.resolveToUnqualified(targetLocator.name, basePath_1 + "/");
+                        }
+                        catch (_a) {
+                            // something went wrong with the resolution, try not to fail
+                            return path;
+                        }
+                    };
+                    refs = refs === null || refs === void 0 ? void 0 : refs.map(function (r) { return (__assign(__assign({}, r), { path: getPnpPath_1(r.path) })); });
+                }
                 this.projectReferences = refs;
                 this.potentialProjectReferences = undefined;
             };
@@ -163269,6 +163510,7 @@ var ts;
                         watchDirectory: ts.returnNoopFileWatcher,
                     } :
                     ts.getWatchFactory(this.host, watchLogLevel, log, getDetailWatchInfo);
+                this.pnpWatcher = this.watchPnpFile();
             }
             ProjectService.prototype.toPath = function (fileName) {
                 return ts.toPath(fileName, this.currentDirectory, this.toCanonicalFileName);
@@ -165121,7 +165363,7 @@ var ts;
             };
             ProjectService.prototype.setHostConfiguration = function (args) {
                 var _this = this;
-                var _a;
+                var _a, _b;
                 if (args.file) {
                     var info = this.getScriptInfoForNormalizedPath(server.toNormalizedPath(args.file));
                     if (info) {
@@ -165139,7 +165381,7 @@ var ts;
                         this.logger.info("Format host information updated");
                     }
                     if (args.preferences) {
-                        var _b = this.hostConfiguration.preferences, lazyConfiguredProjectsFromExternalProject = _b.lazyConfiguredProjectsFromExternalProject, includePackageJsonAutoImports = _b.includePackageJsonAutoImports;
+                        var _c = this.hostConfiguration.preferences, lazyConfiguredProjectsFromExternalProject = _c.lazyConfiguredProjectsFromExternalProject, includePackageJsonAutoImports = _c.includePackageJsonAutoImports;
                         this.hostConfiguration.preferences = __assign(__assign({}, this.hostConfiguration.preferences), args.preferences);
                         if (lazyConfiguredProjectsFromExternalProject && !this.hostConfiguration.preferences.lazyConfiguredProjectsFromExternalProject) {
                             // Load configured projects for external projects that are pending reload
@@ -165165,6 +165407,8 @@ var ts;
                     if (args.watchOptions) {
                         this.hostConfiguration.watchOptions = (_a = convertWatchOptions(args.watchOptions)) === null || _a === void 0 ? void 0 : _a.watchOptions;
                         this.logger.info("Host watch options changed to " + JSON.stringify(this.hostConfiguration.watchOptions) + ", it will be take effect for next watches.");
+                        (_b = this.pnpWatcher) === null || _b === void 0 ? void 0 : _b.close();
+                        this.watchPnpFile();
                     }
                 }
             };
@@ -166159,6 +166403,25 @@ var ts;
                 });
             };
             /*@internal*/
+            ProjectService.prototype.watchPnpFile = function () {
+                var _this = this;
+                if (typeof process.versions.pnp === "undefined") {
+                    return;
+                }
+                var pnpFileName = require.resolve("pnpapi");
+                return this.watchFactory.watchFile(pnpFileName, function () {
+                    _this.forEachProject(function (project) {
+                        for (var _i = 0, _a = project.getScriptInfos(); _i < _a.length; _i++) {
+                            var info = _a[_i];
+                            project.resolutionCache.invalidateResolutionOfFile(info.path);
+                        }
+                        project.markAsDirty();
+                        updateProjectIfDirty(project);
+                    });
+                    _this.delayEnsureProjectForOpenFiles();
+                }, ts.PollingInterval.Low, this.hostConfiguration.watchOptions, ts.WatchType.ConfigFile);
+            };
+            /*@internal*/
             ProjectService.prototype.watchPackageJsonFile = function (path) {
                 var _this = this;
                 var watchers = this.packageJsonFilesMap || (this.packageJsonFilesMap = new ts.Map());
@@ -171030,6 +171293,9 @@ var ts;
                         }
                         try {
                             var args = [ts.combinePaths(__dirname, "watchGuard.js"), path];
+                            if (typeof process.versions.pnp !== "undefined") {
+                                args.unshift('-r', require.resolve('pnpapi'));
+                            }
                             if (logger.hasLevel(server.LogLevel.verbose)) {
                                 logger.info("Starting " + process.execPath + " with args:" + server.stringifyIndented(args));
                             }
@@ -171290,6 +171556,9 @@ var ts;
                             break;
                         }
                     }
+                    if (typeof process.versions.pnp !== "undefined") {
+                        execArgv.unshift('-r', require.resolve('pnpapi'));
+                    }
                     this.installer = childProcess.fork(ts.combinePaths(__dirname, "typingsInstaller.js"), args, { execArgv: execArgv });
                     this.installer.on("message", function (m) { return _this.handleMessage(m); });
                     // We have to schedule this event to the next tick
diff --git a/lib/tsserverlibrary.d.ts b/lib/tsserverlibrary.d.ts
index 8a80179e8..f4953df32 100644
semver exclusivity >=4.4
--- a/lib/tsserverlibrary.d.ts
+++ b/lib/tsserverlibrary.d.ts
@@ -4759,6 +4759,7 @@ declare namespace ts {
 }
 declare namespace ts {
     export function getEffectiveTypeRoots(options: CompilerOptions, host: GetEffectiveTypeRootsHost): string[] | undefined;
+    export function getPnpTypeRoots(currentDirectory: string): string[];
     /**
      * @param {string | undefined} containingFile - file that contains type reference directive, can be undefined if containing file is unknown.
      * This is possible in case if resolution is performed for directives specified via 'types' parameter. In this case initial path for secondary lookups
diff --git a/lib/tsserverlibrary.js b/lib/tsserverlibrary.js
index 47d329d5e..762c02cbf 100644
semver exclusivity >=4.4
--- a/lib/tsserverlibrary.js
+++ b/lib/tsserverlibrary.js
@@ -7652,6 +7652,11 @@ var ts;
                     : new Buffer(input, encoding);
             }
             function isFileSystemCaseSensitive() {
+                // The PnP runtime is always case-sensitive
+                // @ts-ignore
+                if (process.versions.pnp) {
+                    return true;
+                }
                 // win32\win64 are case insensitive platforms
                 if (platform === "win32" || platform === "win64") {
                     return false;
@@ -41156,24 +41161,56 @@ var ts;
     ts.getEffectiveTypeRoots = getEffectiveTypeRoots;
     /**
      * Returns the path to every node_modules/@types directory from some ancestor directory.
-     * Returns undefined if there are none.
      */
-    function getDefaultTypeRoots(currentDirectory, host) {
+    function getNodeModulesTypeRoots(currentDirectory, host) {
         if (!host.directoryExists) {
             return [ts.combinePaths(currentDirectory, nodeModulesAtTypes)];
             // And if it doesn't exist, tough.
         }
-        var typeRoots;
+        var typeRoots = [];
         ts.forEachAncestorDirectory(ts.normalizePath(currentDirectory), function (directory) {
             var atTypes = ts.combinePaths(directory, nodeModulesAtTypes);
             if (host.directoryExists(atTypes)) {
-                (typeRoots || (typeRoots = [])).push(atTypes);
+                typeRoots.push(atTypes);
             }
             return undefined;
         });
         return typeRoots;
     }
     var nodeModulesAtTypes = ts.combinePaths("node_modules", "@types");
+    function getPnpTypeRoots(currentDirectory) {
+        var pnpapi = getPnpApi(currentDirectory);
+        if (!pnpapi) {
+            return [];
+        }
+        // Some TS consumers pass relative paths that aren't normalized
+        currentDirectory = ts.sys.resolvePath(currentDirectory);
+        var currentPackage = pnpapi.findPackageLocator(currentDirectory + "/");
+        if (!currentPackage) {
+            return [];
+        }
+        var packageDependencies = pnpapi.getPackageInformation(currentPackage).packageDependencies;
+        var typeRoots = [];
+        for (var _i = 0, _a = Array.from(packageDependencies.entries()); _i < _a.length; _i++) {
+            var _b = _a[_i], name = _b[0], referencish = _b[1];
+            // eslint-disable-next-line no-null/no-null
+            if (name.startsWith(typesPackagePrefix) && referencish !== null) {
+                var dependencyLocator = pnpapi.getLocator(name, referencish);
+                var packageLocation = pnpapi.getPackageInformation(dependencyLocator).packageLocation;
+                typeRoots.push(ts.getDirectoryPath(packageLocation));
+            }
+        }
+        return typeRoots;
+    }
+    ts.getPnpTypeRoots = getPnpTypeRoots;
+    var typesPackagePrefix = "@types/";
+    function getDefaultTypeRoots(currentDirectory, host) {
+        var nmTypes = getNodeModulesTypeRoots(currentDirectory, host);
+        var pnpTypes = getPnpTypeRoots(currentDirectory);
+        if (nmTypes.length > 0 || pnpTypes.length > 0) {
+            return __spreadArray(__spreadArray([], nmTypes, true), pnpTypes, true);
+        }
+    }
     /**
      * @param {string | undefined} containingFile - file that contains type reference directive, can be undefined if containing file is unknown.
      * This is possible in case if resolution is performed for directives specified via 'types' parameter. In this case initial path for secondary lookups
@@ -41287,7 +41324,9 @@ var ts;
                 }
                 var result_4;
                 if (!ts.isExternalModuleNameRelative(typeReferenceDirectiveName)) {
-                    var searchResult = loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
+                    var searchResult = getPnpApi(initialLocationForSecondaryLookup)
+                        ? tryLoadModuleUsingPnpResolution(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState)
+                        : loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
                     result_4 = searchResult && searchResult.value;
                 }
                 else {
@@ -41842,9 +41881,12 @@ var ts;
                 if (traceEnabled) {
                     trace(host, ts.Diagnostics.Loading_module_0_from_node_modules_folder_target_file_type_1, moduleName, Extensions[extensions]);
                 }
-                var resolved_1 = loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
-                if (!resolved_1)
+                var resolved_1 = getPnpApi(containingDirectory)
+                    ? tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state)
+                    : loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
+                if (!resolved_1) {
                     return undefined;
+                }
                 var resolvedValue = resolved_1.value;
                 if (!compilerOptions.preserveSymlinks && resolvedValue && !resolvedValue.originalPath) {
                     var path = realPath(resolvedValue.path, host, traceEnabled);
@@ -42189,6 +42231,14 @@ var ts;
     }
     function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state) {
         var candidate = ts.normalizePath(ts.combinePaths(nodeModulesDirectory, moduleName));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, candidate, undefined, undefined);
+    }
+    function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state) {
+        var candidate = ts.normalizePath(ts.combinePaths(packageDirectory, rest));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, undefined, undefined, true, state, candidate, rest, packageDirectory);
+    }
+    function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, candidate, rest, packageDirectory) {
+        var _a;
         // First look for a nested package.json, as in `node_modules/foo/bar/package.json`.
         var packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
         if (packageInfo) {
@@ -42204,9 +42254,12 @@ var ts;
                 loadNodeModuleFromDirectoryWorker(extensions, candidate, onlyRecordFailures, state, packageInfo && packageInfo.packageJsonContent, packageInfo && packageInfo.versionPaths);
             return withPackageId(packageInfo, pathAndExtension);
         };
-        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageName;
+        if (rest === undefined)
+            (_a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest);
         if (rest !== "") { // If "rest" is empty, we just did this search above.
-            var packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
+            if (packageDirectory === undefined)
+                packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
             // Don't use a "types" or "main" from here because we're not loading the root, but a subdirectory -- just here for the packageId and path mappings.
             packageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state);
             if (packageInfo && packageInfo.versionPaths) {
@@ -42365,6 +42418,58 @@ var ts;
     function toSearchResult(value) {
         return value !== undefined ? { value: value } : undefined;
     }
+    /**
+     * We only allow PnP to be used as a resolution strategy if TypeScript
+     * itself is executed under a PnP runtime (and we only allow it to access
+     * the current PnP runtime, not any on the disk). This ensures that we
+     * don't execute potentially malicious code that didn't already have a
+     * chance to be executed (if we're running within the runtime, it means
+     * that the runtime has already been executed).
+     * @internal
+     */
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi(path + "/");
+    }
+    function loadPnpPackageResolution(packageName, containingDirectory) {
+        try {
+            var resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, containingDirectory + "/", { considerBuiltins: false });
+            return ts.normalizeSlashes(resolution).replace(/\/$/, '');
+        }
+        catch (_a) {
+            // Nothing to do
+        }
+    }
+    function loadPnpTypePackageResolution(packageName, containingDirectory) {
+        return loadPnpPackageResolution(getTypesPackageName(packageName), containingDirectory);
+    }
+    /* @internal */
+    function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state) {
+        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+        var packageFullResolution = packageResolution
+            ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state)
+            : undefined;
+        var resolved;
+        if (packageFullResolution) {
+            resolved = packageFullResolution;
+        }
+        else if (extensions === Extensions.TypeScript || extensions === Extensions.DtsOnly) {
+            var typePackageResolution = loadPnpTypePackageResolution(packageName, containingDirectory);
+            var typePackageFullResolution = typePackageResolution
+                ? loadModuleFromPnpResolution(Extensions.DtsOnly, typePackageResolution, rest, state)
+                : undefined;
+            if (typePackageFullResolution) {
+                resolved = typePackageFullResolution;
+            }
+        }
+        if (resolved) {
+            return toSearchResult(resolved);
+        }
+    }
 })(ts || (ts = {}));
 /* @internal */
 var ts;
@@ -110711,6 +110816,8 @@ var ts;
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Partial"] = 1] = "Partial";
         /** Reload completely by re-reading contents of config file from disk and updating program */
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Full"] = 2] = "Full";
+        /** Reload the resolutions */
+        ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Resolutions"] = 3] = "Resolutions";
     })(ConfigFileProgramReloadLevel = ts.ConfigFileProgramReloadLevel || (ts.ConfigFileProgramReloadLevel = {}));
     /**
      * Updates the map of shared extended config file watches with a new set of extended config files from a base config file of the project
@@ -117281,6 +117388,29 @@ var ts;
                 return undefined;
             }
             var parts = getNodeModulePathParts(path);
+            var packageName;
+            if (!parts && typeof process.versions.pnp !== "undefined") {
+                var pnpApi = require("pnpapi");
+                var locator = pnpApi.findPackageLocator(path);
+                // eslint-disable-next-line no-null/no-null
+                if (locator !== null) {
+                    var sourceLocator = pnpApi.findPackageLocator(sourceDirectory + "/");
+                    // Don't use the package name when the imported file is inside
+                    // the source directory (prefer a relative path instead)
+                    if (locator === sourceLocator) {
+                        return undefined;
+                    }
+                    var information = pnpApi.getPackageInformation(locator);
+                    packageName = locator.name;
+                    parts = {
+                        topLevelNodeModulesIndex: undefined,
+                        topLevelPackageNameIndex: undefined,
+                        // The last character from packageLocation is the trailing "/", we want to point to it
+                        packageRootIndex: information.packageLocation.length - 1,
+                        fileNameIndex: path.lastIndexOf("/"),
+                    };
+                }
+            }
             if (!parts) {
                 return undefined;
             }
@@ -117311,18 +117441,24 @@ var ts;
             if (isRedirect && !isPackageRootPath) {
                 return undefined;
             }
-            var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-            // Get a path that's relative to node_modules or the importing file's path
-            // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
-            var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-            if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-                return undefined;
+            // If PnP is enabled the node_modules entries we'll get will always be relevant even if they
+            // are located in a weird path apparently outside of the source directory
+            if (typeof process.versions.pnp === "undefined") {
+                var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+                // Get a path that's relative to node_modules or the importing file's path
+                // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
+                var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+                if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+                    return undefined;
+                }
             }
             // If the module was found in @types, get the actual Node package name
-            var nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-            var packageName = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+            var nodeModulesDirectoryName = typeof packageName !== "undefined"
+                ? packageName + moduleSpecifier.substring(parts.packageRootIndex)
+                : moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
+            var packageNameFromPath = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
             // For classic resolution, only allow importing from node_modules/@types, not other node_modules
-            return ts.getEmitModuleResolutionKind(options) !== ts.ModuleResolutionKind.NodeJs && packageName === nodeModulesDirectoryName ? undefined : packageName;
+            return ts.getEmitModuleResolutionKind(options) !== ts.ModuleResolutionKind.NodeJs && packageNameFromPath === nodeModulesDirectoryName ? undefined : packageNameFromPath;
             function tryDirectoryWithPackageJson(packageRootIndex) {
                 var packageRootPath = path.substring(0, packageRootIndex);
                 var packageJsonPath = ts.combinePaths(packageRootPath, "package.json");
@@ -118116,6 +118252,10 @@ var ts;
         if (configFileName) {
             configFileWatcher = watchFile(configFileName, scheduleProgramReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
         }
+        var pnpFileWatcher;
+        if (typeof process.versions.pnp !== "undefined") {
+            pnpFileWatcher = watchFile(require.resolve("pnpapi"), scheduleResolutionReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
+        }
         var compilerHost = ts.createCompilerHostFromProgramHost(host, function () { return compilerOptions; }, directoryStructureHost);
         ts.setGetSourceFileAsHashVersioned(compilerHost, host);
         // Members for CompilerHost
@@ -118194,6 +118334,10 @@ var ts;
                 configFileWatcher.close();
                 configFileWatcher = undefined;
             }
+            if (pnpFileWatcher) {
+                pnpFileWatcher.close();
+                pnpFileWatcher = undefined;
+            }
             extendedConfigCache === null || extendedConfigCache === void 0 ? void 0 : extendedConfigCache.clear();
             extendedConfigCache = undefined;
             if (sharedExtendedConfigFileWatchers) {
@@ -118226,7 +118370,8 @@ var ts;
         function getCurrentProgram() {
             return builderProgram && builderProgram.getProgramOrUndefined();
         }
-        function synchronizeProgram() {
+        function synchronizeProgram(forceAllFilesAsInvalidated) {
+            if (forceAllFilesAsInvalidated === void 0) { forceAllFilesAsInvalidated = false; }
             writeLog("Synchronizing program");
             clearInvalidateResolutionsOfFailedLookupLocations();
             var program = getCurrentBuilderProgram();
@@ -118237,7 +118382,7 @@ var ts;
                 }
             }
             // All resolutions are invalid if user provided resolutions
-            var hasInvalidatedResolution = resolutionCache.createHasInvalidatedResolution(userProvidedResolution || changesAffectResolution);
+            var hasInvalidatedResolution = resolutionCache.createHasInvalidatedResolution(userProvidedResolution || changesAffectResolution || forceAllFilesAsInvalidated);
             if (ts.isProgramUptoDate(getCurrentProgram(), rootFileNames, compilerOptions, getSourceVersion, fileExists, hasInvalidatedResolution, hasChangedAutomaticTypeDirectiveNames, getParsedCommandLine, projectReferences)) {
                 if (hasChangedConfigFileParsingErrors) {
                     builderProgram = createProgram(/*rootNames*/ undefined, /*options*/ undefined, compilerHost, builderProgram, configFileParsingDiagnostics, projectReferences);
@@ -118444,6 +118589,12 @@ var ts;
             reloadLevel = ts.ConfigFileProgramReloadLevel.Full;
             scheduleProgramUpdate();
         }
+        function scheduleResolutionReload() {
+            writeLog("Clearing resolutions");
+            resolutionCache.clear();
+            reloadLevel = ts.ConfigFileProgramReloadLevel.Resolutions;
+            scheduleProgramUpdate();
+        }
         function updateProgramWithWatchStatus() {
             timerToUpdateProgram = undefined;
             reportWatchDiagnostic(ts.Diagnostics.File_change_detected_Starting_incremental_compilation);
@@ -118459,6 +118610,10 @@ var ts;
                     ts.perfLogger.logStartUpdateProgram("FullConfigReload");
                     reloadConfigFile();
                     break;
+                case ts.ConfigFileProgramReloadLevel.Resolutions:
+                    ts.perfLogger.logStartUpdateProgram("SynchronizeProgramWithResolutions");
+                    synchronizeProgram(/*forceAllFilesAsInvalidated*/ true);
+                    break;
                 default:
                     ts.perfLogger.logStartUpdateProgram("SynchronizeProgram");
                     synchronizeProgram();
@@ -124268,7 +124423,7 @@ var ts;
      * Don't include something from a `node_modules` that isn't actually reachable by a global import.
      * A relative import to node_modules is usually a bad idea.
      */
-    function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+    function isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath) {
         // If it's in a `node_modules` but is not reachable from here via a global import, don't bother.
         var toNodeModules = ts.forEachAncestorDirectory(toPath, function (ancestor) { return ts.getBaseFileName(ancestor) === "node_modules" ? ancestor : undefined; });
         var toNodeModulesParent = toNodeModules && ts.getDirectoryPath(getCanonicalFileName(toNodeModules));
@@ -124276,6 +124431,33 @@ var ts;
             || ts.startsWith(getCanonicalFileName(fromPath), toNodeModulesParent)
             || (!!globalCachePath && ts.startsWith(getCanonicalFileName(globalCachePath), toNodeModulesParent));
     }
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi(path + "/");
+    }
+    function isImportablePathPnp(fromPath, toPath) {
+        var pnpApi = getPnpApi(fromPath);
+        var fromLocator = pnpApi.findPackageLocator(fromPath);
+        var toLocator = pnpApi.findPackageLocator(toPath);
+        // eslint-disable-next-line no-null/no-null
+        if (toLocator === null) {
+            return false;
+        }
+        var fromInfo = pnpApi.getPackageInformation(fromLocator);
+        var toReference = fromInfo.packageDependencies.get(toLocator.name);
+        return toReference === toLocator.reference;
+    }
+    function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+        if (getPnpApi(fromPath)) {
+            return isImportablePathPnp(fromPath, toPath);
+        }
+        else {
+            return isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath);
+        }
+    }
     function forEachExternalModuleToImportFrom(program, host, useAutoImportProvider, cb) {
         var _a, _b;
         forEachExternalModule(program.getTypeChecker(), program.getSourceFiles(), function (module, file) { return cb(module, file, program, /*isFromPackageJson*/ false); });
@@ -126089,6 +126271,7 @@ var ts;
              *          This includes all files that are found in node_modules/moduleName/ with acceptable file extensions
              */
             function getCompletionEntriesForNonRelativeModules(fragment, scriptPath, compilerOptions, host, typeChecker) {
+                var _a, _b;
                 var baseUrl = compilerOptions.baseUrl, paths = compilerOptions.paths;
                 var result = [];
                 var extensionOptions = getExtensionOptions(compilerOptions);
@@ -126101,8 +126284,8 @@ var ts;
                     }
                 }
                 var fragmentDirectory = getFragmentDirectory(fragment);
-                for (var _i = 0, _a = getAmbientModuleCompletions(fragment, fragmentDirectory, typeChecker); _i < _a.length; _i++) {
-                    var ambientName = _a[_i];
+                for (var _i = 0, _c = getAmbientModuleCompletions(fragment, fragmentDirectory, typeChecker); _i < _c.length; _i++) {
+                    var ambientName = _c[_i];
                     result.push(nameAndKind(ambientName, "external module name" /* externalModuleName */, /*extension*/ undefined));
                 }
                 getCompletionEntriesFromTypings(host, compilerOptions, scriptPath, fragmentDirectory, extensionOptions, result);
@@ -126117,18 +126300,36 @@ var ts;
                                 result.push(nameAndKind(moduleName, "external module name" /* externalModuleName */, /*extension*/ undefined));
                             }
                         };
-                        for (var _b = 0, _c = enumerateNodeModulesVisibleToScript(host, scriptPath); _b < _c.length; _b++) {
-                            var moduleName = _c[_b];
+                        for (var _d = 0, _e = enumerateNodeModulesVisibleToScript(host, scriptPath); _d < _e.length; _d++) {
+                            var moduleName = _e[_d];
                             _loop_3(moduleName);
                         }
                     }
                     if (!foundGlobal) {
-                        ts.forEachAncestorDirectory(scriptPath, function (ancestor) {
-                            var nodeModules = ts.combinePaths(ancestor, "node_modules");
-                            if (ts.tryDirectoryExists(host, nodeModules)) {
-                                getCompletionEntriesForDirectoryFragment(fragment, nodeModules, extensionOptions, host, /*exclude*/ undefined, result);
+                        var pnpapi = (_b = (_a = require("module")).findPnpApi) === null || _b === void 0 ? void 0 : _b.call(_a, scriptPath);
+                        if (pnpapi) {
+                            try {
+                                // Splits a require request into its components, or return null if the request is a file path
+                                var pathRegExp = /^(?![a-zA-Z]:[\\/]|\\\\|\.{0,2}(?:\/|$))((?:@[^/]+\/)?[^/]+)\/*(.*|)$/;
+                                var dependencyNameMatch = fragment.match(pathRegExp);
+                                if (dependencyNameMatch) {
+                                    var dependencyName = dependencyNameMatch[1], subPath = dependencyNameMatch[2];
+                                    var unqualified = pnpapi.resolveToUnqualified(dependencyName, scriptPath, { considerBuiltins: false });
+                                    if (unqualified) {
+                                        getCompletionEntriesForDirectoryFragment(subPath, ts.normalizePath(unqualified), extensionOptions, host, /*exclude*/ undefined, result);
+                                    }
+                                }
                             }
-                        });
+                            catch (_f) { }
+                        }
+                        else {
+                            ts.forEachAncestorDirectory(scriptPath, function (ancestor) {
+                                var nodeModules = ts.combinePaths(ancestor, "node_modules");
+                                if (ts.tryDirectoryExists(host, nodeModules)) {
+                                    getCompletionEntriesForDirectoryFragment(fragment, nodeModules, extensionOptions, host, /*exclude*/ undefined, result);
+                                }
+                            });
+                        }
                     }
                 }
                 return result;
@@ -126229,6 +126430,7 @@ var ts;
                 return addReplacementSpans(toComplete, range.pos + prefix.length, names);
             }
             function getCompletionEntriesFromTypings(host, options, scriptPath, fragmentDirectory, extensionOptions, result) {
+                var _a, _b;
                 if (result === void 0) { result = []; }
                 // Check for typings specified in compiler options
                 var seen = new ts.Map();
@@ -126237,11 +126439,19 @@ var ts;
                     var root = typeRoots_1[_i];
                     getCompletionEntriesFromDirectories(root);
                 }
-                // Also get all @types typings installed in visible node_modules directories
-                for (var _a = 0, _b = ts.findPackageJsons(scriptPath, host); _a < _b.length; _a++) {
-                    var packageJson = _b[_a];
-                    var typesDir = ts.combinePaths(ts.getDirectoryPath(packageJson), "node_modules/@types");
-                    getCompletionEntriesFromDirectories(typesDir);
+                if ((_b = (_a = require("module")).findPnpApi) === null || _b === void 0 ? void 0 : _b.call(_a, scriptPath)) {
+                    for (var _c = 0, _d = ts.getPnpTypeRoots(scriptPath); _c < _d.length; _c++) {
+                        var root = _d[_c];
+                        getCompletionEntriesFromDirectories(root);
+                    }
+                }
+                else {
+                    // Also get all @types typings installed in visible node_modules directories
+                    for (var _e = 0, _f = ts.findPackageJsons(scriptPath, host); _e < _f.length; _e++) {
+                        var packageJson = _f[_e];
+                        var typesDir = ts.combinePaths(ts.getDirectoryPath(packageJson), "node_modules/@types");
+                        getCompletionEntriesFromDirectories(typesDir);
+                    }
                 }
                 return result;
                 function getCompletionEntriesFromDirectories(directory) {
@@ -154428,9 +154638,9 @@ var ts;
                 if (isTopLevelDeclarationStatement(statement) &&
                     !isExported(sourceFile, statement, useEs6Exports) &&
                     forEachTopLevelDeclaration(statement, function (d) { return needExport.has(ts.Debug.checkDefined(d.symbol)); })) {
-                    var exports = addExport(statement, useEs6Exports);
-                    if (exports)
-                        return exports;
+                    var exports_1 = addExport(statement, useEs6Exports);
+                    if (exports_1)
+                        return exports_1;
                 }
                 return statement;
             });
@@ -162847,6 +163057,37 @@ var ts;
                 return this.projectReferences;
             };
             ConfiguredProject.prototype.updateReferences = function (refs) {
+                // @ts-ignore
+                if (process.versions.pnp) {
+                    // With Plug'n'Play, dependencies that list peer dependencies
+                    // are "virtualized": they are resolved to a unique (virtual)
+                    // path that the underlying filesystem layer then resolve back
+                    // to the original location.
+                    //
+                    // When a workspace depends on another workspace with peer
+                    // dependencies, this other workspace will thus be resolved to
+                    // a unique path that won't match what the initial project has
+                    // listed in its `references` field, and TS thus won't leverage
+                    // the reference at all.
+                    //
+                    // To avoid that, we compute here the virtualized paths for the
+                    // user-provided references in our references by directly querying
+                    // the PnP API. This way users don't have to know the virtual paths,
+                    // but we still support them just fine even through references.
+                    var pnpApi_1 = require("pnpapi");
+                    var basePath_1 = this.getCurrentDirectory();
+                    var getPnpPath_1 = function (path) {
+                        try {
+                            var targetLocator = pnpApi_1.findPackageLocator(path + "/");
+                            return pnpApi_1.resolveToUnqualified(targetLocator.name, basePath_1 + "/");
+                        }
+                        catch (_a) {
+                            // something went wrong with the resolution, try not to fail
+                            return path;
+                        }
+                    };
+                    refs = refs === null || refs === void 0 ? void 0 : refs.map(function (r) { return (__assign(__assign({}, r), { path: getPnpPath_1(r.path) })); });
+                }
                 this.projectReferences = refs;
                 this.potentialProjectReferences = undefined;
             };
@@ -163463,6 +163704,7 @@ var ts;
                         watchDirectory: ts.returnNoopFileWatcher,
                     } :
                     ts.getWatchFactory(this.host, watchLogLevel, log, getDetailWatchInfo);
+                this.pnpWatcher = this.watchPnpFile();
             }
             ProjectService.prototype.toPath = function (fileName) {
                 return ts.toPath(fileName, this.currentDirectory, this.toCanonicalFileName);
@@ -165315,7 +165557,7 @@ var ts;
             };
             ProjectService.prototype.setHostConfiguration = function (args) {
                 var _this = this;
-                var _a;
+                var _a, _b;
                 if (args.file) {
                     var info = this.getScriptInfoForNormalizedPath(server.toNormalizedPath(args.file));
                     if (info) {
@@ -165333,7 +165575,7 @@ var ts;
                         this.logger.info("Format host information updated");
                     }
                     if (args.preferences) {
-                        var _b = this.hostConfiguration.preferences, lazyConfiguredProjectsFromExternalProject = _b.lazyConfiguredProjectsFromExternalProject, includePackageJsonAutoImports = _b.includePackageJsonAutoImports;
+                        var _c = this.hostConfiguration.preferences, lazyConfiguredProjectsFromExternalProject = _c.lazyConfiguredProjectsFromExternalProject, includePackageJsonAutoImports = _c.includePackageJsonAutoImports;
                         this.hostConfiguration.preferences = __assign(__assign({}, this.hostConfiguration.preferences), args.preferences);
                         if (lazyConfiguredProjectsFromExternalProject && !this.hostConfiguration.preferences.lazyConfiguredProjectsFromExternalProject) {
                             // Load configured projects for external projects that are pending reload
@@ -165359,6 +165601,8 @@ var ts;
                     if (args.watchOptions) {
                         this.hostConfiguration.watchOptions = (_a = convertWatchOptions(args.watchOptions)) === null || _a === void 0 ? void 0 : _a.watchOptions;
                         this.logger.info("Host watch options changed to " + JSON.stringify(this.hostConfiguration.watchOptions) + ", it will be take effect for next watches.");
+                        (_b = this.pnpWatcher) === null || _b === void 0 ? void 0 : _b.close();
+                        this.watchPnpFile();
                     }
                 }
             };
@@ -166353,6 +166597,25 @@ var ts;
                 });
             };
             /*@internal*/
+            ProjectService.prototype.watchPnpFile = function () {
+                var _this = this;
+                if (typeof process.versions.pnp === "undefined") {
+                    return;
+                }
+                var pnpFileName = require.resolve("pnpapi");
+                return this.watchFactory.watchFile(pnpFileName, function () {
+                    _this.forEachProject(function (project) {
+                        for (var _i = 0, _a = project.getScriptInfos(); _i < _a.length; _i++) {
+                            var info = _a[_i];
+                            project.resolutionCache.invalidateResolutionOfFile(info.path);
+                        }
+                        project.markAsDirty();
+                        updateProjectIfDirty(project);
+                    });
+                    _this.delayEnsureProjectForOpenFiles();
+                }, ts.PollingInterval.Low, this.hostConfiguration.watchOptions, ts.WatchType.ConfigFile);
+            };
+            /*@internal*/
             ProjectService.prototype.watchPackageJsonFile = function (path) {
                 var _this = this;
                 var watchers = this.packageJsonFilesMap || (this.packageJsonFilesMap = new ts.Map());
diff --git a/lib/typescript.d.ts b/lib/typescript.d.ts
index 260d3c005..cbda09150 100644
semver exclusivity >=4.4
--- a/lib/typescript.d.ts
+++ b/lib/typescript.d.ts
@@ -4759,6 +4759,7 @@ declare namespace ts {
 }
 declare namespace ts {
     export function getEffectiveTypeRoots(options: CompilerOptions, host: GetEffectiveTypeRootsHost): string[] | undefined;
+    export function getPnpTypeRoots(currentDirectory: string): string[];
     /**
      * @param {string | undefined} containingFile - file that contains type reference directive, can be undefined if containing file is unknown.
      * This is possible in case if resolution is performed for directives specified via 'types' parameter. In this case initial path for secondary lookups
diff --git a/lib/typescript.js b/lib/typescript.js
index 189df310e..eb34ff0b5 100644
semver exclusivity >=4.4
--- a/lib/typescript.js
+++ b/lib/typescript.js
@@ -7652,6 +7652,11 @@ var ts;
                     : new Buffer(input, encoding);
             }
             function isFileSystemCaseSensitive() {
+                // The PnP runtime is always case-sensitive
+                // @ts-ignore
+                if (process.versions.pnp) {
+                    return true;
+                }
                 // win32\win64 are case insensitive platforms
                 if (platform === "win32" || platform === "win64") {
                     return false;
@@ -41156,24 +41161,56 @@ var ts;
     ts.getEffectiveTypeRoots = getEffectiveTypeRoots;
     /**
      * Returns the path to every node_modules/@types directory from some ancestor directory.
-     * Returns undefined if there are none.
      */
-    function getDefaultTypeRoots(currentDirectory, host) {
+    function getNodeModulesTypeRoots(currentDirectory, host) {
         if (!host.directoryExists) {
             return [ts.combinePaths(currentDirectory, nodeModulesAtTypes)];
             // And if it doesn't exist, tough.
         }
-        var typeRoots;
+        var typeRoots = [];
         ts.forEachAncestorDirectory(ts.normalizePath(currentDirectory), function (directory) {
             var atTypes = ts.combinePaths(directory, nodeModulesAtTypes);
             if (host.directoryExists(atTypes)) {
-                (typeRoots || (typeRoots = [])).push(atTypes);
+                typeRoots.push(atTypes);
             }
             return undefined;
         });
         return typeRoots;
     }
     var nodeModulesAtTypes = ts.combinePaths("node_modules", "@types");
+    function getPnpTypeRoots(currentDirectory) {
+        var pnpapi = getPnpApi(currentDirectory);
+        if (!pnpapi) {
+            return [];
+        }
+        // Some TS consumers pass relative paths that aren't normalized
+        currentDirectory = ts.sys.resolvePath(currentDirectory);
+        var currentPackage = pnpapi.findPackageLocator(currentDirectory + "/");
+        if (!currentPackage) {
+            return [];
+        }
+        var packageDependencies = pnpapi.getPackageInformation(currentPackage).packageDependencies;
+        var typeRoots = [];
+        for (var _i = 0, _a = Array.from(packageDependencies.entries()); _i < _a.length; _i++) {
+            var _b = _a[_i], name = _b[0], referencish = _b[1];
+            // eslint-disable-next-line no-null/no-null
+            if (name.startsWith(typesPackagePrefix) && referencish !== null) {
+                var dependencyLocator = pnpapi.getLocator(name, referencish);
+                var packageLocation = pnpapi.getPackageInformation(dependencyLocator).packageLocation;
+                typeRoots.push(ts.getDirectoryPath(packageLocation));
+            }
+        }
+        return typeRoots;
+    }
+    ts.getPnpTypeRoots = getPnpTypeRoots;
+    var typesPackagePrefix = "@types/";
+    function getDefaultTypeRoots(currentDirectory, host) {
+        var nmTypes = getNodeModulesTypeRoots(currentDirectory, host);
+        var pnpTypes = getPnpTypeRoots(currentDirectory);
+        if (nmTypes.length > 0 || pnpTypes.length > 0) {
+            return __spreadArray(__spreadArray([], nmTypes, true), pnpTypes, true);
+        }
+    }
     /**
      * @param {string | undefined} containingFile - file that contains type reference directive, can be undefined if containing file is unknown.
      * This is possible in case if resolution is performed for directives specified via 'types' parameter. In this case initial path for secondary lookups
@@ -41287,7 +41324,9 @@ var ts;
                 }
                 var result_4;
                 if (!ts.isExternalModuleNameRelative(typeReferenceDirectiveName)) {
-                    var searchResult = loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
+                    var searchResult = getPnpApi(initialLocationForSecondaryLookup)
+                        ? tryLoadModuleUsingPnpResolution(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState)
+                        : loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
                     result_4 = searchResult && searchResult.value;
                 }
                 else {
@@ -41842,9 +41881,12 @@ var ts;
                 if (traceEnabled) {
                     trace(host, ts.Diagnostics.Loading_module_0_from_node_modules_folder_target_file_type_1, moduleName, Extensions[extensions]);
                 }
-                var resolved_1 = loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
-                if (!resolved_1)
+                var resolved_1 = getPnpApi(containingDirectory)
+                    ? tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state)
+                    : loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
+                if (!resolved_1) {
                     return undefined;
+                }
                 var resolvedValue = resolved_1.value;
                 if (!compilerOptions.preserveSymlinks && resolvedValue && !resolvedValue.originalPath) {
                     var path = realPath(resolvedValue.path, host, traceEnabled);
@@ -42189,6 +42231,14 @@ var ts;
     }
     function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state) {
         var candidate = ts.normalizePath(ts.combinePaths(nodeModulesDirectory, moduleName));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, candidate, undefined, undefined);
+    }
+    function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state) {
+        var candidate = ts.normalizePath(ts.combinePaths(packageDirectory, rest));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, undefined, undefined, true, state, candidate, rest, packageDirectory);
+    }
+    function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, candidate, rest, packageDirectory) {
+        var _a;
         // First look for a nested package.json, as in `node_modules/foo/bar/package.json`.
         var packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
         if (packageInfo) {
@@ -42204,9 +42254,12 @@ var ts;
                 loadNodeModuleFromDirectoryWorker(extensions, candidate, onlyRecordFailures, state, packageInfo && packageInfo.packageJsonContent, packageInfo && packageInfo.versionPaths);
             return withPackageId(packageInfo, pathAndExtension);
         };
-        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageName;
+        if (rest === undefined)
+            (_a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest);
         if (rest !== "") { // If "rest" is empty, we just did this search above.
-            var packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
+            if (packageDirectory === undefined)
+                packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
             // Don't use a "types" or "main" from here because we're not loading the root, but a subdirectory -- just here for the packageId and path mappings.
             packageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state);
             if (packageInfo && packageInfo.versionPaths) {
@@ -42365,6 +42418,58 @@ var ts;
     function toSearchResult(value) {
         return value !== undefined ? { value: value } : undefined;
     }
+    /**
+     * We only allow PnP to be used as a resolution strategy if TypeScript
+     * itself is executed under a PnP runtime (and we only allow it to access
+     * the current PnP runtime, not any on the disk). This ensures that we
+     * don't execute potentially malicious code that didn't already have a
+     * chance to be executed (if we're running within the runtime, it means
+     * that the runtime has already been executed).
+     * @internal
+     */
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi(path + "/");
+    }
+    function loadPnpPackageResolution(packageName, containingDirectory) {
+        try {
+            var resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, containingDirectory + "/", { considerBuiltins: false });
+            return ts.normalizeSlashes(resolution).replace(/\/$/, '');
+        }
+        catch (_a) {
+            // Nothing to do
+        }
+    }
+    function loadPnpTypePackageResolution(packageName, containingDirectory) {
+        return loadPnpPackageResolution(getTypesPackageName(packageName), containingDirectory);
+    }
+    /* @internal */
+    function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state) {
+        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+        var packageFullResolution = packageResolution
+            ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state)
+            : undefined;
+        var resolved;
+        if (packageFullResolution) {
+            resolved = packageFullResolution;
+        }
+        else if (extensions === Extensions.TypeScript || extensions === Extensions.DtsOnly) {
+            var typePackageResolution = loadPnpTypePackageResolution(packageName, containingDirectory);
+            var typePackageFullResolution = typePackageResolution
+                ? loadModuleFromPnpResolution(Extensions.DtsOnly, typePackageResolution, rest, state)
+                : undefined;
+            if (typePackageFullResolution) {
+                resolved = typePackageFullResolution;
+            }
+        }
+        if (resolved) {
+            return toSearchResult(resolved);
+        }
+    }
 })(ts || (ts = {}));
 /* @internal */
 var ts;
@@ -110711,6 +110816,8 @@ var ts;
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Partial"] = 1] = "Partial";
         /** Reload completely by re-reading contents of config file from disk and updating program */
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Full"] = 2] = "Full";
+        /** Reload the resolutions */
+        ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Resolutions"] = 3] = "Resolutions";
     })(ConfigFileProgramReloadLevel = ts.ConfigFileProgramReloadLevel || (ts.ConfigFileProgramReloadLevel = {}));
     /**
      * Updates the map of shared extended config file watches with a new set of extended config files from a base config file of the project
@@ -117281,6 +117388,29 @@ var ts;
                 return undefined;
             }
             var parts = getNodeModulePathParts(path);
+            var packageName;
+            if (!parts && typeof process.versions.pnp !== "undefined") {
+                var pnpApi = require("pnpapi");
+                var locator = pnpApi.findPackageLocator(path);
+                // eslint-disable-next-line no-null/no-null
+                if (locator !== null) {
+                    var sourceLocator = pnpApi.findPackageLocator(sourceDirectory + "/");
+                    // Don't use the package name when the imported file is inside
+                    // the source directory (prefer a relative path instead)
+                    if (locator === sourceLocator) {
+                        return undefined;
+                    }
+                    var information = pnpApi.getPackageInformation(locator);
+                    packageName = locator.name;
+                    parts = {
+                        topLevelNodeModulesIndex: undefined,
+                        topLevelPackageNameIndex: undefined,
+                        // The last character from packageLocation is the trailing "/", we want to point to it
+                        packageRootIndex: information.packageLocation.length - 1,
+                        fileNameIndex: path.lastIndexOf("/"),
+                    };
+                }
+            }
             if (!parts) {
                 return undefined;
             }
@@ -117311,18 +117441,24 @@ var ts;
             if (isRedirect && !isPackageRootPath) {
                 return undefined;
             }
-            var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-            // Get a path that's relative to node_modules or the importing file's path
-            // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
-            var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-            if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-                return undefined;
+            // If PnP is enabled the node_modules entries we'll get will always be relevant even if they
+            // are located in a weird path apparently outside of the source directory
+            if (typeof process.versions.pnp === "undefined") {
+                var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+                // Get a path that's relative to node_modules or the importing file's path
+                // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
+                var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+                if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+                    return undefined;
+                }
             }
             // If the module was found in @types, get the actual Node package name
-            var nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-            var packageName = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+            var nodeModulesDirectoryName = typeof packageName !== "undefined"
+                ? packageName + moduleSpecifier.substring(parts.packageRootIndex)
+                : moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
+            var packageNameFromPath = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
             // For classic resolution, only allow importing from node_modules/@types, not other node_modules
-            return ts.getEmitModuleResolutionKind(options) !== ts.ModuleResolutionKind.NodeJs && packageName === nodeModulesDirectoryName ? undefined : packageName;
+            return ts.getEmitModuleResolutionKind(options) !== ts.ModuleResolutionKind.NodeJs && packageNameFromPath === nodeModulesDirectoryName ? undefined : packageNameFromPath;
             function tryDirectoryWithPackageJson(packageRootIndex) {
                 var packageRootPath = path.substring(0, packageRootIndex);
                 var packageJsonPath = ts.combinePaths(packageRootPath, "package.json");
@@ -118116,6 +118252,10 @@ var ts;
         if (configFileName) {
             configFileWatcher = watchFile(configFileName, scheduleProgramReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
         }
+        var pnpFileWatcher;
+        if (typeof process.versions.pnp !== "undefined") {
+            pnpFileWatcher = watchFile(require.resolve("pnpapi"), scheduleResolutionReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
+        }
         var compilerHost = ts.createCompilerHostFromProgramHost(host, function () { return compilerOptions; }, directoryStructureHost);
         ts.setGetSourceFileAsHashVersioned(compilerHost, host);
         // Members for CompilerHost
@@ -118194,6 +118334,10 @@ var ts;
                 configFileWatcher.close();
                 configFileWatcher = undefined;
             }
+            if (pnpFileWatcher) {
+                pnpFileWatcher.close();
+                pnpFileWatcher = undefined;
+            }
             extendedConfigCache === null || extendedConfigCache === void 0 ? void 0 : extendedConfigCache.clear();
             extendedConfigCache = undefined;
             if (sharedExtendedConfigFileWatchers) {
@@ -118226,7 +118370,8 @@ var ts;
         function getCurrentProgram() {
             return builderProgram && builderProgram.getProgramOrUndefined();
         }
-        function synchronizeProgram() {
+        function synchronizeProgram(forceAllFilesAsInvalidated) {
+            if (forceAllFilesAsInvalidated === void 0) { forceAllFilesAsInvalidated = false; }
             writeLog("Synchronizing program");
             clearInvalidateResolutionsOfFailedLookupLocations();
             var program = getCurrentBuilderProgram();
@@ -118237,7 +118382,7 @@ var ts;
                 }
             }
             // All resolutions are invalid if user provided resolutions
-            var hasInvalidatedResolution = resolutionCache.createHasInvalidatedResolution(userProvidedResolution || changesAffectResolution);
+            var hasInvalidatedResolution = resolutionCache.createHasInvalidatedResolution(userProvidedResolution || changesAffectResolution || forceAllFilesAsInvalidated);
             if (ts.isProgramUptoDate(getCurrentProgram(), rootFileNames, compilerOptions, getSourceVersion, fileExists, hasInvalidatedResolution, hasChangedAutomaticTypeDirectiveNames, getParsedCommandLine, projectReferences)) {
                 if (hasChangedConfigFileParsingErrors) {
                     builderProgram = createProgram(/*rootNames*/ undefined, /*options*/ undefined, compilerHost, builderProgram, configFileParsingDiagnostics, projectReferences);
@@ -118444,6 +118589,12 @@ var ts;
             reloadLevel = ts.ConfigFileProgramReloadLevel.Full;
             scheduleProgramUpdate();
         }
+        function scheduleResolutionReload() {
+            writeLog("Clearing resolutions");
+            resolutionCache.clear();
+            reloadLevel = ts.ConfigFileProgramReloadLevel.Resolutions;
+            scheduleProgramUpdate();
+        }
         function updateProgramWithWatchStatus() {
             timerToUpdateProgram = undefined;
             reportWatchDiagnostic(ts.Diagnostics.File_change_detected_Starting_incremental_compilation);
@@ -118459,6 +118610,10 @@ var ts;
                     ts.perfLogger.logStartUpdateProgram("FullConfigReload");
                     reloadConfigFile();
                     break;
+                case ts.ConfigFileProgramReloadLevel.Resolutions:
+                    ts.perfLogger.logStartUpdateProgram("SynchronizeProgramWithResolutions");
+                    synchronizeProgram(/*forceAllFilesAsInvalidated*/ true);
+                    break;
                 default:
                     ts.perfLogger.logStartUpdateProgram("SynchronizeProgram");
                     synchronizeProgram();
@@ -124268,7 +124423,7 @@ var ts;
      * Don't include something from a `node_modules` that isn't actually reachable by a global import.
      * A relative import to node_modules is usually a bad idea.
      */
-    function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+    function isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath) {
         // If it's in a `node_modules` but is not reachable from here via a global import, don't bother.
         var toNodeModules = ts.forEachAncestorDirectory(toPath, function (ancestor) { return ts.getBaseFileName(ancestor) === "node_modules" ? ancestor : undefined; });
         var toNodeModulesParent = toNodeModules && ts.getDirectoryPath(getCanonicalFileName(toNodeModules));
@@ -124276,6 +124431,33 @@ var ts;
             || ts.startsWith(getCanonicalFileName(fromPath), toNodeModulesParent)
             || (!!globalCachePath && ts.startsWith(getCanonicalFileName(globalCachePath), toNodeModulesParent));
     }
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi(path + "/");
+    }
+    function isImportablePathPnp(fromPath, toPath) {
+        var pnpApi = getPnpApi(fromPath);
+        var fromLocator = pnpApi.findPackageLocator(fromPath);
+        var toLocator = pnpApi.findPackageLocator(toPath);
+        // eslint-disable-next-line no-null/no-null
+        if (toLocator === null) {
+            return false;
+        }
+        var fromInfo = pnpApi.getPackageInformation(fromLocator);
+        var toReference = fromInfo.packageDependencies.get(toLocator.name);
+        return toReference === toLocator.reference;
+    }
+    function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+        if (getPnpApi(fromPath)) {
+            return isImportablePathPnp(fromPath, toPath);
+        }
+        else {
+            return isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath);
+        }
+    }
     function forEachExternalModuleToImportFrom(program, host, useAutoImportProvider, cb) {
         var _a, _b;
         forEachExternalModule(program.getTypeChecker(), program.getSourceFiles(), function (module, file) { return cb(module, file, program, /*isFromPackageJson*/ false); });
@@ -126089,6 +126271,7 @@ var ts;
              *          This includes all files that are found in node_modules/moduleName/ with acceptable file extensions
              */
             function getCompletionEntriesForNonRelativeModules(fragment, scriptPath, compilerOptions, host, typeChecker) {
+                var _a, _b;
                 var baseUrl = compilerOptions.baseUrl, paths = compilerOptions.paths;
                 var result = [];
                 var extensionOptions = getExtensionOptions(compilerOptions);
@@ -126101,8 +126284,8 @@ var ts;
                     }
                 }
                 var fragmentDirectory = getFragmentDirectory(fragment);
-                for (var _i = 0, _a = getAmbientModuleCompletions(fragment, fragmentDirectory, typeChecker); _i < _a.length; _i++) {
-                    var ambientName = _a[_i];
+                for (var _i = 0, _c = getAmbientModuleCompletions(fragment, fragmentDirectory, typeChecker); _i < _c.length; _i++) {
+                    var ambientName = _c[_i];
                     result.push(nameAndKind(ambientName, "external module name" /* externalModuleName */, /*extension*/ undefined));
                 }
                 getCompletionEntriesFromTypings(host, compilerOptions, scriptPath, fragmentDirectory, extensionOptions, result);
@@ -126117,18 +126300,36 @@ var ts;
                                 result.push(nameAndKind(moduleName, "external module name" /* externalModuleName */, /*extension*/ undefined));
                             }
                         };
-                        for (var _b = 0, _c = enumerateNodeModulesVisibleToScript(host, scriptPath); _b < _c.length; _b++) {
-                            var moduleName = _c[_b];
+                        for (var _d = 0, _e = enumerateNodeModulesVisibleToScript(host, scriptPath); _d < _e.length; _d++) {
+                            var moduleName = _e[_d];
                             _loop_3(moduleName);
                         }
                     }
                     if (!foundGlobal) {
-                        ts.forEachAncestorDirectory(scriptPath, function (ancestor) {
-                            var nodeModules = ts.combinePaths(ancestor, "node_modules");
-                            if (ts.tryDirectoryExists(host, nodeModules)) {
-                                getCompletionEntriesForDirectoryFragment(fragment, nodeModules, extensionOptions, host, /*exclude*/ undefined, result);
+                        var pnpapi = (_b = (_a = require("module")).findPnpApi) === null || _b === void 0 ? void 0 : _b.call(_a, scriptPath);
+                        if (pnpapi) {
+                            try {
+                                // Splits a require request into its components, or return null if the request is a file path
+                                var pathRegExp = /^(?![a-zA-Z]:[\\/]|\\\\|\.{0,2}(?:\/|$))((?:@[^/]+\/)?[^/]+)\/*(.*|)$/;
+                                var dependencyNameMatch = fragment.match(pathRegExp);
+                                if (dependencyNameMatch) {
+                                    var dependencyName = dependencyNameMatch[1], subPath = dependencyNameMatch[2];
+                                    var unqualified = pnpapi.resolveToUnqualified(dependencyName, scriptPath, { considerBuiltins: false });
+                                    if (unqualified) {
+                                        getCompletionEntriesForDirectoryFragment(subPath, ts.normalizePath(unqualified), extensionOptions, host, /*exclude*/ undefined, result);
+                                    }
+                                }
                             }
-                        });
+                            catch (_f) { }
+                        }
+                        else {
+                            ts.forEachAncestorDirectory(scriptPath, function (ancestor) {
+                                var nodeModules = ts.combinePaths(ancestor, "node_modules");
+                                if (ts.tryDirectoryExists(host, nodeModules)) {
+                                    getCompletionEntriesForDirectoryFragment(fragment, nodeModules, extensionOptions, host, /*exclude*/ undefined, result);
+                                }
+                            });
+                        }
                     }
                 }
                 return result;
@@ -126229,6 +126430,7 @@ var ts;
                 return addReplacementSpans(toComplete, range.pos + prefix.length, names);
             }
             function getCompletionEntriesFromTypings(host, options, scriptPath, fragmentDirectory, extensionOptions, result) {
+                var _a, _b;
                 if (result === void 0) { result = []; }
                 // Check for typings specified in compiler options
                 var seen = new ts.Map();
@@ -126237,11 +126439,19 @@ var ts;
                     var root = typeRoots_1[_i];
                     getCompletionEntriesFromDirectories(root);
                 }
-                // Also get all @types typings installed in visible node_modules directories
-                for (var _a = 0, _b = ts.findPackageJsons(scriptPath, host); _a < _b.length; _a++) {
-                    var packageJson = _b[_a];
-                    var typesDir = ts.combinePaths(ts.getDirectoryPath(packageJson), "node_modules/@types");
-                    getCompletionEntriesFromDirectories(typesDir);
+                if ((_b = (_a = require("module")).findPnpApi) === null || _b === void 0 ? void 0 : _b.call(_a, scriptPath)) {
+                    for (var _c = 0, _d = ts.getPnpTypeRoots(scriptPath); _c < _d.length; _c++) {
+                        var root = _d[_c];
+                        getCompletionEntriesFromDirectories(root);
+                    }
+                }
+                else {
+                    // Also get all @types typings installed in visible node_modules directories
+                    for (var _e = 0, _f = ts.findPackageJsons(scriptPath, host); _e < _f.length; _e++) {
+                        var packageJson = _f[_e];
+                        var typesDir = ts.combinePaths(ts.getDirectoryPath(packageJson), "node_modules/@types");
+                        getCompletionEntriesFromDirectories(typesDir);
+                    }
                 }
                 return result;
                 function getCompletionEntriesFromDirectories(directory) {
@@ -154428,9 +154638,9 @@ var ts;
                 if (isTopLevelDeclarationStatement(statement) &&
                     !isExported(sourceFile, statement, useEs6Exports) &&
                     forEachTopLevelDeclaration(statement, function (d) { return needExport.has(ts.Debug.checkDefined(d.symbol)); })) {
-                    var exports = addExport(statement, useEs6Exports);
-                    if (exports)
-                        return exports;
+                    var exports_1 = addExport(statement, useEs6Exports);
+                    if (exports_1)
+                        return exports_1;
                 }
                 return statement;
             });
diff --git a/lib/typescriptServices.d.ts b/lib/typescriptServices.d.ts
index 4b0f6f740..0c268e7e8 100644
semver exclusivity >=4.4
--- a/lib/typescriptServices.d.ts
+++ b/lib/typescriptServices.d.ts
@@ -4759,6 +4759,7 @@ declare namespace ts {
 }
 declare namespace ts {
     export function getEffectiveTypeRoots(options: CompilerOptions, host: GetEffectiveTypeRootsHost): string[] | undefined;
+    export function getPnpTypeRoots(currentDirectory: string): string[];
     /**
      * @param {string | undefined} containingFile - file that contains type reference directive, can be undefined if containing file is unknown.
      * This is possible in case if resolution is performed for directives specified via 'types' parameter. In this case initial path for secondary lookups
diff --git a/lib/typescriptServices.js b/lib/typescriptServices.js
index 43e2dcfb4..b9203780c 100644
semver exclusivity >=4.4
--- a/lib/typescriptServices.js
+++ b/lib/typescriptServices.js
@@ -7652,6 +7652,11 @@ var ts;
                     : new Buffer(input, encoding);
             }
             function isFileSystemCaseSensitive() {
+                // The PnP runtime is always case-sensitive
+                // @ts-ignore
+                if (process.versions.pnp) {
+                    return true;
+                }
                 // win32\win64 are case insensitive platforms
                 if (platform === "win32" || platform === "win64") {
                     return false;
@@ -41156,24 +41161,56 @@ var ts;
     ts.getEffectiveTypeRoots = getEffectiveTypeRoots;
     /**
      * Returns the path to every node_modules/@types directory from some ancestor directory.
-     * Returns undefined if there are none.
      */
-    function getDefaultTypeRoots(currentDirectory, host) {
+    function getNodeModulesTypeRoots(currentDirectory, host) {
         if (!host.directoryExists) {
             return [ts.combinePaths(currentDirectory, nodeModulesAtTypes)];
             // And if it doesn't exist, tough.
         }
-        var typeRoots;
+        var typeRoots = [];
         ts.forEachAncestorDirectory(ts.normalizePath(currentDirectory), function (directory) {
             var atTypes = ts.combinePaths(directory, nodeModulesAtTypes);
             if (host.directoryExists(atTypes)) {
-                (typeRoots || (typeRoots = [])).push(atTypes);
+                typeRoots.push(atTypes);
             }
             return undefined;
         });
         return typeRoots;
     }
     var nodeModulesAtTypes = ts.combinePaths("node_modules", "@types");
+    function getPnpTypeRoots(currentDirectory) {
+        var pnpapi = getPnpApi(currentDirectory);
+        if (!pnpapi) {
+            return [];
+        }
+        // Some TS consumers pass relative paths that aren't normalized
+        currentDirectory = ts.sys.resolvePath(currentDirectory);
+        var currentPackage = pnpapi.findPackageLocator(currentDirectory + "/");
+        if (!currentPackage) {
+            return [];
+        }
+        var packageDependencies = pnpapi.getPackageInformation(currentPackage).packageDependencies;
+        var typeRoots = [];
+        for (var _i = 0, _a = Array.from(packageDependencies.entries()); _i < _a.length; _i++) {
+            var _b = _a[_i], name = _b[0], referencish = _b[1];
+            // eslint-disable-next-line no-null/no-null
+            if (name.startsWith(typesPackagePrefix) && referencish !== null) {
+                var dependencyLocator = pnpapi.getLocator(name, referencish);
+                var packageLocation = pnpapi.getPackageInformation(dependencyLocator).packageLocation;
+                typeRoots.push(ts.getDirectoryPath(packageLocation));
+            }
+        }
+        return typeRoots;
+    }
+    ts.getPnpTypeRoots = getPnpTypeRoots;
+    var typesPackagePrefix = "@types/";
+    function getDefaultTypeRoots(currentDirectory, host) {
+        var nmTypes = getNodeModulesTypeRoots(currentDirectory, host);
+        var pnpTypes = getPnpTypeRoots(currentDirectory);
+        if (nmTypes.length > 0 || pnpTypes.length > 0) {
+            return __spreadArray(__spreadArray([], nmTypes, true), pnpTypes, true);
+        }
+    }
     /**
      * @param {string | undefined} containingFile - file that contains type reference directive, can be undefined if containing file is unknown.
      * This is possible in case if resolution is performed for directives specified via 'types' parameter. In this case initial path for secondary lookups
@@ -41287,7 +41324,9 @@ var ts;
                 }
                 var result_4;
                 if (!ts.isExternalModuleNameRelative(typeReferenceDirectiveName)) {
-                    var searchResult = loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
+                    var searchResult = getPnpApi(initialLocationForSecondaryLookup)
+                        ? tryLoadModuleUsingPnpResolution(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState)
+                        : loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
                     result_4 = searchResult && searchResult.value;
                 }
                 else {
@@ -41842,9 +41881,12 @@ var ts;
                 if (traceEnabled) {
                     trace(host, ts.Diagnostics.Loading_module_0_from_node_modules_folder_target_file_type_1, moduleName, Extensions[extensions]);
                 }
-                var resolved_1 = loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
-                if (!resolved_1)
+                var resolved_1 = getPnpApi(containingDirectory)
+                    ? tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state)
+                    : loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
+                if (!resolved_1) {
                     return undefined;
+                }
                 var resolvedValue = resolved_1.value;
                 if (!compilerOptions.preserveSymlinks && resolvedValue && !resolvedValue.originalPath) {
                     var path = realPath(resolvedValue.path, host, traceEnabled);
@@ -42189,6 +42231,14 @@ var ts;
     }
     function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state) {
         var candidate = ts.normalizePath(ts.combinePaths(nodeModulesDirectory, moduleName));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, candidate, undefined, undefined);
+    }
+    function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state) {
+        var candidate = ts.normalizePath(ts.combinePaths(packageDirectory, rest));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, undefined, undefined, true, state, candidate, rest, packageDirectory);
+    }
+    function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, candidate, rest, packageDirectory) {
+        var _a;
         // First look for a nested package.json, as in `node_modules/foo/bar/package.json`.
         var packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
         if (packageInfo) {
@@ -42204,9 +42254,12 @@ var ts;
                 loadNodeModuleFromDirectoryWorker(extensions, candidate, onlyRecordFailures, state, packageInfo && packageInfo.packageJsonContent, packageInfo && packageInfo.versionPaths);
             return withPackageId(packageInfo, pathAndExtension);
         };
-        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageName;
+        if (rest === undefined)
+            (_a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest);
         if (rest !== "") { // If "rest" is empty, we just did this search above.
-            var packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
+            if (packageDirectory === undefined)
+                packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
             // Don't use a "types" or "main" from here because we're not loading the root, but a subdirectory -- just here for the packageId and path mappings.
             packageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state);
             if (packageInfo && packageInfo.versionPaths) {
@@ -42365,6 +42418,58 @@ var ts;
     function toSearchResult(value) {
         return value !== undefined ? { value: value } : undefined;
     }
+    /**
+     * We only allow PnP to be used as a resolution strategy if TypeScript
+     * itself is executed under a PnP runtime (and we only allow it to access
+     * the current PnP runtime, not any on the disk). This ensures that we
+     * don't execute potentially malicious code that didn't already have a
+     * chance to be executed (if we're running within the runtime, it means
+     * that the runtime has already been executed).
+     * @internal
+     */
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi(path + "/");
+    }
+    function loadPnpPackageResolution(packageName, containingDirectory) {
+        try {
+            var resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, containingDirectory + "/", { considerBuiltins: false });
+            return ts.normalizeSlashes(resolution).replace(/\/$/, '');
+        }
+        catch (_a) {
+            // Nothing to do
+        }
+    }
+    function loadPnpTypePackageResolution(packageName, containingDirectory) {
+        return loadPnpPackageResolution(getTypesPackageName(packageName), containingDirectory);
+    }
+    /* @internal */
+    function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state) {
+        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+        var packageFullResolution = packageResolution
+            ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state)
+            : undefined;
+        var resolved;
+        if (packageFullResolution) {
+            resolved = packageFullResolution;
+        }
+        else if (extensions === Extensions.TypeScript || extensions === Extensions.DtsOnly) {
+            var typePackageResolution = loadPnpTypePackageResolution(packageName, containingDirectory);
+            var typePackageFullResolution = typePackageResolution
+                ? loadModuleFromPnpResolution(Extensions.DtsOnly, typePackageResolution, rest, state)
+                : undefined;
+            if (typePackageFullResolution) {
+                resolved = typePackageFullResolution;
+            }
+        }
+        if (resolved) {
+            return toSearchResult(resolved);
+        }
+    }
 })(ts || (ts = {}));
 /* @internal */
 var ts;
@@ -110711,6 +110816,8 @@ var ts;
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Partial"] = 1] = "Partial";
         /** Reload completely by re-reading contents of config file from disk and updating program */
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Full"] = 2] = "Full";
+        /** Reload the resolutions */
+        ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Resolutions"] = 3] = "Resolutions";
     })(ConfigFileProgramReloadLevel = ts.ConfigFileProgramReloadLevel || (ts.ConfigFileProgramReloadLevel = {}));
     /**
      * Updates the map of shared extended config file watches with a new set of extended config files from a base config file of the project
@@ -117281,6 +117388,29 @@ var ts;
                 return undefined;
             }
             var parts = getNodeModulePathParts(path);
+            var packageName;
+            if (!parts && typeof process.versions.pnp !== "undefined") {
+                var pnpApi = require("pnpapi");
+                var locator = pnpApi.findPackageLocator(path);
+                // eslint-disable-next-line no-null/no-null
+                if (locator !== null) {
+                    var sourceLocator = pnpApi.findPackageLocator(sourceDirectory + "/");
+                    // Don't use the package name when the imported file is inside
+                    // the source directory (prefer a relative path instead)
+                    if (locator === sourceLocator) {
+                        return undefined;
+                    }
+                    var information = pnpApi.getPackageInformation(locator);
+                    packageName = locator.name;
+                    parts = {
+                        topLevelNodeModulesIndex: undefined,
+                        topLevelPackageNameIndex: undefined,
+                        // The last character from packageLocation is the trailing "/", we want to point to it
+                        packageRootIndex: information.packageLocation.length - 1,
+                        fileNameIndex: path.lastIndexOf("/"),
+                    };
+                }
+            }
             if (!parts) {
                 return undefined;
             }
@@ -117311,18 +117441,24 @@ var ts;
             if (isRedirect && !isPackageRootPath) {
                 return undefined;
             }
-            var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-            // Get a path that's relative to node_modules or the importing file's path
-            // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
-            var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-            if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-                return undefined;
+            // If PnP is enabled the node_modules entries we'll get will always be relevant even if they
+            // are located in a weird path apparently outside of the source directory
+            if (typeof process.versions.pnp === "undefined") {
+                var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+                // Get a path that's relative to node_modules or the importing file's path
+                // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
+                var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+                if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+                    return undefined;
+                }
             }
             // If the module was found in @types, get the actual Node package name
-            var nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-            var packageName = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+            var nodeModulesDirectoryName = typeof packageName !== "undefined"
+                ? packageName + moduleSpecifier.substring(parts.packageRootIndex)
+                : moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
+            var packageNameFromPath = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
             // For classic resolution, only allow importing from node_modules/@types, not other node_modules
-            return ts.getEmitModuleResolutionKind(options) !== ts.ModuleResolutionKind.NodeJs && packageName === nodeModulesDirectoryName ? undefined : packageName;
+            return ts.getEmitModuleResolutionKind(options) !== ts.ModuleResolutionKind.NodeJs && packageNameFromPath === nodeModulesDirectoryName ? undefined : packageNameFromPath;
             function tryDirectoryWithPackageJson(packageRootIndex) {
                 var packageRootPath = path.substring(0, packageRootIndex);
                 var packageJsonPath = ts.combinePaths(packageRootPath, "package.json");
@@ -118116,6 +118252,10 @@ var ts;
         if (configFileName) {
             configFileWatcher = watchFile(configFileName, scheduleProgramReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
         }
+        var pnpFileWatcher;
+        if (typeof process.versions.pnp !== "undefined") {
+            pnpFileWatcher = watchFile(require.resolve("pnpapi"), scheduleResolutionReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
+        }
         var compilerHost = ts.createCompilerHostFromProgramHost(host, function () { return compilerOptions; }, directoryStructureHost);
         ts.setGetSourceFileAsHashVersioned(compilerHost, host);
         // Members for CompilerHost
@@ -118194,6 +118334,10 @@ var ts;
                 configFileWatcher.close();
                 configFileWatcher = undefined;
             }
+            if (pnpFileWatcher) {
+                pnpFileWatcher.close();
+                pnpFileWatcher = undefined;
+            }
             extendedConfigCache === null || extendedConfigCache === void 0 ? void 0 : extendedConfigCache.clear();
             extendedConfigCache = undefined;
             if (sharedExtendedConfigFileWatchers) {
@@ -118226,7 +118370,8 @@ var ts;
         function getCurrentProgram() {
             return builderProgram && builderProgram.getProgramOrUndefined();
         }
-        function synchronizeProgram() {
+        function synchronizeProgram(forceAllFilesAsInvalidated) {
+            if (forceAllFilesAsInvalidated === void 0) { forceAllFilesAsInvalidated = false; }
             writeLog("Synchronizing program");
             clearInvalidateResolutionsOfFailedLookupLocations();
             var program = getCurrentBuilderProgram();
@@ -118237,7 +118382,7 @@ var ts;
                 }
             }
             // All resolutions are invalid if user provided resolutions
-            var hasInvalidatedResolution = resolutionCache.createHasInvalidatedResolution(userProvidedResolution || changesAffectResolution);
+            var hasInvalidatedResolution = resolutionCache.createHasInvalidatedResolution(userProvidedResolution || changesAffectResolution || forceAllFilesAsInvalidated);
             if (ts.isProgramUptoDate(getCurrentProgram(), rootFileNames, compilerOptions, getSourceVersion, fileExists, hasInvalidatedResolution, hasChangedAutomaticTypeDirectiveNames, getParsedCommandLine, projectReferences)) {
                 if (hasChangedConfigFileParsingErrors) {
                     builderProgram = createProgram(/*rootNames*/ undefined, /*options*/ undefined, compilerHost, builderProgram, configFileParsingDiagnostics, projectReferences);
@@ -118444,6 +118589,12 @@ var ts;
             reloadLevel = ts.ConfigFileProgramReloadLevel.Full;
             scheduleProgramUpdate();
         }
+        function scheduleResolutionReload() {
+            writeLog("Clearing resolutions");
+            resolutionCache.clear();
+            reloadLevel = ts.ConfigFileProgramReloadLevel.Resolutions;
+            scheduleProgramUpdate();
+        }
         function updateProgramWithWatchStatus() {
             timerToUpdateProgram = undefined;
             reportWatchDiagnostic(ts.Diagnostics.File_change_detected_Starting_incremental_compilation);
@@ -118459,6 +118610,10 @@ var ts;
                     ts.perfLogger.logStartUpdateProgram("FullConfigReload");
                     reloadConfigFile();
                     break;
+                case ts.ConfigFileProgramReloadLevel.Resolutions:
+                    ts.perfLogger.logStartUpdateProgram("SynchronizeProgramWithResolutions");
+                    synchronizeProgram(/*forceAllFilesAsInvalidated*/ true);
+                    break;
                 default:
                     ts.perfLogger.logStartUpdateProgram("SynchronizeProgram");
                     synchronizeProgram();
@@ -124268,7 +124423,7 @@ var ts;
      * Don't include something from a `node_modules` that isn't actually reachable by a global import.
      * A relative import to node_modules is usually a bad idea.
      */
-    function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+    function isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath) {
         // If it's in a `node_modules` but is not reachable from here via a global import, don't bother.
         var toNodeModules = ts.forEachAncestorDirectory(toPath, function (ancestor) { return ts.getBaseFileName(ancestor) === "node_modules" ? ancestor : undefined; });
         var toNodeModulesParent = toNodeModules && ts.getDirectoryPath(getCanonicalFileName(toNodeModules));
@@ -124276,6 +124431,33 @@ var ts;
             || ts.startsWith(getCanonicalFileName(fromPath), toNodeModulesParent)
             || (!!globalCachePath && ts.startsWith(getCanonicalFileName(globalCachePath), toNodeModulesParent));
     }
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi(path + "/");
+    }
+    function isImportablePathPnp(fromPath, toPath) {
+        var pnpApi = getPnpApi(fromPath);
+        var fromLocator = pnpApi.findPackageLocator(fromPath);
+        var toLocator = pnpApi.findPackageLocator(toPath);
+        // eslint-disable-next-line no-null/no-null
+        if (toLocator === null) {
+            return false;
+        }
+        var fromInfo = pnpApi.getPackageInformation(fromLocator);
+        var toReference = fromInfo.packageDependencies.get(toLocator.name);
+        return toReference === toLocator.reference;
+    }
+    function isImportablePath(fromPath, toPath, getCanonicalFileName, globalCachePath) {
+        if (getPnpApi(fromPath)) {
+            return isImportablePathPnp(fromPath, toPath);
+        }
+        else {
+            return isImportablePathNode(fromPath, toPath, getCanonicalFileName, globalCachePath);
+        }
+    }
     function forEachExternalModuleToImportFrom(program, host, useAutoImportProvider, cb) {
         var _a, _b;
         forEachExternalModule(program.getTypeChecker(), program.getSourceFiles(), function (module, file) { return cb(module, file, program, /*isFromPackageJson*/ false); });
@@ -126089,6 +126271,7 @@ var ts;
              *          This includes all files that are found in node_modules/moduleName/ with acceptable file extensions
              */
             function getCompletionEntriesForNonRelativeModules(fragment, scriptPath, compilerOptions, host, typeChecker) {
+                var _a, _b;
                 var baseUrl = compilerOptions.baseUrl, paths = compilerOptions.paths;
                 var result = [];
                 var extensionOptions = getExtensionOptions(compilerOptions);
@@ -126101,8 +126284,8 @@ var ts;
                     }
                 }
                 var fragmentDirectory = getFragmentDirectory(fragment);
-                for (var _i = 0, _a = getAmbientModuleCompletions(fragment, fragmentDirectory, typeChecker); _i < _a.length; _i++) {
-                    var ambientName = _a[_i];
+                for (var _i = 0, _c = getAmbientModuleCompletions(fragment, fragmentDirectory, typeChecker); _i < _c.length; _i++) {
+                    var ambientName = _c[_i];
                     result.push(nameAndKind(ambientName, "external module name" /* externalModuleName */, /*extension*/ undefined));
                 }
                 getCompletionEntriesFromTypings(host, compilerOptions, scriptPath, fragmentDirectory, extensionOptions, result);
@@ -126117,18 +126300,36 @@ var ts;
                                 result.push(nameAndKind(moduleName, "external module name" /* externalModuleName */, /*extension*/ undefined));
                             }
                         };
-                        for (var _b = 0, _c = enumerateNodeModulesVisibleToScript(host, scriptPath); _b < _c.length; _b++) {
-                            var moduleName = _c[_b];
+                        for (var _d = 0, _e = enumerateNodeModulesVisibleToScript(host, scriptPath); _d < _e.length; _d++) {
+                            var moduleName = _e[_d];
                             _loop_3(moduleName);
                         }
                     }
                     if (!foundGlobal) {
-                        ts.forEachAncestorDirectory(scriptPath, function (ancestor) {
-                            var nodeModules = ts.combinePaths(ancestor, "node_modules");
-                            if (ts.tryDirectoryExists(host, nodeModules)) {
-                                getCompletionEntriesForDirectoryFragment(fragment, nodeModules, extensionOptions, host, /*exclude*/ undefined, result);
+                        var pnpapi = (_b = (_a = require("module")).findPnpApi) === null || _b === void 0 ? void 0 : _b.call(_a, scriptPath);
+                        if (pnpapi) {
+                            try {
+                                // Splits a require request into its components, or return null if the request is a file path
+                                var pathRegExp = /^(?![a-zA-Z]:[\\/]|\\\\|\.{0,2}(?:\/|$))((?:@[^/]+\/)?[^/]+)\/*(.*|)$/;
+                                var dependencyNameMatch = fragment.match(pathRegExp);
+                                if (dependencyNameMatch) {
+                                    var dependencyName = dependencyNameMatch[1], subPath = dependencyNameMatch[2];
+                                    var unqualified = pnpapi.resolveToUnqualified(dependencyName, scriptPath, { considerBuiltins: false });
+                                    if (unqualified) {
+                                        getCompletionEntriesForDirectoryFragment(subPath, ts.normalizePath(unqualified), extensionOptions, host, /*exclude*/ undefined, result);
+                                    }
+                                }
                             }
-                        });
+                            catch (_f) { }
+                        }
+                        else {
+                            ts.forEachAncestorDirectory(scriptPath, function (ancestor) {
+                                var nodeModules = ts.combinePaths(ancestor, "node_modules");
+                                if (ts.tryDirectoryExists(host, nodeModules)) {
+                                    getCompletionEntriesForDirectoryFragment(fragment, nodeModules, extensionOptions, host, /*exclude*/ undefined, result);
+                                }
+                            });
+                        }
                     }
                 }
                 return result;
@@ -126229,6 +126430,7 @@ var ts;
                 return addReplacementSpans(toComplete, range.pos + prefix.length, names);
             }
             function getCompletionEntriesFromTypings(host, options, scriptPath, fragmentDirectory, extensionOptions, result) {
+                var _a, _b;
                 if (result === void 0) { result = []; }
                 // Check for typings specified in compiler options
                 var seen = new ts.Map();
@@ -126237,11 +126439,19 @@ var ts;
                     var root = typeRoots_1[_i];
                     getCompletionEntriesFromDirectories(root);
                 }
-                // Also get all @types typings installed in visible node_modules directories
-                for (var _a = 0, _b = ts.findPackageJsons(scriptPath, host); _a < _b.length; _a++) {
-                    var packageJson = _b[_a];
-                    var typesDir = ts.combinePaths(ts.getDirectoryPath(packageJson), "node_modules/@types");
-                    getCompletionEntriesFromDirectories(typesDir);
+                if ((_b = (_a = require("module")).findPnpApi) === null || _b === void 0 ? void 0 : _b.call(_a, scriptPath)) {
+                    for (var _c = 0, _d = ts.getPnpTypeRoots(scriptPath); _c < _d.length; _c++) {
+                        var root = _d[_c];
+                        getCompletionEntriesFromDirectories(root);
+                    }
+                }
+                else {
+                    // Also get all @types typings installed in visible node_modules directories
+                    for (var _e = 0, _f = ts.findPackageJsons(scriptPath, host); _e < _f.length; _e++) {
+                        var packageJson = _f[_e];
+                        var typesDir = ts.combinePaths(ts.getDirectoryPath(packageJson), "node_modules/@types");
+                        getCompletionEntriesFromDirectories(typesDir);
+                    }
                 }
                 return result;
                 function getCompletionEntriesFromDirectories(directory) {
@@ -154428,9 +154638,9 @@ var ts;
                 if (isTopLevelDeclarationStatement(statement) &&
                     !isExported(sourceFile, statement, useEs6Exports) &&
                     forEachTopLevelDeclaration(statement, function (d) { return needExport.has(ts.Debug.checkDefined(d.symbol)); })) {
-                    var exports = addExport(statement, useEs6Exports);
-                    if (exports)
-                        return exports;
+                    var exports_1 = addExport(statement, useEs6Exports);
+                    if (exports_1)
+                        return exports_1;
                 }
                 return statement;
             });
diff --git a/lib/typingsInstaller.js b/lib/typingsInstaller.js
index a987e972d..02a82a38a 100644
semver exclusivity >=4.4
--- a/lib/typingsInstaller.js
+++ b/lib/typingsInstaller.js
@@ -7447,6 +7447,11 @@ var ts;
                     : new Buffer(input, encoding);
             }
             function isFileSystemCaseSensitive() {
+                // The PnP runtime is always case-sensitive
+                // @ts-ignore
+                if (process.versions.pnp) {
+                    return true;
+                }
                 // win32\win64 are case insensitive platforms
                 if (platform === "win32" || platform === "win64") {
                     return false;
@@ -40951,24 +40956,56 @@ var ts;
     ts.getEffectiveTypeRoots = getEffectiveTypeRoots;
     /**
      * Returns the path to every node_modules/@types directory from some ancestor directory.
-     * Returns undefined if there are none.
      */
-    function getDefaultTypeRoots(currentDirectory, host) {
+    function getNodeModulesTypeRoots(currentDirectory, host) {
         if (!host.directoryExists) {
             return [ts.combinePaths(currentDirectory, nodeModulesAtTypes)];
             // And if it doesn't exist, tough.
         }
-        var typeRoots;
+        var typeRoots = [];
         ts.forEachAncestorDirectory(ts.normalizePath(currentDirectory), function (directory) {
             var atTypes = ts.combinePaths(directory, nodeModulesAtTypes);
             if (host.directoryExists(atTypes)) {
-                (typeRoots || (typeRoots = [])).push(atTypes);
+                typeRoots.push(atTypes);
             }
             return undefined;
         });
         return typeRoots;
     }
     var nodeModulesAtTypes = ts.combinePaths("node_modules", "@types");
+    function getPnpTypeRoots(currentDirectory) {
+        var pnpapi = getPnpApi(currentDirectory);
+        if (!pnpapi) {
+            return [];
+        }
+        // Some TS consumers pass relative paths that aren't normalized
+        currentDirectory = ts.sys.resolvePath(currentDirectory);
+        var currentPackage = pnpapi.findPackageLocator(currentDirectory + "/");
+        if (!currentPackage) {
+            return [];
+        }
+        var packageDependencies = pnpapi.getPackageInformation(currentPackage).packageDependencies;
+        var typeRoots = [];
+        for (var _i = 0, _a = Array.from(packageDependencies.entries()); _i < _a.length; _i++) {
+            var _b = _a[_i], name = _b[0], referencish = _b[1];
+            // eslint-disable-next-line no-null/no-null
+            if (name.startsWith(typesPackagePrefix) && referencish !== null) {
+                var dependencyLocator = pnpapi.getLocator(name, referencish);
+                var packageLocation = pnpapi.getPackageInformation(dependencyLocator).packageLocation;
+                typeRoots.push(ts.getDirectoryPath(packageLocation));
+            }
+        }
+        return typeRoots;
+    }
+    ts.getPnpTypeRoots = getPnpTypeRoots;
+    var typesPackagePrefix = "@types/";
+    function getDefaultTypeRoots(currentDirectory, host) {
+        var nmTypes = getNodeModulesTypeRoots(currentDirectory, host);
+        var pnpTypes = getPnpTypeRoots(currentDirectory);
+        if (nmTypes.length > 0 || pnpTypes.length > 0) {
+            return __spreadArray(__spreadArray([], nmTypes, true), pnpTypes, true);
+        }
+    }
     /**
      * @param {string | undefined} containingFile - file that contains type reference directive, can be undefined if containing file is unknown.
      * This is possible in case if resolution is performed for directives specified via 'types' parameter. In this case initial path for secondary lookups
@@ -41082,7 +41119,9 @@ var ts;
                 }
                 var result_4;
                 if (!ts.isExternalModuleNameRelative(typeReferenceDirectiveName)) {
-                    var searchResult = loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
+                    var searchResult = getPnpApi(initialLocationForSecondaryLookup)
+                        ? tryLoadModuleUsingPnpResolution(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState)
+                        : loadModuleFromNearestNodeModulesDirectory(Extensions.DtsOnly, typeReferenceDirectiveName, initialLocationForSecondaryLookup, moduleResolutionState, /*cache*/ undefined, /*redirectedReference*/ undefined);
                     result_4 = searchResult && searchResult.value;
                 }
                 else {
@@ -41637,9 +41676,12 @@ var ts;
                 if (traceEnabled) {
                     trace(host, ts.Diagnostics.Loading_module_0_from_node_modules_folder_target_file_type_1, moduleName, Extensions[extensions]);
                 }
-                var resolved_1 = loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
-                if (!resolved_1)
+                var resolved_1 = getPnpApi(containingDirectory)
+                    ? tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state)
+                    : loadModuleFromNearestNodeModulesDirectory(extensions, moduleName, containingDirectory, state, cache, redirectedReference);
+                if (!resolved_1) {
                     return undefined;
+                }
                 var resolvedValue = resolved_1.value;
                 if (!compilerOptions.preserveSymlinks && resolvedValue && !resolvedValue.originalPath) {
                     var path = realPath(resolvedValue.path, host, traceEnabled);
@@ -41984,6 +42026,14 @@ var ts;
     }
     function loadModuleFromSpecificNodeModulesDirectory(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state) {
         var candidate = ts.normalizePath(ts.combinePaths(nodeModulesDirectory, moduleName));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, candidate, undefined, undefined);
+    }
+    function loadModuleFromPnpResolution(extensions, packageDirectory, rest, state) {
+        var candidate = ts.normalizePath(ts.combinePaths(packageDirectory, rest));
+        return loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, undefined, undefined, true, state, candidate, rest, packageDirectory);
+    }
+    function loadModuleFromSpecificNodeModulesDirectoryImpl(extensions, moduleName, nodeModulesDirectory, nodeModulesDirectoryExists, state, candidate, rest, packageDirectory) {
+        var _a;
         // First look for a nested package.json, as in `node_modules/foo/bar/package.json`.
         var packageInfo = getPackageJsonInfo(candidate, !nodeModulesDirectoryExists, state);
         if (packageInfo) {
@@ -41999,9 +42049,12 @@ var ts;
                 loadNodeModuleFromDirectoryWorker(extensions, candidate, onlyRecordFailures, state, packageInfo && packageInfo.packageJsonContent, packageInfo && packageInfo.versionPaths);
             return withPackageId(packageInfo, pathAndExtension);
         };
-        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageName;
+        if (rest === undefined)
+            (_a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest);
         if (rest !== "") { // If "rest" is empty, we just did this search above.
-            var packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
+            if (packageDirectory === undefined)
+                packageDirectory = ts.combinePaths(nodeModulesDirectory, packageName);
             // Don't use a "types" or "main" from here because we're not loading the root, but a subdirectory -- just here for the packageId and path mappings.
             packageInfo = getPackageJsonInfo(packageDirectory, !nodeModulesDirectoryExists, state);
             if (packageInfo && packageInfo.versionPaths) {
@@ -42160,6 +42213,58 @@ var ts;
     function toSearchResult(value) {
         return value !== undefined ? { value: value } : undefined;
     }
+    /**
+     * We only allow PnP to be used as a resolution strategy if TypeScript
+     * itself is executed under a PnP runtime (and we only allow it to access
+     * the current PnP runtime, not any on the disk). This ensures that we
+     * don't execute potentially malicious code that didn't already have a
+     * chance to be executed (if we're running within the runtime, it means
+     * that the runtime has already been executed).
+     * @internal
+     */
+    function getPnpApi(path) {
+        var findPnpApi = require("module").findPnpApi;
+        if (findPnpApi === undefined) {
+            return undefined;
+        }
+        return findPnpApi(path + "/");
+    }
+    function loadPnpPackageResolution(packageName, containingDirectory) {
+        try {
+            var resolution = getPnpApi(containingDirectory).resolveToUnqualified(packageName, containingDirectory + "/", { considerBuiltins: false });
+            return ts.normalizeSlashes(resolution).replace(/\/$/, '');
+        }
+        catch (_a) {
+            // Nothing to do
+        }
+    }
+    function loadPnpTypePackageResolution(packageName, containingDirectory) {
+        return loadPnpPackageResolution(getTypesPackageName(packageName), containingDirectory);
+    }
+    /* @internal */
+    function tryLoadModuleUsingPnpResolution(extensions, moduleName, containingDirectory, state) {
+        var _a = parsePackageName(moduleName), packageName = _a.packageName, rest = _a.rest;
+        var packageResolution = loadPnpPackageResolution(packageName, containingDirectory);
+        var packageFullResolution = packageResolution
+            ? loadModuleFromPnpResolution(extensions, packageResolution, rest, state)
+            : undefined;
+        var resolved;
+        if (packageFullResolution) {
+            resolved = packageFullResolution;
+        }
+        else if (extensions === Extensions.TypeScript || extensions === Extensions.DtsOnly) {
+            var typePackageResolution = loadPnpTypePackageResolution(packageName, containingDirectory);
+            var typePackageFullResolution = typePackageResolution
+                ? loadModuleFromPnpResolution(Extensions.DtsOnly, typePackageResolution, rest, state)
+                : undefined;
+            if (typePackageFullResolution) {
+                resolved = typePackageFullResolution;
+            }
+        }
+        if (resolved) {
+            return toSearchResult(resolved);
+        }
+    }
 })(ts || (ts = {}));
 /* @internal */
 var ts;
@@ -110506,6 +110611,8 @@ var ts;
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Partial"] = 1] = "Partial";
         /** Reload completely by re-reading contents of config file from disk and updating program */
         ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Full"] = 2] = "Full";
+        /** Reload the resolutions */
+        ConfigFileProgramReloadLevel[ConfigFileProgramReloadLevel["Resolutions"] = 3] = "Resolutions";
     })(ConfigFileProgramReloadLevel = ts.ConfigFileProgramReloadLevel || (ts.ConfigFileProgramReloadLevel = {}));
     /**
      * Updates the map of shared extended config file watches with a new set of extended config files from a base config file of the project
@@ -117076,6 +117183,29 @@ var ts;
                 return undefined;
             }
             var parts = getNodeModulePathParts(path);
+            var packageName;
+            if (!parts && typeof process.versions.pnp !== "undefined") {
+                var pnpApi = require("pnpapi");
+                var locator = pnpApi.findPackageLocator(path);
+                // eslint-disable-next-line no-null/no-null
+                if (locator !== null) {
+                    var sourceLocator = pnpApi.findPackageLocator(sourceDirectory + "/");
+                    // Don't use the package name when the imported file is inside
+                    // the source directory (prefer a relative path instead)
+                    if (locator === sourceLocator) {
+                        return undefined;
+                    }
+                    var information = pnpApi.getPackageInformation(locator);
+                    packageName = locator.name;
+                    parts = {
+                        topLevelNodeModulesIndex: undefined,
+                        topLevelPackageNameIndex: undefined,
+                        // The last character from packageLocation is the trailing "/", we want to point to it
+                        packageRootIndex: information.packageLocation.length - 1,
+                        fileNameIndex: path.lastIndexOf("/"),
+                    };
+                }
+            }
             if (!parts) {
                 return undefined;
             }
@@ -117106,18 +117236,24 @@ var ts;
             if (isRedirect && !isPackageRootPath) {
                 return undefined;
             }
-            var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
-            // Get a path that's relative to node_modules or the importing file's path
-            // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
-            var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
-            if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
-                return undefined;
+            // If PnP is enabled the node_modules entries we'll get will always be relevant even if they
+            // are located in a weird path apparently outside of the source directory
+            if (typeof process.versions.pnp === "undefined") {
+                var globalTypingsCacheLocation = host.getGlobalTypingsCacheLocation && host.getGlobalTypingsCacheLocation();
+                // Get a path that's relative to node_modules or the importing file's path
+                // if node_modules folder is in this folder or any of its parent folders, no need to keep it.
+                var pathToTopLevelNodeModules = getCanonicalFileName(moduleSpecifier.substring(0, parts.topLevelNodeModulesIndex));
+                if (!(ts.startsWith(sourceDirectory, pathToTopLevelNodeModules) || globalTypingsCacheLocation && ts.startsWith(getCanonicalFileName(globalTypingsCacheLocation), pathToTopLevelNodeModules))) {
+                    return undefined;
+                }
             }
             // If the module was found in @types, get the actual Node package name
-            var nodeModulesDirectoryName = moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
-            var packageName = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
+            var nodeModulesDirectoryName = typeof packageName !== "undefined"
+                ? packageName + moduleSpecifier.substring(parts.packageRootIndex)
+                : moduleSpecifier.substring(parts.topLevelPackageNameIndex + 1);
+            var packageNameFromPath = ts.getPackageNameFromTypesPackageName(nodeModulesDirectoryName);
             // For classic resolution, only allow importing from node_modules/@types, not other node_modules
-            return ts.getEmitModuleResolutionKind(options) !== ts.ModuleResolutionKind.NodeJs && packageName === nodeModulesDirectoryName ? undefined : packageName;
+            return ts.getEmitModuleResolutionKind(options) !== ts.ModuleResolutionKind.NodeJs && packageNameFromPath === nodeModulesDirectoryName ? undefined : packageNameFromPath;
             function tryDirectoryWithPackageJson(packageRootIndex) {
                 var packageRootPath = path.substring(0, packageRootIndex);
                 var packageJsonPath = ts.combinePaths(packageRootPath, "package.json");
@@ -117911,6 +118047,10 @@ var ts;
         if (configFileName) {
             configFileWatcher = watchFile(configFileName, scheduleProgramReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
         }
+        var pnpFileWatcher;
+        if (typeof process.versions.pnp !== "undefined") {
+            pnpFileWatcher = watchFile(require.resolve("pnpapi"), scheduleResolutionReload, ts.PollingInterval.High, watchOptions, ts.WatchType.ConfigFile);
+        }
         var compilerHost = ts.createCompilerHostFromProgramHost(host, function () { return compilerOptions; }, directoryStructureHost);
         ts.setGetSourceFileAsHashVersioned(compilerHost, host);
         // Members for CompilerHost
@@ -117989,6 +118129,10 @@ var ts;
                 configFileWatcher.close();
                 configFileWatcher = undefined;
             }
+            if (pnpFileWatcher) {
+                pnpFileWatcher.close();
+                pnpFileWatcher = undefined;
+            }
             extendedConfigCache === null || extendedConfigCache === void 0 ? void 0 : extendedConfigCache.clear();
             extendedConfigCache = undefined;
             if (sharedExtendedConfigFileWatchers) {
@@ -118021,7 +118165,8 @@ var ts;
         function getCurrentProgram() {
             return builderProgram && builderProgram.getProgramOrUndefined();
         }
-        function synchronizeProgram() {
+        function synchronizeProgram(forceAllFilesAsInvalidated) {
+            if (forceAllFilesAsInvalidated === void 0) { forceAllFilesAsInvalidated = false; }
             writeLog("Synchronizing program");
             clearInvalidateResolutionsOfFailedLookupLocations();
             var program = getCurrentBuilderProgram();
@@ -118032,7 +118177,7 @@ var ts;
                 }
             }
             // All resolutions are invalid if user provided resolutions
-            var hasInvalidatedResolution = resolutionCache.createHasInvalidatedResolution(userProvidedResolution || changesAffectResolution);
+            var hasInvalidatedResolution = resolutionCache.createHasInvalidatedResolution(userProvidedResolution || changesAffectResolution || forceAllFilesAsInvalidated);
             if (ts.isProgramUptoDate(getCurrentProgram(), rootFileNames, compilerOptions, getSourceVersion, fileExists, hasInvalidatedResolution, hasChangedAutomaticTypeDirectiveNames, getParsedCommandLine, projectReferences)) {
                 if (hasChangedConfigFileParsingErrors) {
                     builderProgram = createProgram(/*rootNames*/ undefined, /*options*/ undefined, compilerHost, builderProgram, configFileParsingDiagnostics, projectReferences);
@@ -118239,6 +118384,12 @@ var ts;
             reloadLevel = ts.ConfigFileProgramReloadLevel.Full;
             scheduleProgramUpdate();
         }
+        function scheduleResolutionReload() {
+            writeLog("Clearing resolutions");
+            resolutionCache.clear();
+            reloadLevel = ts.ConfigFileProgramReloadLevel.Resolutions;
+            scheduleProgramUpdate();
+        }
         function updateProgramWithWatchStatus() {
             timerToUpdateProgram = undefined;
             reportWatchDiagnostic(ts.Diagnostics.File_change_detected_Starting_incremental_compilation);
@@ -118254,6 +118405,10 @@ var ts;
                     ts.perfLogger.logStartUpdateProgram("FullConfigReload");
                     reloadConfigFile();
                     break;
+                case ts.ConfigFileProgramReloadLevel.Resolutions:
+                    ts.perfLogger.logStartUpdateProgram("SynchronizeProgramWithResolutions");
+                    synchronizeProgram(/*forceAllFilesAsInvalidated*/ true);
+                    break;
                 default:
                     ts.perfLogger.logStartUpdateProgram("SynchronizeProgram");
                     synchronizeProgram();
